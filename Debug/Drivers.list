
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08003b48  08003b48  00013b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08003df0  08003df0  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df0  08003df0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08003df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001d0  08003fc8  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08003fc8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bde4  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab4  00000000  00000000  0002bfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003346  00000000  00000000  0002da91  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000680  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005b8  00000000  00000000  00031458  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000f005  00000000  00000000  00031a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00005fec  00000000  00000000  00040a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00033d84  00000000  00000000  00046a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0007a785  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021d4  00000000  00000000  0007a800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d0 	.word	0x200001d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08003b30 	.word	0x08003b30

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d4 	.word	0x200001d4
 800016c:	08003b30 	.word	0x08003b30

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ab2:	4b75      	ldr	r3, [pc, #468]	; (8000c88 <xTaskIncrementTick+0x1e0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 80dc 	bne.w	8000c74 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000abc:	4b73      	ldr	r3, [pc, #460]	; (8000c8c <xTaskIncrementTick+0x1e4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000ac4:	4a71      	ldr	r2, [pc, #452]	; (8000c8c <xTaskIncrementTick+0x1e4>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d110      	bne.n	8000af2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ad0:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <xTaskIncrementTick+0x1e8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <xTaskIncrementTick+0x1ec>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a6d      	ldr	r2, [pc, #436]	; (8000c90 <xTaskIncrementTick+0x1e8>)
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	4a6d      	ldr	r2, [pc, #436]	; (8000c94 <xTaskIncrementTick+0x1ec>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <xTaskIncrementTick+0x1f0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a6b      	ldr	r2, [pc, #428]	; (8000c98 <xTaskIncrementTick+0x1f0>)
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	f000 f927 	bl	8000d40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <xTaskIncrementTick+0x1f4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f0c0 80a6 	bcc.w	8000c4a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000afe:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <xTaskIncrementTick+0x1e8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b08:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <xTaskIncrementTick+0x1f4>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
                    break;
 8000b10:	e09b      	b.n	8000c4a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b12:	4b5f      	ldr	r3, [pc, #380]	; (8000c90 <xTaskIncrementTick+0x1e8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d203      	bcs.n	8000b32 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000b2a:	4a5c      	ldr	r2, [pc, #368]	; (8000c9c <xTaskIncrementTick+0x1f4>)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000b30:	e08b      	b.n	8000c4a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68d2      	ldr	r2, [r2, #12]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	6892      	ldr	r2, [r2, #8]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	3304      	adds	r3, #4
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d103      	bne.n	8000b60 <xTaskIncrementTick+0xb8>
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01e      	beq.n	8000bb6 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	6a12      	ldr	r2, [r2, #32]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	69d2      	ldr	r2, [r2, #28]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	3318      	adds	r3, #24
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d103      	bne.n	8000ba6 <xTaskIncrementTick+0xfe>
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	6a1a      	ldr	r2, [r3, #32]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	2201      	movs	r2, #1
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <xTaskIncrementTick+0x1f8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <xTaskIncrementTick+0x1f8>)
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bcc:	4935      	ldr	r1, [pc, #212]	; (8000ca4 <xTaskIncrementTick+0x1fc>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3304      	adds	r3, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	3204      	adds	r2, #4
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1d1a      	adds	r2, r3, #4
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <xTaskIncrementTick+0x1fc>)
 8000c0c:	441a      	add	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c16:	4923      	ldr	r1, [pc, #140]	; (8000ca4 <xTaskIncrementTick+0x1fc>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1c59      	adds	r1, r3, #1
 8000c26:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <xTaskIncrementTick+0x1fc>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4403      	add	r3, r0
 8000c32:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <xTaskIncrementTick+0x200>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	f4ff af5d 	bcc.w	8000afe <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c48:	e759      	b.n	8000afe <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <xTaskIncrementTick+0x200>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	4914      	ldr	r1, [pc, #80]	; (8000ca4 <xTaskIncrementTick+0x1fc>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d901      	bls.n	8000c66 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <xTaskIncrementTick+0x204>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e004      	b.n	8000c7e <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <xTaskIncrementTick+0x208>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <xTaskIncrementTick+0x208>)
 8000c7c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000274 	.word	0x20000274
 8000c8c:	2000025c 	.word	0x2000025c
 8000c90:	20000254 	.word	0x20000254
 8000c94:	20000258 	.word	0x20000258
 8000c98:	2000026c 	.word	0x2000026c
 8000c9c:	20000270 	.word	0x20000270
 8000ca0:	20000260 	.word	0x20000260
 8000ca4:	200001f0 	.word	0x200001f0
 8000ca8:	200001ec 	.word	0x200001ec
 8000cac:	20000268 	.word	0x20000268
 8000cb0:	20000264 	.word	0x20000264

08000cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <vTaskSwitchContext+0x78>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <vTaskSwitchContext+0x7c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000cc8:	e02a      	b.n	8000d20 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <vTaskSwitchContext+0x7c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <vTaskSwitchContext+0x80>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	fab3 f383 	clz	r3, r3
 8000cdc:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	f1c3 031f 	rsb	r3, r3, #31
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <vTaskSwitchContext+0x84>)
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3308      	adds	r3, #8
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d104      	bne.n	8000d16 <vTaskSwitchContext+0x62>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <vTaskSwitchContext+0x88>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000274 	.word	0x20000274
 8000d30:	20000268 	.word	0x20000268
 8000d34:	20000260 	.word	0x20000260
 8000d38:	200001f0 	.word	0x200001f0
 8000d3c:	200001ec 	.word	0x200001ec

08000d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <prvResetNextTaskUnblockTime+0x2c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <prvResetNextTaskUnblockTime+0x30>)
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d56:	e005      	b.n	8000d64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <prvResetNextTaskUnblockTime+0x2c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <prvResetNextTaskUnblockTime+0x30>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	20000254 	.word	0x20000254
 8000d70:	20000270 	.word	0x20000270
	...

08000d80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <pxCurrentTCBConst2>)
 8000d82:	6819      	ldr	r1, [r3, #0]
 8000d84:	6808      	ldr	r0, [r1, #0]
 8000d86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d8a:	f380 8809 	msr	PSP, r0
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	f380 8811 	msr	BASEPRI, r0
 8000d9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d9e:	4770      	bx	lr

08000da0 <pxCurrentTCBConst2>:
 8000da0:	200001ec 	.word	0x200001ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
	...

08000db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000db0:	f3ef 8009 	mrs	r0, PSP
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <pxCurrentTCBConst>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dc0:	6010      	str	r0, [r2, #0]
 8000dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000dc6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000dca:	f380 8811 	msr	BASEPRI, r0
 8000dce:	f7ff ff71 	bl	8000cb4 <vTaskSwitchContext>
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	f380 8811 	msr	BASEPRI, r0
 8000dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	6808      	ldr	r0, [r1, #0]
 8000de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000de6:	f380 8809 	msr	PSP, r0
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	4770      	bx	lr

08000df0 <pxCurrentTCBConst>:
 8000df0:	200001ec 	.word	0x200001ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop

08000df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000dfe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000e10:	f7ff fe4a 	bl	8000aa8 <xTaskIncrementTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SysTick_Handler+0x3c>)
 8000e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000ed04 	.word	0xe000ed04

08000e38 <GPS_ReadData>:
char gps_buffer[GPS_BUFFER_SIZE];
int gps_index = 0;

GPS_Data gps_data;

void GPS_ReadData(USART_TypeDef* USARTx) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    uint16_t data;

    MCAL_UART_ReceiveData(USARTx, &data, Enable);
 8000e40:	f107 030e 	add.w	r3, r7, #14
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 ffbf 	bl	8001dcc <MCAL_UART_ReceiveData>
   // MCAL_UART_SendData(USARTx, &data, Enable);
    if (gps_index < GPS_BUFFER_SIZE - 1) {
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b62      	cmp	r3, #98	; 0x62
 8000e54:	dc08      	bgt.n	8000e68 <GPS_ReadData+0x30>
        gps_buffer[gps_index++] = (char)data;
 8000e56:	89f8      	ldrh	r0, [r7, #14]
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e60:	600a      	str	r2, [r1, #0]
 8000e62:	b2c1      	uxtb	r1, r0
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <GPS_ReadData+0x60>)
 8000e66:	54d1      	strb	r1, [r2, r3]
    }

    if (data == '\n' || gps_index >= GPS_BUFFER_SIZE - 1) {
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d003      	beq.n	8000e76 <GPS_ReadData+0x3e>
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b62      	cmp	r3, #98	; 0x62
 8000e74:	dd0a      	ble.n	8000e8c <GPS_ReadData+0x54>
        gps_buffer[gps_index] = '\0';
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <GPS_ReadData+0x60>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	54d1      	strb	r1, [r2, r3]
        GPS_ParseData(USARTx);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f80b 	bl	8000e9c <GPS_ParseData>
        gps_index = 0;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <GPS_ReadData+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
    }
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000278 	.word	0x20000278
 8000e98:	20000294 	.word	0x20000294

08000e9c <GPS_ParseData>:

void GPS_ParseData(USART_TypeDef* USARTx)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b094      	sub	sp, #80	; 0x50
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    // Check if we have "$GPRMC" at the start
    if (strncmp(gps_buffer, "$GPRMC", 6) == 0)
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	4969      	ldr	r1, [pc, #420]	; (800104c <GPS_ParseData+0x1b0>)
 8000ea8:	4869      	ldr	r0, [pc, #420]	; (8001050 <GPS_ParseData+0x1b4>)
 8000eaa:	f001 fbf7 	bl	800269c <strncmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f040 80c7 	bne.w	8001044 <GPS_ParseData+0x1a8>
    {
        char *token;
        int field_index = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48

        // Temporary arrays to hold each piece of text
        char timeField[12]  = {0};
 8000eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
        char latField[16]   = {0};
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
        char nsField[2]     = {0};
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	853b      	strh	r3, [r7, #40]	; 0x28
        char lonField[16]   = {0};
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
        char ewField[2]     = {0};
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	82bb      	strh	r3, [r7, #20]
        char speedField[8]  = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

        // Use strtok to split by commas
        token = strtok(gps_buffer, ","); // First call
 8000ef4:	4957      	ldr	r1, [pc, #348]	; (8001054 <GPS_ParseData+0x1b8>)
 8000ef6:	4856      	ldr	r0, [pc, #344]	; (8001050 <GPS_ParseData+0x1b4>)
 8000ef8:	f001 fbf8 	bl	80026ec <strtok>
 8000efc:	64f8      	str	r0, [r7, #76]	; 0x4c
        while (token != NULL)
 8000efe:	e04e      	b.n	8000f9e <GPS_ParseData+0x102>
        {
            switch (field_index)
 8000f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f02:	3b01      	subs	r3, #1
 8000f04:	2b06      	cmp	r3, #6
 8000f06:	d841      	bhi.n	8000f8c <GPS_ParseData+0xf0>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <GPS_ParseData+0x74>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f2d 	.word	0x08000f2d
 8000f14:	08000f8d 	.word	0x08000f8d
 8000f18:	08000f3d 	.word	0x08000f3d
 8000f1c:	08000f4d 	.word	0x08000f4d
 8000f20:	08000f5d 	.word	0x08000f5d
 8000f24:	08000f6d 	.word	0x08000f6d
 8000f28:	08000f7d 	.word	0x08000f7d
            {
            // field_index = 1 => Time (hhmmss.sss)
            case 1:
                strncpy(timeField, token, sizeof(timeField)-1);
 8000f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f30:	220b      	movs	r2, #11
 8000f32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fbc3 	bl	80026c0 <strncpy>
                break;
 8000f3a:	e028      	b.n	8000f8e <GPS_ParseData+0xf2>

            // field_index = 3 => Latitude (e.g. 4807.038)
            case 3:
                strncpy(latField, token, sizeof(latField)-1);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f40:	220f      	movs	r2, #15
 8000f42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fbbb 	bl	80026c0 <strncpy>
                break;
 8000f4a:	e020      	b.n	8000f8e <GPS_ParseData+0xf2>

            // field_index = 4 => 'N' or 'S'
            case 4:
                strncpy(nsField, token, sizeof(nsField)-1);
 8000f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f50:	2201      	movs	r2, #1
 8000f52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fbb3 	bl	80026c0 <strncpy>
                break;
 8000f5a:	e018      	b.n	8000f8e <GPS_ParseData+0xf2>

            // field_index = 5 => Longitude (e.g. 01131.000)
            case 5:
                strncpy(lonField, token, sizeof(lonField)-1);
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	220f      	movs	r2, #15
 8000f62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fbab 	bl	80026c0 <strncpy>
                break;
 8000f6a:	e010      	b.n	8000f8e <GPS_ParseData+0xf2>

            // field_index = 6 => 'E' or 'W'
            case 6:
                strncpy(ewField, token, sizeof(ewField)-1);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2201      	movs	r2, #1
 8000f72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fba3 	bl	80026c0 <strncpy>
                break;
 8000f7a:	e008      	b.n	8000f8e <GPS_ParseData+0xf2>

            // field_index = 7 => Speed in knots
            case 7:
                strncpy(speedField, token, sizeof(speedField)-1);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2207      	movs	r2, #7
 8000f82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fb9b 	bl	80026c0 <strncpy>
                break;
 8000f8a:	e000      	b.n	8000f8e <GPS_ParseData+0xf2>

            default:
                break;
 8000f8c:	bf00      	nop
            }

            field_index++;
 8000f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f90:	3301      	adds	r3, #1
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
            token = strtok(NULL, ","); // Next split
 8000f94:	492f      	ldr	r1, [pc, #188]	; (8001054 <GPS_ParseData+0x1b8>)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 fba8 	bl	80026ec <strtok>
 8000f9c:	64f8      	str	r0, [r7, #76]	; 0x4c
        while (token != NULL)
 8000f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ad      	bne.n	8000f00 <GPS_ParseData+0x64>
        }

        // Now send them out via UART
        MCAL_UART_SendString(USARTx, (uint8_t*)"\r\n[GPRMC Data]\r\n");
 8000fa4:	492c      	ldr	r1, [pc, #176]	; (8001058 <GPS_ParseData+0x1bc>)
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 ffca 	bl	8001f40 <MCAL_UART_SendString>

        MCAL_UART_SendString(USARTx, (uint8_t*)"Time: ");
 8000fac:	492b      	ldr	r1, [pc, #172]	; (800105c <GPS_ParseData+0x1c0>)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 ffc6 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)timeField);
 8000fb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 ffc0 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)"\r\n");
 8000fc0:	4927      	ldr	r1, [pc, #156]	; (8001060 <GPS_ParseData+0x1c4>)
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 ffbc 	bl	8001f40 <MCAL_UART_SendString>

        MCAL_UART_SendString(USARTx, (uint8_t*)"Latitude: ");
 8000fc8:	4926      	ldr	r1, [pc, #152]	; (8001064 <GPS_ParseData+0x1c8>)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 ffb8 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)latField);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 ffb2 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)" ");
 8000fdc:	4922      	ldr	r1, [pc, #136]	; (8001068 <GPS_ParseData+0x1cc>)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 ffae 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)nsField);
 8000fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 ffa8 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)"\r\n");
 8000ff0:	491b      	ldr	r1, [pc, #108]	; (8001060 <GPS_ParseData+0x1c4>)
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 ffa4 	bl	8001f40 <MCAL_UART_SendString>

        MCAL_UART_SendString(USARTx, (uint8_t*)"Longitude: ");
 8000ff8:	491c      	ldr	r1, [pc, #112]	; (800106c <GPS_ParseData+0x1d0>)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 ffa0 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)lonField);
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 ff9a 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)" ");
 800100c:	4916      	ldr	r1, [pc, #88]	; (8001068 <GPS_ParseData+0x1cc>)
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 ff96 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)ewField);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 ff90 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)"\r\n");
 8001020:	490f      	ldr	r1, [pc, #60]	; (8001060 <GPS_ParseData+0x1c4>)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 ff8c 	bl	8001f40 <MCAL_UART_SendString>

        MCAL_UART_SendString(USARTx, (uint8_t*)"Speed(knots): ");
 8001028:	4911      	ldr	r1, [pc, #68]	; (8001070 <GPS_ParseData+0x1d4>)
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 ff88 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)speedField);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 ff82 	bl	8001f40 <MCAL_UART_SendString>
        MCAL_UART_SendString(USARTx, (uint8_t*)"\r\n");
 800103c:	4908      	ldr	r1, [pc, #32]	; (8001060 <GPS_ParseData+0x1c4>)
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 ff7e 	bl	8001f40 <MCAL_UART_SendString>
    }
    // If it's not $GPRMC, we simply ignore it in this example
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08003b48 	.word	0x08003b48
 8001050:	20000294 	.word	0x20000294
 8001054:	08003b50 	.word	0x08003b50
 8001058:	08003b54 	.word	0x08003b54
 800105c:	08003b68 	.word	0x08003b68
 8001060:	08003b70 	.word	0x08003b70
 8001064:	08003b74 	.word	0x08003b74
 8001068:	08003b80 	.word	0x08003b80
 800106c:	08003b84 	.word	0x08003b84
 8001070:	08003b90 	.word	0x08003b90

08001074 <GPS_Init>:

void GPS_Init(USART_TypeDef* USARTx) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    USART_Config gps_config;
    gps_config.USART_Mode = USART_MODE_TX_RX;
 800107c:	230c      	movs	r3, #12
 800107e:	733b      	strb	r3, [r7, #12]
    gps_config.Payload_Length = USART_8_DATA_Bits;
 8001080:	2300      	movs	r3, #0
 8001082:	753b      	strb	r3, [r7, #20]
    gps_config.Parity = USART_Parity_Type_None;
 8001084:	2300      	movs	r3, #0
 8001086:	757b      	strb	r3, [r7, #21]
    gps_config.Stop_bits = USART_STOP_Bits_one;
 8001088:	2300      	movs	r3, #0
 800108a:	75bb      	strb	r3, [r7, #22]
    gps_config.Flow_Control = USART_FLOW_CONTROL_None	;
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
    gps_config.Baud_Rate = 9600;
 8001090:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001094:	613b      	str	r3, [r7, #16]
    gps_config.IRQ_Enable = USART_IRQ_Disable;
 8001096:	2300      	movs	r3, #0
 8001098:	763b      	strb	r3, [r7, #24]

    MCAL_UART_Init(USARTx, &gps_config);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fdb5 	bl	8001c10 <MCAL_UART_Init>
    MCAL_UART_GPIO_Set_Pins(USARTx);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 febe 	bl	8001e28 <MCAL_UART_GPIO_Set_Pins>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <main>:
int __io_putchar(int ch) {
    MCAL_UART_SendData(USART1, (uint16_t*)&ch, Enable);
    return ch;
}
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	//MCAL_RCC_SetSystemClockTo16MHz();
	GPIOA_CLOCK_ENABLE;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <main+0x38>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <main+0x38>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
	AFIO_CLOCK_ENABLE;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <main+0x38>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <main+0x38>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6193      	str	r3, [r2, #24]
	RCC_USART1_CLK_EN();
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <main+0x38>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <main+0x38>)
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	6193      	str	r3, [r2, #24]
	    GPS_Init(USART1);
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <main+0x3c>)
 80010de:	f7ff ffc9 	bl	8001074 <GPS_Init>
//	    gps_config.Baud_Rate = 9600;
//	    gps_config.IRQ_Enable = USART_IRQ_Disable;
//	    MCAL_UART_Init(USART2, &gps_config);
//	       MCAL_UART_GPIO_Set_Pins(USART2);
	    while (1) {
	        GPS_ReadData(USART1);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <main+0x3c>)
 80010e4:	f7ff fea8 	bl	8000e38 <GPS_ReadData>
 80010e8:	e7fb      	b.n	80010e2 <main+0x2e>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013800 	.word	0x40013800

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f000 ff40 	bl	8001fa8 <__errno>
 8001128:	4602      	mov	r2, r0
 800112a:	230c      	movs	r3, #12
 800112c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002800 	.word	0x20002800
 8001154:	00000400 	.word	0x00000400
 8001158:	2000027c 	.word	0x2000027c
 800115c:	20000370 	.word	0x20000370

08001160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001162:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001164:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118e:	f000 ff11 	bl	8001fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff ff8f 	bl	80010b4 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   r0, =_estack
 8001198:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80011a4:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 80011a8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80011ac:	20000370 	.word	0x20000370

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <USB_HP_CAN_TX_IRQHandler>:
 */
//******************************ISR
 extern CAN_HandleTypeDef hcan;

void USB_HP_CAN_TX_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80011ba:	f000 f819 	bl	80011f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000304 	.word	0x20000304

080011c8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80011ce:	f000 f80f 	bl	80011f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000304 	.word	0x20000304

080011dc <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <CAN_SCE_IRQHandler+0x10>)
 80011e2:	f000 f805 	bl	80011f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000304 	.word	0x20000304

080011f0 <HAL_CAN_IRQHandler>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	623b      	str	r3, [r7, #32]
	uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61fb      	str	r3, [r7, #28]
	uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
	uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	617b      	str	r3, [r7, #20]
	uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	613b      	str	r3, [r7, #16]
	uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d07c      	beq.n	8001330 <HAL_CAN_IRQHandler+0x140>
	{
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <HAL_CAN_IRQHandler+0x98>
		{
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
				/* Call registered callback*/
				hcan->TxMailbox0CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f97d 	bl	8001552 <HAL_CAN_TxMailbox0CompleteCallback>
 8001258:	e016      	b.n	8001288 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			}
			else
			{
				if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_CAN_IRQHandler+0x7e>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e00c      	b.n	8001288 <HAL_CAN_IRQHandler+0x98>
				}
				else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_CAN_IRQHandler+0x92>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e002      	b.n	8001288 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
					/* Call registered callback*/
					hcan->TxMailbox0AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f980 	bl	8001588 <HAL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d024      	beq.n	80012dc <HAL_CAN_IRQHandler+0xec>
		{
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129a:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
				/* Call registered callback*/
				hcan->TxMailbox1CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f95c 	bl	8001564 <HAL_CAN_TxMailbox1CompleteCallback>
 80012ac:	e016      	b.n	80012dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			}
			else
			{
				if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_CAN_IRQHandler+0xd2>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	e00c      	b.n	80012dc <HAL_CAN_IRQHandler+0xec>
				}
				else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_CAN_IRQHandler+0xe6>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
 80012d4:	e002      	b.n	80012dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
					/* Call registered callback*/
					hcan->TxMailbox1AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f95f 	bl	800159a <HAL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <HAL_CAN_IRQHandler+0x140>
		{
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ee:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
				/* Call registered callback*/
				hcan->TxMailbox2CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f93b 	bl	8001576 <HAL_CAN_TxMailbox2CompleteCallback>
 8001300:	e016      	b.n	8001330 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			}
			else
			{
				if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_CAN_IRQHandler+0x126>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
 8001314:	e00c      	b.n	8001330 <HAL_CAN_IRQHandler+0x140>
				}
				else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_CAN_IRQHandler+0x13a>
				{
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
 8001328:	e002      	b.n	8001330 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
					/* Call registered callback*/
					hcan->TxMailbox2AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox2AbortCallback(hcan);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f93e 	bl	80015ac <HAL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <HAL_CAN_IRQHandler+0x164>
	{
		if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_CAN_IRQHandler+0x164>
		{
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO0 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2210      	movs	r2, #16
 8001352:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_CAN_IRQHandler+0x186>
	{
		if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_CAN_IRQHandler+0x186>
		{
			/* Clear FIFO 0 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2208      	movs	r2, #8
 800136e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->RxFifo0FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0FullCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f92d 	bl	80015d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d009      	beq.n	8001394 <HAL_CAN_IRQHandler+0x1a4>
	{
		/* Check if message is still pending */
		if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->RxFifo0MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f915 	bl	80015be <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x1c8>
	{
		if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x1c8>
		{
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO1 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2210      	movs	r2, #16
 80013b6:	611a      	str	r2, [r3, #16]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_CAN_IRQHandler+0x1ea>
	{
		if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_CAN_IRQHandler+0x1ea>
		{
			/* Clear FIFO 1 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2208      	movs	r2, #8
 80013d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->RxFifo1FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1FullCallback(hcan);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f90d 	bl	80015f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x208>
	{
		/* Check if message is still pending */
		if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->RxFifo1MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8f5 	bl	80015e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_CAN_IRQHandler+0x22a>
	{
		if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_CAN_IRQHandler+0x22a>
		{
			/* Clear Sleep interrupt Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2210      	movs	r2, #16
 8001412:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->SleepCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_SleepCallback(hcan);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f8f6 	bl	8001606 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_CAN_IRQHandler+0x24c>
	{
		if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_CAN_IRQHandler+0x24c>
		{
			/* Clear WakeUp Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2208      	movs	r2, #8
 8001434:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
			/* Call registered callback*/
			hcan->WakeUpFromRxMsgCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f8ee 	bl	8001618 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & CAN_IT_ERROR) != 0U)
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_CAN_IRQHandler+0x342>
	{
		if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d06c      	beq.n	800152a <HAL_CAN_IRQHandler+0x33a>
		{
			/* Check Error Warning Flag */
			if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_CAN_IRQHandler+0x27c>
					((esrflags & CAN_ESR_EWGF) != 0U))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f003 0301 	and.w	r3, r3, #1
			if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_CAN_IRQHandler+0x27c>
			{
				/* Set CAN error code to Error Warning */
				errorcode |= HAL_CAN_ERROR_EWG;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <HAL_CAN_IRQHandler+0x298>
					((esrflags & CAN_ESR_EPVF) != 0U))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0302 	and.w	r3, r3, #2
			if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_CAN_IRQHandler+0x298>
			{
				/* Set CAN error code to Error Passive */
				errorcode |= HAL_CAN_ERROR_EPV;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x2b4>
					((esrflags & CAN_ESR_BOFF) != 0U))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f003 0304 	and.w	r3, r3, #4
			if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x2b4>
			{
				/* Set CAN error code to Bus-Off */
				errorcode |= HAL_CAN_ERROR_BOF;
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03d      	beq.n	800152a <HAL_CAN_IRQHandler+0x33a>
					((esrflags & CAN_ESR_LEC) != 0U))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
			if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d038      	beq.n	800152a <HAL_CAN_IRQHandler+0x33a>
			{
				switch (esrflags & CAN_ESR_LEC)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014be:	2b30      	cmp	r3, #48	; 0x30
 80014c0:	d017      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x302>
 80014c2:	2b30      	cmp	r3, #48	; 0x30
 80014c4:	d804      	bhi.n	80014d0 <HAL_CAN_IRQHandler+0x2e0>
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d009      	beq.n	80014de <HAL_CAN_IRQHandler+0x2ee>
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d00c      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x2f8>
				case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            				/* Set CAN error code to CRC error */
            				errorcode |= HAL_CAN_ERROR_CRC;
				break;
				default:
					break;
 80014ce:	e024      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
				switch (esrflags & CAN_ESR_LEC)
 80014d0:	2b50      	cmp	r3, #80	; 0x50
 80014d2:	d018      	beq.n	8001506 <HAL_CAN_IRQHandler+0x316>
 80014d4:	2b60      	cmp	r3, #96	; 0x60
 80014d6:	d01b      	beq.n	8001510 <HAL_CAN_IRQHandler+0x320>
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	d00f      	beq.n	80014fc <HAL_CAN_IRQHandler+0x30c>
					break;
 80014dc:	e01d      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_STF;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014e6:	e018      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_FOR;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014f0:	e013      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_ACK;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014fa:	e00e      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_BR;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001504:	e009      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_BD;
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800150e:	e004      	b.n	800151a <HAL_CAN_IRQHandler+0x32a>
            				errorcode |= HAL_CAN_ERROR_CRC;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001518:	bf00      	nop
				}

				/* Clear Last error code Flag */
				CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001528:	619a      	str	r2, [r3, #24]
			}
		}

		/* Clear ERRI Flag */
		__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2204      	movs	r2, #4
 8001530:	605a      	str	r2, [r3, #4]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != HAL_CAN_ERROR_NONE)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_CAN_IRQHandler+0x35a>
	{
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
		/* Call registered callback*/
		hcan->ErrorCallback(hcan);
#else
		/* Call weak (surcharged) callback */
		HAL_CAN_ErrorCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f870 	bl	800162a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
	}
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_CAN_TxMailbox0CompleteCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
	 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_TxMailbox1CompleteCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
	 */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_TxMailbox2CompleteCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
	 */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_TxMailbox0AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
	 */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_TxMailbox1AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
	 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_TxMailbox2AbortCallback>:
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
	 */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
	 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_RxFifo0FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
	 */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
	 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_CAN_RxFifo1FullCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
	 */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <HAL_CAN_SleepCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
	 */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_CAN_WakeUpFromRxMsgCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
	 */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_CAN_ErrorCallback>:
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <EXTI0_IRQHandler+0x1c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <EXTI0_IRQHandler+0x20>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <EXTI0_IRQHandler+0x20>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6153      	str	r3, [r2, #20]

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000032c 	.word	0x2000032c
 800165c:	40010400 	.word	0x40010400

08001660 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <EXTI1_IRQHandler+0x1c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <EXTI1_IRQHandler+0x20>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <EXTI1_IRQHandler+0x20>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6153      	str	r3, [r2, #20]

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000032c 	.word	0x2000032c
 8001680:	40010400 	.word	0x40010400

08001684 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <EXTI2_IRQHandler+0x1c>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <EXTI2_IRQHandler+0x20>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <EXTI2_IRQHandler+0x20>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6153      	str	r3, [r2, #20]


}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000032c 	.word	0x2000032c
 80016a4:	40010400 	.word	0x40010400

080016a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <EXTI3_IRQHandler+0x1c>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <EXTI3_IRQHandler+0x20>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <EXTI3_IRQHandler+0x20>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6153      	str	r3, [r2, #20]

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000032c 	.word	0x2000032c
 80016c8:	40010400 	.word	0x40010400

080016cc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <EXTI4_IRQHandler+0x1c>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <EXTI4_IRQHandler+0x20>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <EXTI4_IRQHandler+0x20>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6153      	str	r3, [r2, #20]

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000032c 	.word	0x2000032c
 80016ec:	40010400 	.word	0x40010400

080016f0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <EXTI9_5_IRQHandler+0x22>
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <EXTI9_5_IRQHandler+0xa4>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4798      	blx	r3
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a21      	ldr	r2, [pc, #132]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <EXTI9_5_IRQHandler+0x40>
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <EXTI9_5_IRQHandler+0xa4>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4798      	blx	r3
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <EXTI9_5_IRQHandler+0x5e>
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <EXTI9_5_IRQHandler+0xa4>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4798      	blx	r3
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <EXTI9_5_IRQHandler+0x7c>
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <EXTI9_5_IRQHandler+0xa4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4798      	blx	r3
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <EXTI9_5_IRQHandler+0x9a>
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <EXTI9_5_IRQHandler+0xa4>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	4798      	blx	r3
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a03      	ldr	r2, [pc, #12]	; (8001790 <EXTI9_5_IRQHandler+0xa0>)
 8001784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001788:	6153      	str	r3, [r2, #20]
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010400 	.word	0x40010400
 8001794:	2000032c 	.word	0x2000032c

08001798 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <EXTI15_10_IRQHandler+0x22>
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	4798      	blx	r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b8:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <EXTI15_10_IRQHandler+0x40>
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	4798      	blx	r3
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d6:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <EXTI15_10_IRQHandler+0x5e>
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4798      	blx	r3
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a19      	ldr	r2, [pc, #100]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f4:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <EXTI15_10_IRQHandler+0x7c>
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	4798      	blx	r3
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 800180e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001812:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <EXTI15_10_IRQHandler+0x9a>
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 8001822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001824:	4798      	blx	r3
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <EXTI15_10_IRQHandler+0xb8>
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <EXTI15_10_IRQHandler+0xc0>)
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	4798      	blx	r3
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4a02      	ldr	r2, [pc, #8]	; (8001854 <EXTI15_10_IRQHandler+0xbc>)
 800184a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184e:	6153      	str	r3, [r2, #20]

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40010400 	.word	0x40010400
 8001858:	2000032c 	.word	0x2000032c

0800185c <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d042      	beq.n	80018f2 <Get_Pos_CRLH+0x96>
 800186c:	2b80      	cmp	r3, #128	; 0x80
 800186e:	dc11      	bgt.n	8001894 <Get_Pos_CRLH+0x38>
 8001870:	2b08      	cmp	r3, #8
 8001872:	d036      	beq.n	80018e2 <Get_Pos_CRLH+0x86>
 8001874:	2b08      	cmp	r3, #8
 8001876:	dc06      	bgt.n	8001886 <Get_Pos_CRLH+0x2a>
 8001878:	2b02      	cmp	r3, #2
 800187a:	d02e      	beq.n	80018da <Get_Pos_CRLH+0x7e>
 800187c:	2b04      	cmp	r3, #4
 800187e:	d02e      	beq.n	80018de <Get_Pos_CRLH+0x82>
 8001880:	2b01      	cmp	r3, #1
 8001882:	d028      	beq.n	80018d6 <Get_Pos_CRLH+0x7a>
 8001884:	e047      	b.n	8001916 <Get_Pos_CRLH+0xba>
 8001886:	2b20      	cmp	r3, #32
 8001888:	d02f      	beq.n	80018ea <Get_Pos_CRLH+0x8e>
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d02f      	beq.n	80018ee <Get_Pos_CRLH+0x92>
 800188e:	2b10      	cmp	r3, #16
 8001890:	d029      	beq.n	80018e6 <Get_Pos_CRLH+0x8a>
 8001892:	e040      	b.n	8001916 <Get_Pos_CRLH+0xba>
 8001894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001898:	d033      	beq.n	8001902 <Get_Pos_CRLH+0xa6>
 800189a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800189e:	dc09      	bgt.n	80018b4 <Get_Pos_CRLH+0x58>
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d029      	beq.n	80018fa <Get_Pos_CRLH+0x9e>
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d028      	beq.n	80018fe <Get_Pos_CRLH+0xa2>
 80018ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b0:	d021      	beq.n	80018f6 <Get_Pos_CRLH+0x9a>
 80018b2:	e030      	b.n	8001916 <Get_Pos_CRLH+0xba>
 80018b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b8:	d027      	beq.n	800190a <Get_Pos_CRLH+0xae>
 80018ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018be:	dc03      	bgt.n	80018c8 <Get_Pos_CRLH+0x6c>
 80018c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c4:	d01f      	beq.n	8001906 <Get_Pos_CRLH+0xaa>
 80018c6:	e026      	b.n	8001916 <Get_Pos_CRLH+0xba>
 80018c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018cc:	d01f      	beq.n	800190e <Get_Pos_CRLH+0xb2>
 80018ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d2:	d01e      	beq.n	8001912 <Get_Pos_CRLH+0xb6>
 80018d4:	e01f      	b.n	8001916 <Get_Pos_CRLH+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e01e      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	e01c      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80018de:	2308      	movs	r3, #8
 80018e0:	e01a      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80018e2:	230c      	movs	r3, #12
 80018e4:	e018      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80018e6:	2310      	movs	r3, #16
 80018e8:	e016      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80018ea:	2314      	movs	r3, #20
 80018ec:	e014      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80018ee:	2318      	movs	r3, #24
 80018f0:	e012      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80018f2:	231c      	movs	r3, #28
 80018f4:	e010      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e00e      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 80018fa:	2304      	movs	r3, #4
 80018fc:	e00c      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80018fe:	2308      	movs	r3, #8
 8001900:	e00a      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8001902:	230c      	movs	r3, #12
 8001904:	e008      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8001906:	2310      	movs	r3, #16
 8001908:	e006      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800190a:	2314      	movs	r3, #20
 800190c:	e004      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800190e:	2318      	movs	r3, #24
 8001910:	e002      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8001912:	231c      	movs	r3, #28
 8001914:	e000      	b.n	8001918 <Get_Pos_CRLH+0xbc>
		break;

	default:
		return 0;
 8001916:	2300      	movs	r3, #0


	}

}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2bff      	cmp	r3, #255	; 0xff
 8001936:	d801      	bhi.n	800193c <MCAL_GPIO_Init+0x1a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	e001      	b.n	8001940 <MCAL_GPIO_Init+0x1e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff88 	bl	800185c <Get_Pos_CRLH>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	230f      	movs	r3, #15
 8001952:	4093      	lsls	r3, r2
 8001954:	43da      	mvns	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	401a      	ands	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00b      	beq.n	8001980 <MCAL_GPIO_Init+0x5e>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d007      	beq.n	8001980 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8001974:	2b06      	cmp	r3, #6
 8001976:	d003      	beq.n	8001980 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b07      	cmp	r3, #7
 800197e:	d117      	bne.n	80019b0 <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	3b04      	subs	r3, #4
 8001986:	009a      	lsls	r2, r3, #2
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4313      	orrs	r3, r2
 800198e:	f003 040f 	and.w	r4, r3, #15
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff60 	bl	800185c <Get_Pos_CRLH>
 800199c:	4603      	mov	r3, r0
 800199e:	fa04 f203 	lsl.w	r2, r4, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	bf00      	nop

		}

	}

}
 80019ae:	e058      	b.n	8001a62 <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d11c      	bne.n	80019f2 <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009a      	lsls	r2, r3, #2
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f003 040f 	and.w	r4, r3, #15
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff3e 	bl	800185c <Get_Pos_CRLH>
 80019e0:	4603      	mov	r3, r0
 80019e2:	fa04 f203 	lsl.w	r2, r4, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	e037      	b.n	8001a62 <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d11e      	bne.n	8001a38 <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	43d2      	mvns	r2, r2
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	009a      	lsls	r2, r3, #2
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f003 040f 	and.w	r4, r3, #15
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff1b 	bl	800185c <Get_Pos_CRLH>
 8001a26:	4603      	mov	r3, r0
 8001a28:	fa04 f203 	lsl.w	r2, r4, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	e014      	b.n	8001a62 <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f003 040f 	and.w	r4, r3, #15
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff05 	bl	800185c <Get_Pos_CRLH>
 8001a52:	4603      	mov	r3, r0
 8001a54:	fa04 f203 	lsl.w	r2, r4, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}

08001a6a <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler (void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <I2C2_EV_IRQHandler>:



void I2C2_EV_IRQHandler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
	...

08001a9c <MCAL_RCC_GETSYSCLKfreq>:
1111: SYSCLK divided by 512*/
const	uint16_t	AHBrescTable[16U] = 	{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t	MCAL_RCC_GETSYSCLKfreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

	//we will use HSI as a system clock

	switch((RCC->CFGR >>2) & 0b11){
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MCAL_RCC_GETSYSCLKfreq+0x34>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d006      	beq.n	8001abc <MCAL_RCC_GETSYSCLKfreq+0x20>
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d302      	bcc.n	8001ab8 <MCAL_RCC_GETSYSCLKfreq+0x1c>
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d004      	beq.n	8001ac0 <MCAL_RCC_GETSYSCLKfreq+0x24>
 8001ab6:	e005      	b.n	8001ac4 <MCAL_RCC_GETSYSCLKfreq+0x28>
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable

	case 0:
		return HSI_RC_CLK;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MCAL_RCC_GETSYSCLKfreq+0x38>)
 8001aba:	e004      	b.n	8001ac6 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 1:
		return HSE_CLK;//we need to calculate it ,so user should specify it how to use HSE
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 8001abe:	e002      	b.n	8001ac6 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 2:

		return 16000000;//we need to calculate it ,so user should specify it how to use PLLCK & PLLMUL & PLL MUX
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 8001ac2:	e000      	b.n	8001ac6 <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;

	}
	return 0;
 8001ac4:	2300      	movs	r3, #0

}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	007a1200 	.word	0x007a1200
 8001ad8:	00f42400 	.word	0x00f42400

08001adc <MCAL_RCC_GETHCLKfreq>:

uint32_t	MCAL_RCC_GETHCLKfreq(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return MCAL_RCC_GETSYSCLKfreq() >> AHBrescTable[(RCC->CFGR >> 4)&0xF];
 8001ae0:	f7ff ffdc 	bl	8001a9c <MCAL_RCC_GETSYSCLKfreq>
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MCAL_RCC_GETHCLKfreq+0x24>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <MCAL_RCC_GETHCLKfreq+0x28>)
 8001af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af6:	fa21 f303 	lsr.w	r3, r1, r3

}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08003ba8 	.word	0x08003ba8

08001b08 <MCAL_RCC_GETPCLK1Freq>:

uint32_t	MCAL_RCC_GETPCLK1Freq(void){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 8) & 0b111]  ;
 8001b0c:	f7ff ffe6 	bl	8001adc <MCAL_RCC_GETHCLKfreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <MCAL_RCC_GETPCLK1Freq+0x20>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <MCAL_RCC_GETPCLK1Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3

}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08003ba0 	.word	0x08003ba0

08001b30 <MCAL_RCC_GETPCLK2Freq>:
uint32_t 	MCAL_RCC_GETPCLK2Freq(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 11) & 0b111]  ;
 8001b34:	f7ff ffd2 	bl	8001adc <MCAL_RCC_GETHCLKfreq>
 8001b38:	4601      	mov	r1, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <MCAL_RCC_GETPCLK2Freq+0x20>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <MCAL_RCC_GETPCLK2Freq+0x24>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	fa21 f303 	lsr.w	r3, r1, r3

}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08003ba0 	.word	0x08003ba0

08001b58 <SPI1_IRQHandler>:



//---ISR-------

void SPI1_IRQHandler (void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI1->SR & (1 << 1)) >> 1 ) ;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <SPI1_IRQHandler+0x54>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	793b      	ldrb	r3, [r7, #4]
 8001b6c:	f362 0300 	bfi	r3, r2, #0, #1
 8001b70:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI1->SR & (1 << 0)) >> 0 ) ;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <SPI1_IRQHandler+0x54>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	793b      	ldrb	r3, [r7, #4]
 8001b7e:	f362 0341 	bfi	r3, r2, #1, #1
 8001b82:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI1->SR & (1 << 4)) >> 4 ) ;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <SPI1_IRQHandler+0x54>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	793b      	ldrb	r3, [r7, #4]
 8001b92:	f362 0382 	bfi	r3, r2, #2, #1
 8001b96:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[0]->IRQ_CallBack(irq_src) ;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SPI1_IRQHandler+0x58>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	7938      	ldrb	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	20000280 	.word	0x20000280

08001bb4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
	IRQ_SOURCE irq_src ;
	irq_src.TXE = ( (SPI2->SR & (1 << 1)) >> 1 ) ;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <SPI2_IRQHandler+0x54>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	793b      	ldrb	r3, [r7, #4]
 8001bc8:	f362 0300 	bfi	r3, r2, #0, #1
 8001bcc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( (SPI2->SR & (1 << 0)) >> 0 ) ;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <SPI2_IRQHandler+0x54>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	793b      	ldrb	r3, [r7, #4]
 8001bda:	f362 0341 	bfi	r3, r2, #1, #1
 8001bde:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( (SPI2->SR & (1 << 4)) >> 4 ) ;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <SPI2_IRQHandler+0x54>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	f362 0382 	bfi	r3, r2, #2, #1
 8001bf2:	713b      	strb	r3, [r7, #4]
	G_SPI_Config[1]->IRQ_CallBack(irq_src) ;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SPI2_IRQHandler+0x58>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	7938      	ldrb	r0, [r7, #4]
 8001bfc:	4798      	blx	r3

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40003800 	.word	0x40003800
 8001c0c:	20000280 	.word	0x20000280

08001c10 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, USART_Config* UART_Config)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	Global_config = UART_Config ;
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <MCAL_UART_Init+0x168>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <MCAL_UART_Init+0x16c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d106      	bne.n	8001c36 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8001c28:	4b55      	ldr	r3, [pc, #340]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	e014      	b.n	8001c60 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <MCAL_UART_Init+0x174>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d106      	bne.n	8001c4c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	e009      	b.n	8001c60 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <MCAL_UART_Init+0x178>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d105      	bne.n	8001c60 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <MCAL_UART_Init+0x170>)
 8001c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5e:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	7a12      	ldrb	r2, [r2, #8]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	7a52      	ldrb	r2, [r2, #9]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->Stop_bits ;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	7a92      	ldrb	r2, [r2, #10]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->Flow_Control;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	7ad2      	ldrb	r2, [r2, #11]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <MCAL_UART_Init+0x16c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d103      	bne.n	8001cc2 <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GETPCLK2Freq();
 8001cba:	f7ff ff39 	bl	8001b30 <MCAL_RCC_GETPCLK2Freq>
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	e002      	b.n	8001cc8 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GETPCLK1Freq();
 8001cc2:	f7ff ff21 	bl	8001b08 <MCAL_RCC_GETPCLK1Freq>
 8001cc6:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_Register(pclk,UART_Config->Baud_Rate);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	0119      	lsls	r1, r3, #4
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	441a      	add	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf8:	2064      	movs	r0, #100	; 0x64
 8001cfa:	fb00 f303 	mul.w	r3, r0, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MCAL_UART_Init+0x17c>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != USART_IRQ_Disable)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	7b1b      	ldrb	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d026      	beq.n	8001d6e <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	7b12      	ldrb	r2, [r2, #12]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <MCAL_UART_Init+0x16c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d106      	bne.n	8001d44 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8001d42:	e014      	b.n	8001d6e <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <MCAL_UART_Init+0x174>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d106      	bne.n	8001d5a <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	e009      	b.n	8001d6e <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <MCAL_UART_Init+0x178>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d105      	bne.n	8001d6e <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <MCAL_UART_Init+0x180>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000288 	.word	0x20000288
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40004400 	.word	0x40004400
 8001d88:	40004800 	.word	0x40004800
 8001d8c:	51eb851f 	.word	0x51eb851f
 8001d90:	e000e104 	.word	0xe000e104

08001d94 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechanism PollingEnable )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	71fb      	strb	r3, [r7, #7]
	//uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEnable  == Enable)
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 8001da8:	bf00      	nop
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f9      	beq.n	8001daa <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
	}




}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechanism PollingEnable )
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEnable ==  Enable)
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 8001de0:	bf00      	nop
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f9      	beq.n	8001de2 <MCAL_UART_ReceiveData+0x16>
		}

	}else
	{
		//This is 8bit data
		if (Global_config->Parity ==USART_Parity_Type_None)
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <MCAL_UART_ReceiveData+0x58>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	7a5b      	ldrb	r3, [r3, #9]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	801a      	strh	r2, [r3, #0]

		}
	}


}
 8001e06:	e007      	b.n	8001e18 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	801a      	strh	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000288 	.word	0x20000288

08001e28 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;
	AFIO_CLOCK_ENABLE;
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]

	if ( USARTx == USART1 )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <MCAL_UART_GPIO_Set_Pins+0x104>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d120      	bne.n	8001e86 <MCAL_UART_GPIO_Set_Pins+0x5e>
		//PA9 TX
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		GPIOA_CLOCK_ENABLE;
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a37      	ldr	r2, [pc, #220]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e54:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001e56:	2306      	movs	r3, #6
 8001e58:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	4832      	ldr	r0, [pc, #200]	; (8001f30 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001e66:	f7ff fd5c 	bl	8001922 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	482c      	ldr	r0, [pc, #176]	; (8001f30 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001e80:	f7ff fd4f 	bl	8001922 <MCAL_GPIO_Init>
			PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8001e84:	e04c      	b.n	8001f20 <MCAL_UART_GPIO_Set_Pins+0xf8>
	else if ( USARTx == USART2 )
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11e      	bne.n	8001ecc <MCAL_UART_GPIO_Set_Pins+0xa4>
		GPIOA_CLOCK_ENABLE;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6193      	str	r3, [r2, #24]
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4820      	ldr	r0, [pc, #128]	; (8001f30 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001eae:	f7ff fd38 	bl	8001922 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481a      	ldr	r0, [pc, #104]	; (8001f30 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001ec6:	f7ff fd2c 	bl	8001922 <MCAL_GPIO_Init>
}
 8001eca:	e029      	b.n	8001f20 <MCAL_UART_GPIO_Set_Pins+0xf8>
	else if ( USARTx == USART3 )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <MCAL_UART_GPIO_Set_Pins+0x110>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d125      	bne.n	8001f20 <MCAL_UART_GPIO_Set_Pins+0xf8>
		GPIOA_CLOCK_ENABLE;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6193      	str	r3, [r2, #24]
		GPIOB_CLOCK_ENABLE;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6193      	str	r3, [r2, #24]
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Out_AF_push_pull;
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_10MHz;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	480e      	ldr	r0, [pc, #56]	; (8001f3c <MCAL_UART_GPIO_Set_Pins+0x114>)
 8001f02:	f7ff fd0e 	bl	8001922 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_Mode_Inp_AF;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
		PinCfg.GPIO_Speed = GPIO_Speed_Reset_State;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4808      	ldr	r0, [pc, #32]	; (8001f3c <MCAL_UART_GPIO_Set_Pins+0x114>)
 8001f1c:	f7ff fd01 	bl	8001922 <MCAL_GPIO_Init>
}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40004400 	.word	0x40004400
 8001f38:	40004800 	.word	0x40004800
 8001f3c:	40010c00 	.word	0x40010c00

08001f40 <MCAL_UART_SendString>:


void MCAL_UART_SendString(USART_TypeDef *USARTx, uint8_t *str)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    while(*str)
 8001f4a:	e007      	b.n	8001f5c <MCAL_UART_SendString+0x1c>
    {
        MCAL_UART_SendData(USARTx, (uint16_t*)str, Enable);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff1f 	bl	8001d94 <MCAL_UART_SendData>
        str++;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]
    while(*str)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f3      	bne.n	8001f4c <MCAL_UART_SendString+0xc>
    }
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

	Global_config->P_IRQ_Callback () ;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <USART1_IRQHandler+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	4798      	blx	r3

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000288 	.word	0x20000288

08001f80 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <USART2_IRQHandler+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	4798      	blx	r3

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000288 	.word	0x20000288

08001f94 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <USART3_IRQHandler+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4798      	blx	r3


}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000288 	.word	0x20000288

08001fa8 <__errno>:
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <__errno+0x8>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <__libc_init_array>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	4e0c      	ldr	r6, [pc, #48]	; (8001fec <__libc_init_array+0x38>)
 8001fba:	4c0d      	ldr	r4, [pc, #52]	; (8001ff0 <__libc_init_array+0x3c>)
 8001fbc:	1ba4      	subs	r4, r4, r6
 8001fbe:	10a4      	asrs	r4, r4, #2
 8001fc0:	42a5      	cmp	r5, r4
 8001fc2:	d109      	bne.n	8001fd8 <__libc_init_array+0x24>
 8001fc4:	f001 fdb4 	bl	8003b30 <_init>
 8001fc8:	2500      	movs	r5, #0
 8001fca:	4e0a      	ldr	r6, [pc, #40]	; (8001ff4 <__libc_init_array+0x40>)
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	; (8001ff8 <__libc_init_array+0x44>)
 8001fce:	1ba4      	subs	r4, r4, r6
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	42a5      	cmp	r5, r4
 8001fd4:	d105      	bne.n	8001fe2 <__libc_init_array+0x2e>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fdc:	4798      	blx	r3
 8001fde:	3501      	adds	r5, #1
 8001fe0:	e7ee      	b.n	8001fc0 <__libc_init_array+0xc>
 8001fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fe6:	4798      	blx	r3
 8001fe8:	3501      	adds	r5, #1
 8001fea:	e7f2      	b.n	8001fd2 <__libc_init_array+0x1e>
 8001fec:	08003df0 	.word	0x08003df0
 8001ff0:	08003df0 	.word	0x08003df0
 8001ff4:	08003df0 	.word	0x08003df0
 8001ff8:	08003df4 	.word	0x08003df4

08001ffc <memcpy>:
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	1e43      	subs	r3, r0, #1
 8002000:	440a      	add	r2, r1
 8002002:	4291      	cmp	r1, r2
 8002004:	d100      	bne.n	8002008 <memcpy+0xc>
 8002006:	bd10      	pop	{r4, pc}
 8002008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800200c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002010:	e7f7      	b.n	8002002 <memcpy+0x6>

08002012 <memset>:
 8002012:	4603      	mov	r3, r0
 8002014:	4402      	add	r2, r0
 8002016:	4293      	cmp	r3, r2
 8002018:	d100      	bne.n	800201c <memset+0xa>
 800201a:	4770      	bx	lr
 800201c:	f803 1b01 	strb.w	r1, [r3], #1
 8002020:	e7f9      	b.n	8002016 <memset+0x4>

08002022 <__cvt>:
 8002022:	2b00      	cmp	r3, #0
 8002024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	461e      	mov	r6, r3
 800202a:	bfbb      	ittet	lt
 800202c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002030:	461e      	movlt	r6, r3
 8002032:	2300      	movge	r3, #0
 8002034:	232d      	movlt	r3, #45	; 0x2d
 8002036:	b088      	sub	sp, #32
 8002038:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800203a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800203e:	f027 0720 	bic.w	r7, r7, #32
 8002042:	2f46      	cmp	r7, #70	; 0x46
 8002044:	4614      	mov	r4, r2
 8002046:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002048:	700b      	strb	r3, [r1, #0]
 800204a:	d004      	beq.n	8002056 <__cvt+0x34>
 800204c:	2f45      	cmp	r7, #69	; 0x45
 800204e:	d100      	bne.n	8002052 <__cvt+0x30>
 8002050:	3501      	adds	r5, #1
 8002052:	2302      	movs	r3, #2
 8002054:	e000      	b.n	8002058 <__cvt+0x36>
 8002056:	2303      	movs	r3, #3
 8002058:	aa07      	add	r2, sp, #28
 800205a:	9204      	str	r2, [sp, #16]
 800205c:	aa06      	add	r2, sp, #24
 800205e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002062:	e9cd 3500 	strd	r3, r5, [sp]
 8002066:	4622      	mov	r2, r4
 8002068:	4633      	mov	r3, r6
 800206a:	f000 fc21 	bl	80028b0 <_dtoa_r>
 800206e:	2f47      	cmp	r7, #71	; 0x47
 8002070:	4680      	mov	r8, r0
 8002072:	d102      	bne.n	800207a <__cvt+0x58>
 8002074:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002076:	07db      	lsls	r3, r3, #31
 8002078:	d526      	bpl.n	80020c8 <__cvt+0xa6>
 800207a:	2f46      	cmp	r7, #70	; 0x46
 800207c:	eb08 0905 	add.w	r9, r8, r5
 8002080:	d111      	bne.n	80020a6 <__cvt+0x84>
 8002082:	f898 3000 	ldrb.w	r3, [r8]
 8002086:	2b30      	cmp	r3, #48	; 0x30
 8002088:	d10a      	bne.n	80020a0 <__cvt+0x7e>
 800208a:	2200      	movs	r2, #0
 800208c:	2300      	movs	r3, #0
 800208e:	4620      	mov	r0, r4
 8002090:	4631      	mov	r1, r6
 8002092:	f7fe fc99 	bl	80009c8 <__aeabi_dcmpeq>
 8002096:	b918      	cbnz	r0, 80020a0 <__cvt+0x7e>
 8002098:	f1c5 0501 	rsb	r5, r5, #1
 800209c:	f8ca 5000 	str.w	r5, [sl]
 80020a0:	f8da 3000 	ldr.w	r3, [sl]
 80020a4:	4499      	add	r9, r3
 80020a6:	2200      	movs	r2, #0
 80020a8:	2300      	movs	r3, #0
 80020aa:	4620      	mov	r0, r4
 80020ac:	4631      	mov	r1, r6
 80020ae:	f7fe fc8b 	bl	80009c8 <__aeabi_dcmpeq>
 80020b2:	b938      	cbnz	r0, 80020c4 <__cvt+0xa2>
 80020b4:	2230      	movs	r2, #48	; 0x30
 80020b6:	9b07      	ldr	r3, [sp, #28]
 80020b8:	454b      	cmp	r3, r9
 80020ba:	d205      	bcs.n	80020c8 <__cvt+0xa6>
 80020bc:	1c59      	adds	r1, r3, #1
 80020be:	9107      	str	r1, [sp, #28]
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e7f8      	b.n	80020b6 <__cvt+0x94>
 80020c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80020c8:	4640      	mov	r0, r8
 80020ca:	9b07      	ldr	r3, [sp, #28]
 80020cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80020ce:	eba3 0308 	sub.w	r3, r3, r8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	b008      	add	sp, #32
 80020d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020da <__exponent>:
 80020da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020dc:	2900      	cmp	r1, #0
 80020de:	bfb4      	ite	lt
 80020e0:	232d      	movlt	r3, #45	; 0x2d
 80020e2:	232b      	movge	r3, #43	; 0x2b
 80020e4:	4604      	mov	r4, r0
 80020e6:	bfb8      	it	lt
 80020e8:	4249      	neglt	r1, r1
 80020ea:	2909      	cmp	r1, #9
 80020ec:	f804 2b02 	strb.w	r2, [r4], #2
 80020f0:	7043      	strb	r3, [r0, #1]
 80020f2:	dd21      	ble.n	8002138 <__exponent+0x5e>
 80020f4:	f10d 0307 	add.w	r3, sp, #7
 80020f8:	461f      	mov	r7, r3
 80020fa:	260a      	movs	r6, #10
 80020fc:	fb91 f5f6 	sdiv	r5, r1, r6
 8002100:	fb06 1115 	mls	r1, r6, r5, r1
 8002104:	2d09      	cmp	r5, #9
 8002106:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800210a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800210e:	f103 32ff 	add.w	r2, r3, #4294967295
 8002112:	4629      	mov	r1, r5
 8002114:	dc09      	bgt.n	800212a <__exponent+0x50>
 8002116:	3130      	adds	r1, #48	; 0x30
 8002118:	3b02      	subs	r3, #2
 800211a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800211e:	42bb      	cmp	r3, r7
 8002120:	4622      	mov	r2, r4
 8002122:	d304      	bcc.n	800212e <__exponent+0x54>
 8002124:	1a10      	subs	r0, r2, r0
 8002126:	b003      	add	sp, #12
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212a:	4613      	mov	r3, r2
 800212c:	e7e6      	b.n	80020fc <__exponent+0x22>
 800212e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002132:	f804 2b01 	strb.w	r2, [r4], #1
 8002136:	e7f2      	b.n	800211e <__exponent+0x44>
 8002138:	2330      	movs	r3, #48	; 0x30
 800213a:	4419      	add	r1, r3
 800213c:	7083      	strb	r3, [r0, #2]
 800213e:	1d02      	adds	r2, r0, #4
 8002140:	70c1      	strb	r1, [r0, #3]
 8002142:	e7ef      	b.n	8002124 <__exponent+0x4a>

08002144 <_printf_float>:
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	b091      	sub	sp, #68	; 0x44
 800214a:	460c      	mov	r4, r1
 800214c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800214e:	4693      	mov	fp, r2
 8002150:	461e      	mov	r6, r3
 8002152:	4605      	mov	r5, r0
 8002154:	f001 f960 	bl	8003418 <_localeconv_r>
 8002158:	6803      	ldr	r3, [r0, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	9309      	str	r3, [sp, #36]	; 0x24
 800215e:	f7fe f807 	bl	8000170 <strlen>
 8002162:	2300      	movs	r3, #0
 8002164:	930e      	str	r3, [sp, #56]	; 0x38
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	900a      	str	r0, [sp, #40]	; 0x28
 800216a:	3307      	adds	r3, #7
 800216c:	f023 0307 	bic.w	r3, r3, #7
 8002170:	f103 0208 	add.w	r2, r3, #8
 8002174:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002178:	f8d4 a000 	ldr.w	sl, [r4]
 800217c:	603a      	str	r2, [r7, #0]
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002186:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800218a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800218e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <_printf_float+0x2ec>)
 8002196:	4638      	mov	r0, r7
 8002198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800219a:	f7fe fc47 	bl	8000a2c <__aeabi_dcmpun>
 800219e:	bb68      	cbnz	r0, 80021fc <_printf_float+0xb8>
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	4ba2      	ldr	r3, [pc, #648]	; (8002430 <_printf_float+0x2ec>)
 80021a6:	4638      	mov	r0, r7
 80021a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021aa:	f7fe fc21 	bl	80009f0 <__aeabi_dcmple>
 80021ae:	bb28      	cbnz	r0, 80021fc <_printf_float+0xb8>
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	4638      	mov	r0, r7
 80021b6:	4649      	mov	r1, r9
 80021b8:	f7fe fc10 	bl	80009dc <__aeabi_dcmplt>
 80021bc:	b110      	cbz	r0, 80021c4 <_printf_float+0x80>
 80021be:	232d      	movs	r3, #45	; 0x2d
 80021c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021c4:	4f9b      	ldr	r7, [pc, #620]	; (8002434 <_printf_float+0x2f0>)
 80021c6:	4b9c      	ldr	r3, [pc, #624]	; (8002438 <_printf_float+0x2f4>)
 80021c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80021cc:	bf98      	it	ls
 80021ce:	461f      	movls	r7, r3
 80021d0:	2303      	movs	r3, #3
 80021d2:	f04f 0900 	mov.w	r9, #0
 80021d6:	6123      	str	r3, [r4, #16]
 80021d8:	f02a 0304 	bic.w	r3, sl, #4
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	9600      	str	r6, [sp, #0]
 80021e0:	465b      	mov	r3, fp
 80021e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80021e4:	4621      	mov	r1, r4
 80021e6:	4628      	mov	r0, r5
 80021e8:	f000 f9e2 	bl	80025b0 <_printf_common>
 80021ec:	3001      	adds	r0, #1
 80021ee:	f040 8090 	bne.w	8002312 <_printf_float+0x1ce>
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	b011      	add	sp, #68	; 0x44
 80021f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fc:	463a      	mov	r2, r7
 80021fe:	464b      	mov	r3, r9
 8002200:	4638      	mov	r0, r7
 8002202:	4649      	mov	r1, r9
 8002204:	f7fe fc12 	bl	8000a2c <__aeabi_dcmpun>
 8002208:	b110      	cbz	r0, 8002210 <_printf_float+0xcc>
 800220a:	4f8c      	ldr	r7, [pc, #560]	; (800243c <_printf_float+0x2f8>)
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <_printf_float+0x2fc>)
 800220e:	e7db      	b.n	80021c8 <_printf_float+0x84>
 8002210:	6863      	ldr	r3, [r4, #4]
 8002212:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	a80d      	add	r0, sp, #52	; 0x34
 800221a:	a90e      	add	r1, sp, #56	; 0x38
 800221c:	d140      	bne.n	80022a0 <_printf_float+0x15c>
 800221e:	2306      	movs	r3, #6
 8002220:	6063      	str	r3, [r4, #4]
 8002222:	f04f 0c00 	mov.w	ip, #0
 8002226:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800222a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	6022      	str	r2, [r4, #0]
 8002232:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	463a      	mov	r2, r7
 800223a:	464b      	mov	r3, r9
 800223c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002240:	4628      	mov	r0, r5
 8002242:	f7ff feee 	bl	8002022 <__cvt>
 8002246:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800224a:	2b47      	cmp	r3, #71	; 0x47
 800224c:	4607      	mov	r7, r0
 800224e:	d109      	bne.n	8002264 <_printf_float+0x120>
 8002250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002252:	1cd8      	adds	r0, r3, #3
 8002254:	db02      	blt.n	800225c <_printf_float+0x118>
 8002256:	6862      	ldr	r2, [r4, #4]
 8002258:	4293      	cmp	r3, r2
 800225a:	dd47      	ble.n	80022ec <_printf_float+0x1a8>
 800225c:	f1a8 0802 	sub.w	r8, r8, #2
 8002260:	fa5f f888 	uxtb.w	r8, r8
 8002264:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002268:	990d      	ldr	r1, [sp, #52]	; 0x34
 800226a:	d824      	bhi.n	80022b6 <_printf_float+0x172>
 800226c:	3901      	subs	r1, #1
 800226e:	4642      	mov	r2, r8
 8002270:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002274:	910d      	str	r1, [sp, #52]	; 0x34
 8002276:	f7ff ff30 	bl	80020da <__exponent>
 800227a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800227c:	4681      	mov	r9, r0
 800227e:	1813      	adds	r3, r2, r0
 8002280:	2a01      	cmp	r2, #1
 8002282:	6123      	str	r3, [r4, #16]
 8002284:	dc02      	bgt.n	800228c <_printf_float+0x148>
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	07d1      	lsls	r1, r2, #31
 800228a:	d501      	bpl.n	8002290 <_printf_float+0x14c>
 800228c:	3301      	adds	r3, #1
 800228e:	6123      	str	r3, [r4, #16]
 8002290:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0a2      	beq.n	80021de <_printf_float+0x9a>
 8002298:	232d      	movs	r3, #45	; 0x2d
 800229a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800229e:	e79e      	b.n	80021de <_printf_float+0x9a>
 80022a0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80022a4:	f000 816e 	beq.w	8002584 <_printf_float+0x440>
 80022a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022ac:	d1b9      	bne.n	8002222 <_printf_float+0xde>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1b7      	bne.n	8002222 <_printf_float+0xde>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e7b4      	b.n	8002220 <_printf_float+0xdc>
 80022b6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80022ba:	d119      	bne.n	80022f0 <_printf_float+0x1ac>
 80022bc:	2900      	cmp	r1, #0
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	dd0c      	ble.n	80022dc <_printf_float+0x198>
 80022c2:	6121      	str	r1, [r4, #16]
 80022c4:	b913      	cbnz	r3, 80022cc <_printf_float+0x188>
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	07d2      	lsls	r2, r2, #31
 80022ca:	d502      	bpl.n	80022d2 <_printf_float+0x18e>
 80022cc:	3301      	adds	r3, #1
 80022ce:	440b      	add	r3, r1
 80022d0:	6123      	str	r3, [r4, #16]
 80022d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022d4:	f04f 0900 	mov.w	r9, #0
 80022d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80022da:	e7d9      	b.n	8002290 <_printf_float+0x14c>
 80022dc:	b913      	cbnz	r3, 80022e4 <_printf_float+0x1a0>
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	07d0      	lsls	r0, r2, #31
 80022e2:	d501      	bpl.n	80022e8 <_printf_float+0x1a4>
 80022e4:	3302      	adds	r3, #2
 80022e6:	e7f3      	b.n	80022d0 <_printf_float+0x18c>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e7f1      	b.n	80022d0 <_printf_float+0x18c>
 80022ec:	f04f 0867 	mov.w	r8, #103	; 0x67
 80022f0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80022f4:	4293      	cmp	r3, r2
 80022f6:	db05      	blt.n	8002304 <_printf_float+0x1c0>
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	6123      	str	r3, [r4, #16]
 80022fc:	07d1      	lsls	r1, r2, #31
 80022fe:	d5e8      	bpl.n	80022d2 <_printf_float+0x18e>
 8002300:	3301      	adds	r3, #1
 8002302:	e7e5      	b.n	80022d0 <_printf_float+0x18c>
 8002304:	2b00      	cmp	r3, #0
 8002306:	bfcc      	ite	gt
 8002308:	2301      	movgt	r3, #1
 800230a:	f1c3 0302 	rsble	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	e7de      	b.n	80022d0 <_printf_float+0x18c>
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	055a      	lsls	r2, r3, #21
 8002316:	d407      	bmi.n	8002328 <_printf_float+0x1e4>
 8002318:	6923      	ldr	r3, [r4, #16]
 800231a:	463a      	mov	r2, r7
 800231c:	4659      	mov	r1, fp
 800231e:	4628      	mov	r0, r5
 8002320:	47b0      	blx	r6
 8002322:	3001      	adds	r0, #1
 8002324:	d129      	bne.n	800237a <_printf_float+0x236>
 8002326:	e764      	b.n	80021f2 <_printf_float+0xae>
 8002328:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800232c:	f240 80d7 	bls.w	80024de <_printf_float+0x39a>
 8002330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002334:	2200      	movs	r2, #0
 8002336:	2300      	movs	r3, #0
 8002338:	f7fe fb46 	bl	80009c8 <__aeabi_dcmpeq>
 800233c:	b388      	cbz	r0, 80023a2 <_printf_float+0x25e>
 800233e:	2301      	movs	r3, #1
 8002340:	4a40      	ldr	r2, [pc, #256]	; (8002444 <_printf_float+0x300>)
 8002342:	4659      	mov	r1, fp
 8002344:	4628      	mov	r0, r5
 8002346:	47b0      	blx	r6
 8002348:	3001      	adds	r0, #1
 800234a:	f43f af52 	beq.w	80021f2 <_printf_float+0xae>
 800234e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002352:	429a      	cmp	r2, r3
 8002354:	db02      	blt.n	800235c <_printf_float+0x218>
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	07d8      	lsls	r0, r3, #31
 800235a:	d50e      	bpl.n	800237a <_printf_float+0x236>
 800235c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002360:	4659      	mov	r1, fp
 8002362:	4628      	mov	r0, r5
 8002364:	47b0      	blx	r6
 8002366:	3001      	adds	r0, #1
 8002368:	f43f af43 	beq.w	80021f2 <_printf_float+0xae>
 800236c:	2700      	movs	r7, #0
 800236e:	f104 081a 	add.w	r8, r4, #26
 8002372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002374:	3b01      	subs	r3, #1
 8002376:	42bb      	cmp	r3, r7
 8002378:	dc09      	bgt.n	800238e <_printf_float+0x24a>
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	079f      	lsls	r7, r3, #30
 800237e:	f100 80fd 	bmi.w	800257c <_printf_float+0x438>
 8002382:	68e0      	ldr	r0, [r4, #12]
 8002384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002386:	4298      	cmp	r0, r3
 8002388:	bfb8      	it	lt
 800238a:	4618      	movlt	r0, r3
 800238c:	e733      	b.n	80021f6 <_printf_float+0xb2>
 800238e:	2301      	movs	r3, #1
 8002390:	4642      	mov	r2, r8
 8002392:	4659      	mov	r1, fp
 8002394:	4628      	mov	r0, r5
 8002396:	47b0      	blx	r6
 8002398:	3001      	adds	r0, #1
 800239a:	f43f af2a 	beq.w	80021f2 <_printf_float+0xae>
 800239e:	3701      	adds	r7, #1
 80023a0:	e7e7      	b.n	8002372 <_printf_float+0x22e>
 80023a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dc2b      	bgt.n	8002400 <_printf_float+0x2bc>
 80023a8:	2301      	movs	r3, #1
 80023aa:	4a26      	ldr	r2, [pc, #152]	; (8002444 <_printf_float+0x300>)
 80023ac:	4659      	mov	r1, fp
 80023ae:	4628      	mov	r0, r5
 80023b0:	47b0      	blx	r6
 80023b2:	3001      	adds	r0, #1
 80023b4:	f43f af1d 	beq.w	80021f2 <_printf_float+0xae>
 80023b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023ba:	b923      	cbnz	r3, 80023c6 <_printf_float+0x282>
 80023bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023be:	b913      	cbnz	r3, 80023c6 <_printf_float+0x282>
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	07d9      	lsls	r1, r3, #31
 80023c4:	d5d9      	bpl.n	800237a <_printf_float+0x236>
 80023c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023ca:	4659      	mov	r1, fp
 80023cc:	4628      	mov	r0, r5
 80023ce:	47b0      	blx	r6
 80023d0:	3001      	adds	r0, #1
 80023d2:	f43f af0e 	beq.w	80021f2 <_printf_float+0xae>
 80023d6:	f04f 0800 	mov.w	r8, #0
 80023da:	f104 091a 	add.w	r9, r4, #26
 80023de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023e0:	425b      	negs	r3, r3
 80023e2:	4543      	cmp	r3, r8
 80023e4:	dc01      	bgt.n	80023ea <_printf_float+0x2a6>
 80023e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023e8:	e797      	b.n	800231a <_printf_float+0x1d6>
 80023ea:	2301      	movs	r3, #1
 80023ec:	464a      	mov	r2, r9
 80023ee:	4659      	mov	r1, fp
 80023f0:	4628      	mov	r0, r5
 80023f2:	47b0      	blx	r6
 80023f4:	3001      	adds	r0, #1
 80023f6:	f43f aefc 	beq.w	80021f2 <_printf_float+0xae>
 80023fa:	f108 0801 	add.w	r8, r8, #1
 80023fe:	e7ee      	b.n	80023de <_printf_float+0x29a>
 8002400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002404:	429a      	cmp	r2, r3
 8002406:	bfa8      	it	ge
 8002408:	461a      	movge	r2, r3
 800240a:	2a00      	cmp	r2, #0
 800240c:	4690      	mov	r8, r2
 800240e:	dd07      	ble.n	8002420 <_printf_float+0x2dc>
 8002410:	4613      	mov	r3, r2
 8002412:	4659      	mov	r1, fp
 8002414:	463a      	mov	r2, r7
 8002416:	4628      	mov	r0, r5
 8002418:	47b0      	blx	r6
 800241a:	3001      	adds	r0, #1
 800241c:	f43f aee9 	beq.w	80021f2 <_printf_float+0xae>
 8002420:	f104 031a 	add.w	r3, r4, #26
 8002424:	f04f 0a00 	mov.w	sl, #0
 8002428:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800242c:	930b      	str	r3, [sp, #44]	; 0x2c
 800242e:	e015      	b.n	800245c <_printf_float+0x318>
 8002430:	7fefffff 	.word	0x7fefffff
 8002434:	08003bcc 	.word	0x08003bcc
 8002438:	08003bc8 	.word	0x08003bc8
 800243c:	08003bd4 	.word	0x08003bd4
 8002440:	08003bd0 	.word	0x08003bd0
 8002444:	08003bd8 	.word	0x08003bd8
 8002448:	2301      	movs	r3, #1
 800244a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800244c:	4659      	mov	r1, fp
 800244e:	4628      	mov	r0, r5
 8002450:	47b0      	blx	r6
 8002452:	3001      	adds	r0, #1
 8002454:	f43f aecd 	beq.w	80021f2 <_printf_float+0xae>
 8002458:	f10a 0a01 	add.w	sl, sl, #1
 800245c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002460:	eba9 0308 	sub.w	r3, r9, r8
 8002464:	4553      	cmp	r3, sl
 8002466:	dcef      	bgt.n	8002448 <_printf_float+0x304>
 8002468:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800246c:	429a      	cmp	r2, r3
 800246e:	444f      	add	r7, r9
 8002470:	db14      	blt.n	800249c <_printf_float+0x358>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	07da      	lsls	r2, r3, #31
 8002476:	d411      	bmi.n	800249c <_printf_float+0x358>
 8002478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800247a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800247c:	eba3 0209 	sub.w	r2, r3, r9
 8002480:	eba3 0901 	sub.w	r9, r3, r1
 8002484:	4591      	cmp	r9, r2
 8002486:	bfa8      	it	ge
 8002488:	4691      	movge	r9, r2
 800248a:	f1b9 0f00 	cmp.w	r9, #0
 800248e:	dc0d      	bgt.n	80024ac <_printf_float+0x368>
 8002490:	2700      	movs	r7, #0
 8002492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002496:	f104 081a 	add.w	r8, r4, #26
 800249a:	e018      	b.n	80024ce <_printf_float+0x38a>
 800249c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024a0:	4659      	mov	r1, fp
 80024a2:	4628      	mov	r0, r5
 80024a4:	47b0      	blx	r6
 80024a6:	3001      	adds	r0, #1
 80024a8:	d1e6      	bne.n	8002478 <_printf_float+0x334>
 80024aa:	e6a2      	b.n	80021f2 <_printf_float+0xae>
 80024ac:	464b      	mov	r3, r9
 80024ae:	463a      	mov	r2, r7
 80024b0:	4659      	mov	r1, fp
 80024b2:	4628      	mov	r0, r5
 80024b4:	47b0      	blx	r6
 80024b6:	3001      	adds	r0, #1
 80024b8:	d1ea      	bne.n	8002490 <_printf_float+0x34c>
 80024ba:	e69a      	b.n	80021f2 <_printf_float+0xae>
 80024bc:	2301      	movs	r3, #1
 80024be:	4642      	mov	r2, r8
 80024c0:	4659      	mov	r1, fp
 80024c2:	4628      	mov	r0, r5
 80024c4:	47b0      	blx	r6
 80024c6:	3001      	adds	r0, #1
 80024c8:	f43f ae93 	beq.w	80021f2 <_printf_float+0xae>
 80024cc:	3701      	adds	r7, #1
 80024ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	eba3 0309 	sub.w	r3, r3, r9
 80024d8:	42bb      	cmp	r3, r7
 80024da:	dcef      	bgt.n	80024bc <_printf_float+0x378>
 80024dc:	e74d      	b.n	800237a <_printf_float+0x236>
 80024de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	dc01      	bgt.n	80024e8 <_printf_float+0x3a4>
 80024e4:	07db      	lsls	r3, r3, #31
 80024e6:	d538      	bpl.n	800255a <_printf_float+0x416>
 80024e8:	2301      	movs	r3, #1
 80024ea:	463a      	mov	r2, r7
 80024ec:	4659      	mov	r1, fp
 80024ee:	4628      	mov	r0, r5
 80024f0:	47b0      	blx	r6
 80024f2:	3001      	adds	r0, #1
 80024f4:	f43f ae7d 	beq.w	80021f2 <_printf_float+0xae>
 80024f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024fc:	4659      	mov	r1, fp
 80024fe:	4628      	mov	r0, r5
 8002500:	47b0      	blx	r6
 8002502:	3001      	adds	r0, #1
 8002504:	f107 0701 	add.w	r7, r7, #1
 8002508:	f43f ae73 	beq.w	80021f2 <_printf_float+0xae>
 800250c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002512:	2200      	movs	r2, #0
 8002514:	f103 38ff 	add.w	r8, r3, #4294967295
 8002518:	2300      	movs	r3, #0
 800251a:	f7fe fa55 	bl	80009c8 <__aeabi_dcmpeq>
 800251e:	b9c0      	cbnz	r0, 8002552 <_printf_float+0x40e>
 8002520:	4643      	mov	r3, r8
 8002522:	463a      	mov	r2, r7
 8002524:	4659      	mov	r1, fp
 8002526:	4628      	mov	r0, r5
 8002528:	47b0      	blx	r6
 800252a:	3001      	adds	r0, #1
 800252c:	d10d      	bne.n	800254a <_printf_float+0x406>
 800252e:	e660      	b.n	80021f2 <_printf_float+0xae>
 8002530:	2301      	movs	r3, #1
 8002532:	4642      	mov	r2, r8
 8002534:	4659      	mov	r1, fp
 8002536:	4628      	mov	r0, r5
 8002538:	47b0      	blx	r6
 800253a:	3001      	adds	r0, #1
 800253c:	f43f ae59 	beq.w	80021f2 <_printf_float+0xae>
 8002540:	3701      	adds	r7, #1
 8002542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002544:	3b01      	subs	r3, #1
 8002546:	42bb      	cmp	r3, r7
 8002548:	dcf2      	bgt.n	8002530 <_printf_float+0x3ec>
 800254a:	464b      	mov	r3, r9
 800254c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002550:	e6e4      	b.n	800231c <_printf_float+0x1d8>
 8002552:	2700      	movs	r7, #0
 8002554:	f104 081a 	add.w	r8, r4, #26
 8002558:	e7f3      	b.n	8002542 <_printf_float+0x3fe>
 800255a:	2301      	movs	r3, #1
 800255c:	e7e1      	b.n	8002522 <_printf_float+0x3de>
 800255e:	2301      	movs	r3, #1
 8002560:	4642      	mov	r2, r8
 8002562:	4659      	mov	r1, fp
 8002564:	4628      	mov	r0, r5
 8002566:	47b0      	blx	r6
 8002568:	3001      	adds	r0, #1
 800256a:	f43f ae42 	beq.w	80021f2 <_printf_float+0xae>
 800256e:	3701      	adds	r7, #1
 8002570:	68e3      	ldr	r3, [r4, #12]
 8002572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	42bb      	cmp	r3, r7
 8002578:	dcf1      	bgt.n	800255e <_printf_float+0x41a>
 800257a:	e702      	b.n	8002382 <_printf_float+0x23e>
 800257c:	2700      	movs	r7, #0
 800257e:	f104 0819 	add.w	r8, r4, #25
 8002582:	e7f5      	b.n	8002570 <_printf_float+0x42c>
 8002584:	2b00      	cmp	r3, #0
 8002586:	f43f ae94 	beq.w	80022b2 <_printf_float+0x16e>
 800258a:	f04f 0c00 	mov.w	ip, #0
 800258e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002592:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002596:	6022      	str	r2, [r4, #0]
 8002598:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800259c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	463a      	mov	r2, r7
 80025a4:	464b      	mov	r3, r9
 80025a6:	4628      	mov	r0, r5
 80025a8:	f7ff fd3b 	bl	8002022 <__cvt>
 80025ac:	4607      	mov	r7, r0
 80025ae:	e64f      	b.n	8002250 <_printf_float+0x10c>

080025b0 <_printf_common>:
 80025b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b4:	4691      	mov	r9, r2
 80025b6:	461f      	mov	r7, r3
 80025b8:	688a      	ldr	r2, [r1, #8]
 80025ba:	690b      	ldr	r3, [r1, #16]
 80025bc:	4606      	mov	r6, r0
 80025be:	4293      	cmp	r3, r2
 80025c0:	bfb8      	it	lt
 80025c2:	4613      	movlt	r3, r2
 80025c4:	f8c9 3000 	str.w	r3, [r9]
 80025c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025cc:	460c      	mov	r4, r1
 80025ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025d2:	b112      	cbz	r2, 80025da <_printf_common+0x2a>
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8c9 3000 	str.w	r3, [r9]
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	0699      	lsls	r1, r3, #26
 80025de:	bf42      	ittt	mi
 80025e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025e4:	3302      	addmi	r3, #2
 80025e6:	f8c9 3000 	strmi.w	r3, [r9]
 80025ea:	6825      	ldr	r5, [r4, #0]
 80025ec:	f015 0506 	ands.w	r5, r5, #6
 80025f0:	d107      	bne.n	8002602 <_printf_common+0x52>
 80025f2:	f104 0a19 	add.w	sl, r4, #25
 80025f6:	68e3      	ldr	r3, [r4, #12]
 80025f8:	f8d9 2000 	ldr.w	r2, [r9]
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	42ab      	cmp	r3, r5
 8002600:	dc29      	bgt.n	8002656 <_printf_common+0xa6>
 8002602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	3300      	adds	r3, #0
 800260a:	bf18      	it	ne
 800260c:	2301      	movne	r3, #1
 800260e:	0692      	lsls	r2, r2, #26
 8002610:	d42e      	bmi.n	8002670 <_printf_common+0xc0>
 8002612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002616:	4639      	mov	r1, r7
 8002618:	4630      	mov	r0, r6
 800261a:	47c0      	blx	r8
 800261c:	3001      	adds	r0, #1
 800261e:	d021      	beq.n	8002664 <_printf_common+0xb4>
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	68e5      	ldr	r5, [r4, #12]
 8002624:	f003 0306 	and.w	r3, r3, #6
 8002628:	2b04      	cmp	r3, #4
 800262a:	bf18      	it	ne
 800262c:	2500      	movne	r5, #0
 800262e:	f8d9 2000 	ldr.w	r2, [r9]
 8002632:	f04f 0900 	mov.w	r9, #0
 8002636:	bf08      	it	eq
 8002638:	1aad      	subeq	r5, r5, r2
 800263a:	68a3      	ldr	r3, [r4, #8]
 800263c:	6922      	ldr	r2, [r4, #16]
 800263e:	bf08      	it	eq
 8002640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002644:	4293      	cmp	r3, r2
 8002646:	bfc4      	itt	gt
 8002648:	1a9b      	subgt	r3, r3, r2
 800264a:	18ed      	addgt	r5, r5, r3
 800264c:	341a      	adds	r4, #26
 800264e:	454d      	cmp	r5, r9
 8002650:	d11a      	bne.n	8002688 <_printf_common+0xd8>
 8002652:	2000      	movs	r0, #0
 8002654:	e008      	b.n	8002668 <_printf_common+0xb8>
 8002656:	2301      	movs	r3, #1
 8002658:	4652      	mov	r2, sl
 800265a:	4639      	mov	r1, r7
 800265c:	4630      	mov	r0, r6
 800265e:	47c0      	blx	r8
 8002660:	3001      	adds	r0, #1
 8002662:	d103      	bne.n	800266c <_printf_common+0xbc>
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800266c:	3501      	adds	r5, #1
 800266e:	e7c2      	b.n	80025f6 <_printf_common+0x46>
 8002670:	2030      	movs	r0, #48	; 0x30
 8002672:	18e1      	adds	r1, r4, r3
 8002674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800267e:	4422      	add	r2, r4
 8002680:	3302      	adds	r3, #2
 8002682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002686:	e7c4      	b.n	8002612 <_printf_common+0x62>
 8002688:	2301      	movs	r3, #1
 800268a:	4622      	mov	r2, r4
 800268c:	4639      	mov	r1, r7
 800268e:	4630      	mov	r0, r6
 8002690:	47c0      	blx	r8
 8002692:	3001      	adds	r0, #1
 8002694:	d0e6      	beq.n	8002664 <_printf_common+0xb4>
 8002696:	f109 0901 	add.w	r9, r9, #1
 800269a:	e7d8      	b.n	800264e <_printf_common+0x9e>

0800269c <strncmp>:
 800269c:	b510      	push	{r4, lr}
 800269e:	b16a      	cbz	r2, 80026bc <strncmp+0x20>
 80026a0:	3901      	subs	r1, #1
 80026a2:	1884      	adds	r4, r0, r2
 80026a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80026a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <strncmp+0x1c>
 80026b0:	42a0      	cmp	r0, r4
 80026b2:	d001      	beq.n	80026b8 <strncmp+0x1c>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f5      	bne.n	80026a4 <strncmp+0x8>
 80026b8:	1a98      	subs	r0, r3, r2
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	4610      	mov	r0, r2
 80026be:	e7fc      	b.n	80026ba <strncmp+0x1e>

080026c0 <strncpy>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	3901      	subs	r1, #1
 80026c6:	b902      	cbnz	r2, 80026ca <strncpy+0xa>
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
 80026ca:	4623      	mov	r3, r4
 80026cc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80026d0:	1e56      	subs	r6, r2, #1
 80026d2:	f803 5b01 	strb.w	r5, [r3], #1
 80026d6:	b92d      	cbnz	r5, 80026e4 <strncpy+0x24>
 80026d8:	4414      	add	r4, r2
 80026da:	42a3      	cmp	r3, r4
 80026dc:	d0f4      	beq.n	80026c8 <strncpy+0x8>
 80026de:	f803 5b01 	strb.w	r5, [r3], #1
 80026e2:	e7fa      	b.n	80026da <strncpy+0x1a>
 80026e4:	461c      	mov	r4, r3
 80026e6:	4632      	mov	r2, r6
 80026e8:	e7ed      	b.n	80026c6 <strncpy+0x6>
	...

080026ec <strtok>:
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <strtok+0x50>)
 80026ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f2:	681d      	ldr	r5, [r3, #0]
 80026f4:	4606      	mov	r6, r0
 80026f6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80026f8:	460f      	mov	r7, r1
 80026fa:	b9b4      	cbnz	r4, 800272a <strtok+0x3e>
 80026fc:	2050      	movs	r0, #80	; 0x50
 80026fe:	f000 fe99 	bl	8003434 <malloc>
 8002702:	65a8      	str	r0, [r5, #88]	; 0x58
 8002704:	e9c0 4400 	strd	r4, r4, [r0]
 8002708:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800270c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002710:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002714:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002718:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800271c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002720:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002724:	6184      	str	r4, [r0, #24]
 8002726:	7704      	strb	r4, [r0, #28]
 8002728:	6244      	str	r4, [r0, #36]	; 0x24
 800272a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800272c:	4639      	mov	r1, r7
 800272e:	4630      	mov	r0, r6
 8002730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002734:	2301      	movs	r3, #1
 8002736:	f000 b803 	b.w	8002740 <__strtok_r>
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <__strtok_r>:
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	b918      	cbnz	r0, 800274c <__strtok_r+0xc>
 8002744:	6810      	ldr	r0, [r2, #0]
 8002746:	b908      	cbnz	r0, 800274c <__strtok_r+0xc>
 8002748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274a:	4620      	mov	r0, r4
 800274c:	4604      	mov	r4, r0
 800274e:	460f      	mov	r7, r1
 8002750:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002754:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002758:	b91e      	cbnz	r6, 8002762 <__strtok_r+0x22>
 800275a:	b96d      	cbnz	r5, 8002778 <__strtok_r+0x38>
 800275c:	6015      	str	r5, [r2, #0]
 800275e:	4628      	mov	r0, r5
 8002760:	e7f2      	b.n	8002748 <__strtok_r+0x8>
 8002762:	42b5      	cmp	r5, r6
 8002764:	d1f6      	bne.n	8002754 <__strtok_r+0x14>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ef      	bne.n	800274a <__strtok_r+0xa>
 800276a:	6014      	str	r4, [r2, #0]
 800276c:	7003      	strb	r3, [r0, #0]
 800276e:	e7eb      	b.n	8002748 <__strtok_r+0x8>
 8002770:	462b      	mov	r3, r5
 8002772:	e00d      	b.n	8002790 <__strtok_r+0x50>
 8002774:	b926      	cbnz	r6, 8002780 <__strtok_r+0x40>
 8002776:	461c      	mov	r4, r3
 8002778:	4623      	mov	r3, r4
 800277a:	460f      	mov	r7, r1
 800277c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002780:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002784:	42b5      	cmp	r5, r6
 8002786:	d1f5      	bne.n	8002774 <__strtok_r+0x34>
 8002788:	2d00      	cmp	r5, #0
 800278a:	d0f1      	beq.n	8002770 <__strtok_r+0x30>
 800278c:	2100      	movs	r1, #0
 800278e:	7021      	strb	r1, [r4, #0]
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e7d9      	b.n	8002748 <__strtok_r+0x8>

08002794 <quorem>:
 8002794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002798:	6903      	ldr	r3, [r0, #16]
 800279a:	690c      	ldr	r4, [r1, #16]
 800279c:	4680      	mov	r8, r0
 800279e:	42a3      	cmp	r3, r4
 80027a0:	f2c0 8084 	blt.w	80028ac <quorem+0x118>
 80027a4:	3c01      	subs	r4, #1
 80027a6:	f101 0714 	add.w	r7, r1, #20
 80027aa:	f100 0614 	add.w	r6, r0, #20
 80027ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80027b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80027b6:	3501      	adds	r5, #1
 80027b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80027bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80027c0:	eb06 030c 	add.w	r3, r6, ip
 80027c4:	eb07 090c 	add.w	r9, r7, ip
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	b39d      	cbz	r5, 8002834 <quorem+0xa0>
 80027cc:	f04f 0a00 	mov.w	sl, #0
 80027d0:	4638      	mov	r0, r7
 80027d2:	46b6      	mov	lr, r6
 80027d4:	46d3      	mov	fp, sl
 80027d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80027da:	b293      	uxth	r3, r2
 80027dc:	fb05 a303 	mla	r3, r5, r3, sl
 80027e0:	0c12      	lsrs	r2, r2, #16
 80027e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80027e6:	fb05 a202 	mla	r2, r5, r2, sl
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	ebab 0303 	sub.w	r3, fp, r3
 80027f0:	f8de b000 	ldr.w	fp, [lr]
 80027f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80027f8:	fa1f fb8b 	uxth.w	fp, fp
 80027fc:	445b      	add	r3, fp
 80027fe:	fa1f fb82 	uxth.w	fp, r2
 8002802:	f8de 2000 	ldr.w	r2, [lr]
 8002806:	4581      	cmp	r9, r0
 8002808:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800280c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002810:	b29b      	uxth	r3, r3
 8002812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002816:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800281a:	f84e 3b04 	str.w	r3, [lr], #4
 800281e:	d2da      	bcs.n	80027d6 <quorem+0x42>
 8002820:	f856 300c 	ldr.w	r3, [r6, ip]
 8002824:	b933      	cbnz	r3, 8002834 <quorem+0xa0>
 8002826:	9b01      	ldr	r3, [sp, #4]
 8002828:	3b04      	subs	r3, #4
 800282a:	429e      	cmp	r6, r3
 800282c:	461a      	mov	r2, r3
 800282e:	d331      	bcc.n	8002894 <quorem+0x100>
 8002830:	f8c8 4010 	str.w	r4, [r8, #16]
 8002834:	4640      	mov	r0, r8
 8002836:	f001 f819 	bl	800386c <__mcmp>
 800283a:	2800      	cmp	r0, #0
 800283c:	db26      	blt.n	800288c <quorem+0xf8>
 800283e:	4630      	mov	r0, r6
 8002840:	f04f 0c00 	mov.w	ip, #0
 8002844:	3501      	adds	r5, #1
 8002846:	f857 1b04 	ldr.w	r1, [r7], #4
 800284a:	f8d0 e000 	ldr.w	lr, [r0]
 800284e:	b28b      	uxth	r3, r1
 8002850:	ebac 0303 	sub.w	r3, ip, r3
 8002854:	fa1f f28e 	uxth.w	r2, lr
 8002858:	4413      	add	r3, r2
 800285a:	0c0a      	lsrs	r2, r1, #16
 800285c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002864:	b29b      	uxth	r3, r3
 8002866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800286a:	45b9      	cmp	r9, r7
 800286c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002870:	f840 3b04 	str.w	r3, [r0], #4
 8002874:	d2e7      	bcs.n	8002846 <quorem+0xb2>
 8002876:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800287a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800287e:	b92a      	cbnz	r2, 800288c <quorem+0xf8>
 8002880:	3b04      	subs	r3, #4
 8002882:	429e      	cmp	r6, r3
 8002884:	461a      	mov	r2, r3
 8002886:	d30b      	bcc.n	80028a0 <quorem+0x10c>
 8002888:	f8c8 4010 	str.w	r4, [r8, #16]
 800288c:	4628      	mov	r0, r5
 800288e:	b003      	add	sp, #12
 8002890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	3b04      	subs	r3, #4
 8002898:	2a00      	cmp	r2, #0
 800289a:	d1c9      	bne.n	8002830 <quorem+0x9c>
 800289c:	3c01      	subs	r4, #1
 800289e:	e7c4      	b.n	800282a <quorem+0x96>
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	3b04      	subs	r3, #4
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d1ef      	bne.n	8002888 <quorem+0xf4>
 80028a8:	3c01      	subs	r4, #1
 80028aa:	e7ea      	b.n	8002882 <quorem+0xee>
 80028ac:	2000      	movs	r0, #0
 80028ae:	e7ee      	b.n	800288e <quorem+0xfa>

080028b0 <_dtoa_r>:
 80028b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b4:	4616      	mov	r6, r2
 80028b6:	461f      	mov	r7, r3
 80028b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80028ba:	b095      	sub	sp, #84	; 0x54
 80028bc:	4604      	mov	r4, r0
 80028be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80028c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80028c6:	b93d      	cbnz	r5, 80028d8 <_dtoa_r+0x28>
 80028c8:	2010      	movs	r0, #16
 80028ca:	f000 fdb3 	bl	8003434 <malloc>
 80028ce:	6260      	str	r0, [r4, #36]	; 0x24
 80028d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80028d4:	6005      	str	r5, [r0, #0]
 80028d6:	60c5      	str	r5, [r0, #12]
 80028d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	b151      	cbz	r1, 80028f4 <_dtoa_r+0x44>
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2301      	movs	r3, #1
 80028e2:	4093      	lsls	r3, r2
 80028e4:	604a      	str	r2, [r1, #4]
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	4620      	mov	r0, r4
 80028ea:	f000 fddf 	bl	80034ac <_Bfree>
 80028ee:	2200      	movs	r2, #0
 80028f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	1e3b      	subs	r3, r7, #0
 80028f6:	bfaf      	iteee	ge
 80028f8:	2300      	movge	r3, #0
 80028fa:	2201      	movlt	r2, #1
 80028fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002900:	9303      	strlt	r3, [sp, #12]
 8002902:	bfac      	ite	ge
 8002904:	f8c8 3000 	strge.w	r3, [r8]
 8002908:	f8c8 2000 	strlt.w	r2, [r8]
 800290c:	4bae      	ldr	r3, [pc, #696]	; (8002bc8 <_dtoa_r+0x318>)
 800290e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002912:	ea33 0308 	bics.w	r3, r3, r8
 8002916:	d11b      	bne.n	8002950 <_dtoa_r+0xa0>
 8002918:	f242 730f 	movw	r3, #9999	; 0x270f
 800291c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	9b02      	ldr	r3, [sp, #8]
 8002922:	b923      	cbnz	r3, 800292e <_dtoa_r+0x7e>
 8002924:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002928:	2800      	cmp	r0, #0
 800292a:	f000 8545 	beq.w	80033b8 <_dtoa_r+0xb08>
 800292e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002930:	b953      	cbnz	r3, 8002948 <_dtoa_r+0x98>
 8002932:	4ba6      	ldr	r3, [pc, #664]	; (8002bcc <_dtoa_r+0x31c>)
 8002934:	e021      	b.n	800297a <_dtoa_r+0xca>
 8002936:	4ba6      	ldr	r3, [pc, #664]	; (8002bd0 <_dtoa_r+0x320>)
 8002938:	9306      	str	r3, [sp, #24]
 800293a:	3308      	adds	r3, #8
 800293c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	9806      	ldr	r0, [sp, #24]
 8002942:	b015      	add	sp, #84	; 0x54
 8002944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002948:	4ba0      	ldr	r3, [pc, #640]	; (8002bcc <_dtoa_r+0x31c>)
 800294a:	9306      	str	r3, [sp, #24]
 800294c:	3303      	adds	r3, #3
 800294e:	e7f5      	b.n	800293c <_dtoa_r+0x8c>
 8002950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002954:	2200      	movs	r2, #0
 8002956:	2300      	movs	r3, #0
 8002958:	4630      	mov	r0, r6
 800295a:	4639      	mov	r1, r7
 800295c:	f7fe f834 	bl	80009c8 <__aeabi_dcmpeq>
 8002960:	4682      	mov	sl, r0
 8002962:	b160      	cbz	r0, 800297e <_dtoa_r+0xce>
 8002964:	2301      	movs	r3, #1
 8002966:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8520 	beq.w	80033b2 <_dtoa_r+0xb02>
 8002972:	4b98      	ldr	r3, [pc, #608]	; (8002bd4 <_dtoa_r+0x324>)
 8002974:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	9306      	str	r3, [sp, #24]
 800297c:	e7e0      	b.n	8002940 <_dtoa_r+0x90>
 800297e:	ab12      	add	r3, sp, #72	; 0x48
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	ab13      	add	r3, sp, #76	; 0x4c
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4632      	mov	r2, r6
 8002988:	463b      	mov	r3, r7
 800298a:	4620      	mov	r0, r4
 800298c:	f000 ffe6 	bl	800395c <__d2b>
 8002990:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002994:	4683      	mov	fp, r0
 8002996:	2d00      	cmp	r5, #0
 8002998:	d07d      	beq.n	8002a96 <_dtoa_r+0x1e6>
 800299a:	46b0      	mov	r8, r6
 800299c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80029a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80029a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80029a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80029ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80029b0:	2200      	movs	r2, #0
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <_dtoa_r+0x328>)
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fd fbe6 	bl	8000188 <__aeabi_dsub>
 80029bc:	a37c      	add	r3, pc, #496	; (adr r3, 8002bb0 <_dtoa_r+0x300>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd fd99 	bl	80004f8 <__aeabi_dmul>
 80029c6:	a37c      	add	r3, pc, #496	; (adr r3, 8002bb8 <_dtoa_r+0x308>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fbde 	bl	800018c <__adddf3>
 80029d0:	4606      	mov	r6, r0
 80029d2:	4628      	mov	r0, r5
 80029d4:	460f      	mov	r7, r1
 80029d6:	f7fd fd25 	bl	8000424 <__aeabi_i2d>
 80029da:	a379      	add	r3, pc, #484	; (adr r3, 8002bc0 <_dtoa_r+0x310>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fd8a 	bl	80004f8 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4630      	mov	r0, r6
 80029ea:	4639      	mov	r1, r7
 80029ec:	f7fd fbce 	bl	800018c <__adddf3>
 80029f0:	4606      	mov	r6, r0
 80029f2:	460f      	mov	r7, r1
 80029f4:	f7fe f830 	bl	8000a58 <__aeabi_d2iz>
 80029f8:	2200      	movs	r2, #0
 80029fa:	4682      	mov	sl, r0
 80029fc:	2300      	movs	r3, #0
 80029fe:	4630      	mov	r0, r6
 8002a00:	4639      	mov	r1, r7
 8002a02:	f7fd ffeb 	bl	80009dc <__aeabi_dcmplt>
 8002a06:	b148      	cbz	r0, 8002a1c <_dtoa_r+0x16c>
 8002a08:	4650      	mov	r0, sl
 8002a0a:	f7fd fd0b 	bl	8000424 <__aeabi_i2d>
 8002a0e:	4632      	mov	r2, r6
 8002a10:	463b      	mov	r3, r7
 8002a12:	f7fd ffd9 	bl	80009c8 <__aeabi_dcmpeq>
 8002a16:	b908      	cbnz	r0, 8002a1c <_dtoa_r+0x16c>
 8002a18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002a1c:	f1ba 0f16 	cmp.w	sl, #22
 8002a20:	d85a      	bhi.n	8002ad8 <_dtoa_r+0x228>
 8002a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a26:	496d      	ldr	r1, [pc, #436]	; (8002bdc <_dtoa_r+0x32c>)
 8002a28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a30:	f7fd fff2 	bl	8000a18 <__aeabi_dcmpgt>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d051      	beq.n	8002adc <_dtoa_r+0x22c>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8002a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002a42:	1b5d      	subs	r5, r3, r5
 8002a44:	1e6b      	subs	r3, r5, #1
 8002a46:	9307      	str	r3, [sp, #28]
 8002a48:	bf43      	ittte	mi
 8002a4a:	2300      	movmi	r3, #0
 8002a4c:	f1c5 0901 	rsbmi	r9, r5, #1
 8002a50:	9307      	strmi	r3, [sp, #28]
 8002a52:	f04f 0900 	movpl.w	r9, #0
 8002a56:	f1ba 0f00 	cmp.w	sl, #0
 8002a5a:	db41      	blt.n	8002ae0 <_dtoa_r+0x230>
 8002a5c:	9b07      	ldr	r3, [sp, #28]
 8002a5e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002a62:	4453      	add	r3, sl
 8002a64:	9307      	str	r3, [sp, #28]
 8002a66:	2300      	movs	r3, #0
 8002a68:	9308      	str	r3, [sp, #32]
 8002a6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	f200 808f 	bhi.w	8002b90 <_dtoa_r+0x2e0>
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	bfc4      	itt	gt
 8002a76:	3b04      	subgt	r3, #4
 8002a78:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002a7c:	bfc8      	it	gt
 8002a7e:	2500      	movgt	r5, #0
 8002a80:	f1a3 0302 	sub.w	r3, r3, #2
 8002a84:	bfd8      	it	le
 8002a86:	2501      	movle	r5, #1
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f200 808d 	bhi.w	8002ba8 <_dtoa_r+0x2f8>
 8002a8e:	e8df f003 	tbb	[pc, r3]
 8002a92:	7d7b      	.short	0x7d7b
 8002a94:	6f2f      	.short	0x6f2f
 8002a96:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002a9a:	441d      	add	r5, r3
 8002a9c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002aa0:	2820      	cmp	r0, #32
 8002aa2:	dd13      	ble.n	8002acc <_dtoa_r+0x21c>
 8002aa4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002aa8:	9b02      	ldr	r3, [sp, #8]
 8002aaa:	fa08 f800 	lsl.w	r8, r8, r0
 8002aae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002ab2:	fa23 f000 	lsr.w	r0, r3, r0
 8002ab6:	ea48 0000 	orr.w	r0, r8, r0
 8002aba:	f7fd fca3 	bl	8000404 <__aeabi_ui2d>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4680      	mov	r8, r0
 8002ac2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002ac6:	3d01      	subs	r5, #1
 8002ac8:	9310      	str	r3, [sp, #64]	; 0x40
 8002aca:	e771      	b.n	80029b0 <_dtoa_r+0x100>
 8002acc:	9b02      	ldr	r3, [sp, #8]
 8002ace:	f1c0 0020 	rsb	r0, r0, #32
 8002ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ad6:	e7f0      	b.n	8002aba <_dtoa_r+0x20a>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e7b0      	b.n	8002a3e <_dtoa_r+0x18e>
 8002adc:	900d      	str	r0, [sp, #52]	; 0x34
 8002ade:	e7af      	b.n	8002a40 <_dtoa_r+0x190>
 8002ae0:	f1ca 0300 	rsb	r3, sl, #0
 8002ae4:	9308      	str	r3, [sp, #32]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	eba9 090a 	sub.w	r9, r9, sl
 8002aec:	930c      	str	r3, [sp, #48]	; 0x30
 8002aee:	e7bc      	b.n	8002a6a <_dtoa_r+0x1ba>
 8002af0:	2301      	movs	r3, #1
 8002af2:	9309      	str	r3, [sp, #36]	; 0x24
 8002af4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	dd74      	ble.n	8002be4 <_dtoa_r+0x334>
 8002afa:	4698      	mov	r8, r3
 8002afc:	9304      	str	r3, [sp, #16]
 8002afe:	2200      	movs	r2, #0
 8002b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002b02:	6072      	str	r2, [r6, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	f102 0014 	add.w	r0, r2, #20
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	6871      	ldr	r1, [r6, #4]
 8002b0e:	d96e      	bls.n	8002bee <_dtoa_r+0x33e>
 8002b10:	4620      	mov	r0, r4
 8002b12:	f000 fc97 	bl	8003444 <_Balloc>
 8002b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b18:	6030      	str	r0, [r6, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b8 0f0e 	cmp.w	r8, #14
 8002b20:	9306      	str	r3, [sp, #24]
 8002b22:	f200 80ed 	bhi.w	8002d00 <_dtoa_r+0x450>
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	f000 80ea 	beq.w	8002d00 <_dtoa_r+0x450>
 8002b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b30:	f1ba 0f00 	cmp.w	sl, #0
 8002b34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002b38:	dd77      	ble.n	8002c2a <_dtoa_r+0x37a>
 8002b3a:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <_dtoa_r+0x32c>)
 8002b3c:	f00a 030f 	and.w	r3, sl, #15
 8002b40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002b44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002b48:	06f0      	lsls	r0, r6, #27
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002b52:	d568      	bpl.n	8002c26 <_dtoa_r+0x376>
 8002b54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <_dtoa_r+0x330>)
 8002b5a:	2503      	movs	r5, #3
 8002b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002b60:	f7fd fdf4 	bl	800074c <__aeabi_ddiv>
 8002b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b68:	f006 060f 	and.w	r6, r6, #15
 8002b6c:	4f1c      	ldr	r7, [pc, #112]	; (8002be0 <_dtoa_r+0x330>)
 8002b6e:	e04f      	b.n	8002c10 <_dtoa_r+0x360>
 8002b70:	2301      	movs	r3, #1
 8002b72:	9309      	str	r3, [sp, #36]	; 0x24
 8002b74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002b76:	4453      	add	r3, sl
 8002b78:	f103 0801 	add.w	r8, r3, #1
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	4643      	mov	r3, r8
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	bfb8      	it	lt
 8002b84:	2301      	movlt	r3, #1
 8002b86:	e7ba      	b.n	8002afe <_dtoa_r+0x24e>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e7b2      	b.n	8002af2 <_dtoa_r+0x242>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e7f0      	b.n	8002b72 <_dtoa_r+0x2c2>
 8002b90:	2501      	movs	r5, #1
 8002b92:	2300      	movs	r3, #0
 8002b94:	9509      	str	r5, [sp, #36]	; 0x24
 8002b96:	931e      	str	r3, [sp, #120]	; 0x78
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	9304      	str	r3, [sp, #16]
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	2312      	movs	r3, #18
 8002ba4:	921f      	str	r2, [sp, #124]	; 0x7c
 8002ba6:	e7aa      	b.n	8002afe <_dtoa_r+0x24e>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	9309      	str	r3, [sp, #36]	; 0x24
 8002bac:	e7f4      	b.n	8002b98 <_dtoa_r+0x2e8>
 8002bae:	bf00      	nop
 8002bb0:	636f4361 	.word	0x636f4361
 8002bb4:	3fd287a7 	.word	0x3fd287a7
 8002bb8:	8b60c8b3 	.word	0x8b60c8b3
 8002bbc:	3fc68a28 	.word	0x3fc68a28
 8002bc0:	509f79fb 	.word	0x509f79fb
 8002bc4:	3fd34413 	.word	0x3fd34413
 8002bc8:	7ff00000 	.word	0x7ff00000
 8002bcc:	08003be3 	.word	0x08003be3
 8002bd0:	08003bda 	.word	0x08003bda
 8002bd4:	08003bd9 	.word	0x08003bd9
 8002bd8:	3ff80000 	.word	0x3ff80000
 8002bdc:	08003c10 	.word	0x08003c10
 8002be0:	08003be8 	.word	0x08003be8
 8002be4:	2301      	movs	r3, #1
 8002be6:	9304      	str	r3, [sp, #16]
 8002be8:	4698      	mov	r8, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	e7da      	b.n	8002ba4 <_dtoa_r+0x2f4>
 8002bee:	3101      	adds	r1, #1
 8002bf0:	6071      	str	r1, [r6, #4]
 8002bf2:	0052      	lsls	r2, r2, #1
 8002bf4:	e787      	b.n	8002b06 <_dtoa_r+0x256>
 8002bf6:	07f1      	lsls	r1, r6, #31
 8002bf8:	d508      	bpl.n	8002c0c <_dtoa_r+0x35c>
 8002bfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c02:	f7fd fc79 	bl	80004f8 <__aeabi_dmul>
 8002c06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	1076      	asrs	r6, r6, #1
 8002c0e:	3708      	adds	r7, #8
 8002c10:	2e00      	cmp	r6, #0
 8002c12:	d1f0      	bne.n	8002bf6 <_dtoa_r+0x346>
 8002c14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c1c:	f7fd fd96 	bl	800074c <__aeabi_ddiv>
 8002c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c24:	e01b      	b.n	8002c5e <_dtoa_r+0x3ae>
 8002c26:	2502      	movs	r5, #2
 8002c28:	e7a0      	b.n	8002b6c <_dtoa_r+0x2bc>
 8002c2a:	f000 80a4 	beq.w	8002d76 <_dtoa_r+0x4c6>
 8002c2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c32:	f1ca 0600 	rsb	r6, sl, #0
 8002c36:	4ba0      	ldr	r3, [pc, #640]	; (8002eb8 <_dtoa_r+0x608>)
 8002c38:	f006 020f 	and.w	r2, r6, #15
 8002c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fc58 	bl	80004f8 <__aeabi_dmul>
 8002c48:	2502      	movs	r5, #2
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c50:	4f9a      	ldr	r7, [pc, #616]	; (8002ebc <_dtoa_r+0x60c>)
 8002c52:	1136      	asrs	r6, r6, #4
 8002c54:	2e00      	cmp	r6, #0
 8002c56:	f040 8083 	bne.w	8002d60 <_dtoa_r+0x4b0>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e0      	bne.n	8002c20 <_dtoa_r+0x370>
 8002c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 808a 	beq.w	8002d7a <_dtoa_r+0x4ca>
 8002c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002c72:	2200      	movs	r2, #0
 8002c74:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <_dtoa_r+0x610>)
 8002c76:	f7fd feb1 	bl	80009dc <__aeabi_dcmplt>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d07d      	beq.n	8002d7a <_dtoa_r+0x4ca>
 8002c7e:	f1b8 0f00 	cmp.w	r8, #0
 8002c82:	d07a      	beq.n	8002d7a <_dtoa_r+0x4ca>
 8002c84:	9b04      	ldr	r3, [sp, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	dd36      	ble.n	8002cf8 <_dtoa_r+0x448>
 8002c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <_dtoa_r+0x614>)
 8002c92:	f7fd fc31 	bl	80004f8 <__aeabi_dmul>
 8002c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c9a:	9e04      	ldr	r6, [sp, #16]
 8002c9c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7fd fbbe 	bl	8000424 <__aeabi_i2d>
 8002ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cac:	f7fd fc24 	bl	80004f8 <__aeabi_dmul>
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <_dtoa_r+0x618>)
 8002cb4:	f7fd fa6a 	bl	800018c <__adddf3>
 8002cb8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002cc0:	950b      	str	r5, [sp, #44]	; 0x2c
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	d15c      	bne.n	8002d80 <_dtoa_r+0x4d0>
 8002cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <_dtoa_r+0x61c>)
 8002cce:	f7fd fa5b 	bl	8000188 <__aeabi_dsub>
 8002cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cda:	f7fd fe9d 	bl	8000a18 <__aeabi_dcmpgt>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	f040 8281 	bne.w	80031e6 <_dtoa_r+0x936>
 8002ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002cee:	f7fd fe75 	bl	80009dc <__aeabi_dcmplt>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	f040 8275 	bne.w	80031e2 <_dtoa_r+0x932>
 8002cf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002cfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f2c0 814b 	blt.w	8002f9e <_dtoa_r+0x6ee>
 8002d08:	f1ba 0f0e 	cmp.w	sl, #14
 8002d0c:	f300 8147 	bgt.w	8002f9e <_dtoa_r+0x6ee>
 8002d10:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <_dtoa_r+0x608>)
 8002d12:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f280 80d7 	bge.w	8002ed4 <_dtoa_r+0x624>
 8002d26:	f1b8 0f00 	cmp.w	r8, #0
 8002d2a:	f300 80d3 	bgt.w	8002ed4 <_dtoa_r+0x624>
 8002d2e:	f040 8257 	bne.w	80031e0 <_dtoa_r+0x930>
 8002d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d36:	2200      	movs	r2, #0
 8002d38:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <_dtoa_r+0x61c>)
 8002d3a:	f7fd fbdd 	bl	80004f8 <__aeabi_dmul>
 8002d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d42:	f7fd fe5f 	bl	8000a04 <__aeabi_dcmpge>
 8002d46:	4646      	mov	r6, r8
 8002d48:	4647      	mov	r7, r8
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	f040 822d 	bne.w	80031aa <_dtoa_r+0x8fa>
 8002d50:	9b06      	ldr	r3, [sp, #24]
 8002d52:	9a06      	ldr	r2, [sp, #24]
 8002d54:	1c5d      	adds	r5, r3, #1
 8002d56:	2331      	movs	r3, #49	; 0x31
 8002d58:	f10a 0a01 	add.w	sl, sl, #1
 8002d5c:	7013      	strb	r3, [r2, #0]
 8002d5e:	e228      	b.n	80031b2 <_dtoa_r+0x902>
 8002d60:	07f2      	lsls	r2, r6, #31
 8002d62:	d505      	bpl.n	8002d70 <_dtoa_r+0x4c0>
 8002d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d68:	f7fd fbc6 	bl	80004f8 <__aeabi_dmul>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	3501      	adds	r5, #1
 8002d70:	1076      	asrs	r6, r6, #1
 8002d72:	3708      	adds	r7, #8
 8002d74:	e76e      	b.n	8002c54 <_dtoa_r+0x3a4>
 8002d76:	2502      	movs	r5, #2
 8002d78:	e771      	b.n	8002c5e <_dtoa_r+0x3ae>
 8002d7a:	4657      	mov	r7, sl
 8002d7c:	4646      	mov	r6, r8
 8002d7e:	e790      	b.n	8002ca2 <_dtoa_r+0x3f2>
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <_dtoa_r+0x608>)
 8002d82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002d86:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d048      	beq.n	8002e22 <_dtoa_r+0x572>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	2000      	movs	r0, #0
 8002d96:	494e      	ldr	r1, [pc, #312]	; (8002ed0 <_dtoa_r+0x620>)
 8002d98:	f7fd fcd8 	bl	800074c <__aeabi_ddiv>
 8002d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002da0:	f7fd f9f2 	bl	8000188 <__aeabi_dsub>
 8002da4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002da8:	9d06      	ldr	r5, [sp, #24]
 8002daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dae:	f7fd fe53 	bl	8000a58 <__aeabi_d2iz>
 8002db2:	9011      	str	r0, [sp, #68]	; 0x44
 8002db4:	f7fd fb36 	bl	8000424 <__aeabi_i2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dc0:	f7fd f9e2 	bl	8000188 <__aeabi_dsub>
 8002dc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dca:	3330      	adds	r3, #48	; 0x30
 8002dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8002dd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002dd4:	f7fd fe02 	bl	80009dc <__aeabi_dcmplt>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d163      	bne.n	8002ea4 <_dtoa_r+0x5f4>
 8002ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002de0:	2000      	movs	r0, #0
 8002de2:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <_dtoa_r+0x610>)
 8002de4:	f7fd f9d0 	bl	8000188 <__aeabi_dsub>
 8002de8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002dec:	f7fd fdf6 	bl	80009dc <__aeabi_dcmplt>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	f040 80b5 	bne.w	8002f60 <_dtoa_r+0x6b0>
 8002df6:	9b06      	ldr	r3, [sp, #24]
 8002df8:	1aeb      	subs	r3, r5, r3
 8002dfa:	429e      	cmp	r6, r3
 8002dfc:	f77f af7c 	ble.w	8002cf8 <_dtoa_r+0x448>
 8002e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002e04:	2200      	movs	r2, #0
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <_dtoa_r+0x614>)
 8002e08:	f7fd fb76 	bl	80004f8 <__aeabi_dmul>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <_dtoa_r+0x614>)
 8002e18:	f7fd fb6e 	bl	80004f8 <__aeabi_dmul>
 8002e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e20:	e7c3      	b.n	8002daa <_dtoa_r+0x4fa>
 8002e22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e26:	f7fd fb67 	bl	80004f8 <__aeabi_dmul>
 8002e2a:	9b06      	ldr	r3, [sp, #24]
 8002e2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e30:	199d      	adds	r5, r3, r6
 8002e32:	461e      	mov	r6, r3
 8002e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e38:	f7fd fe0e 	bl	8000a58 <__aeabi_d2iz>
 8002e3c:	9011      	str	r0, [sp, #68]	; 0x44
 8002e3e:	f7fd faf1 	bl	8000424 <__aeabi_i2d>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e4a:	f7fd f99d 	bl	8000188 <__aeabi_dsub>
 8002e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e54:	3330      	adds	r3, #48	; 0x30
 8002e56:	f806 3b01 	strb.w	r3, [r6], #1
 8002e5a:	42ae      	cmp	r6, r5
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	d124      	bne.n	8002eac <_dtoa_r+0x5fc>
 8002e62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <_dtoa_r+0x620>)
 8002e68:	f7fd f990 	bl	800018c <__adddf3>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e74:	f7fd fdd0 	bl	8000a18 <__aeabi_dcmpgt>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d171      	bne.n	8002f60 <_dtoa_r+0x6b0>
 8002e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e80:	2000      	movs	r0, #0
 8002e82:	4913      	ldr	r1, [pc, #76]	; (8002ed0 <_dtoa_r+0x620>)
 8002e84:	f7fd f980 	bl	8000188 <__aeabi_dsub>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e90:	f7fd fda4 	bl	80009dc <__aeabi_dcmplt>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f43f af2f 	beq.w	8002cf8 <_dtoa_r+0x448>
 8002e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002e9e:	1e6a      	subs	r2, r5, #1
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	d001      	beq.n	8002ea8 <_dtoa_r+0x5f8>
 8002ea4:	46ba      	mov	sl, r7
 8002ea6:	e04a      	b.n	8002f3e <_dtoa_r+0x68e>
 8002ea8:	4615      	mov	r5, r2
 8002eaa:	e7f6      	b.n	8002e9a <_dtoa_r+0x5ea>
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <_dtoa_r+0x614>)
 8002eae:	f7fd fb23 	bl	80004f8 <__aeabi_dmul>
 8002eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eb6:	e7bd      	b.n	8002e34 <_dtoa_r+0x584>
 8002eb8:	08003c10 	.word	0x08003c10
 8002ebc:	08003be8 	.word	0x08003be8
 8002ec0:	3ff00000 	.word	0x3ff00000
 8002ec4:	40240000 	.word	0x40240000
 8002ec8:	401c0000 	.word	0x401c0000
 8002ecc:	40140000 	.word	0x40140000
 8002ed0:	3fe00000 	.word	0x3fe00000
 8002ed4:	9d06      	ldr	r5, [sp, #24]
 8002ed6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	4639      	mov	r1, r7
 8002ee2:	f7fd fc33 	bl	800074c <__aeabi_ddiv>
 8002ee6:	f7fd fdb7 	bl	8000a58 <__aeabi_d2iz>
 8002eea:	4681      	mov	r9, r0
 8002eec:	f7fd fa9a 	bl	8000424 <__aeabi_i2d>
 8002ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ef4:	f7fd fb00 	bl	80004f8 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4630      	mov	r0, r6
 8002efe:	4639      	mov	r1, r7
 8002f00:	f7fd f942 	bl	8000188 <__aeabi_dsub>
 8002f04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002f08:	f805 6b01 	strb.w	r6, [r5], #1
 8002f0c:	9e06      	ldr	r6, [sp, #24]
 8002f0e:	4602      	mov	r2, r0
 8002f10:	1bae      	subs	r6, r5, r6
 8002f12:	45b0      	cmp	r8, r6
 8002f14:	460b      	mov	r3, r1
 8002f16:	d135      	bne.n	8002f84 <_dtoa_r+0x6d4>
 8002f18:	f7fd f938 	bl	800018c <__adddf3>
 8002f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f20:	4606      	mov	r6, r0
 8002f22:	460f      	mov	r7, r1
 8002f24:	f7fd fd78 	bl	8000a18 <__aeabi_dcmpgt>
 8002f28:	b9c8      	cbnz	r0, 8002f5e <_dtoa_r+0x6ae>
 8002f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f2e:	4630      	mov	r0, r6
 8002f30:	4639      	mov	r1, r7
 8002f32:	f7fd fd49 	bl	80009c8 <__aeabi_dcmpeq>
 8002f36:	b110      	cbz	r0, 8002f3e <_dtoa_r+0x68e>
 8002f38:	f019 0f01 	tst.w	r9, #1
 8002f3c:	d10f      	bne.n	8002f5e <_dtoa_r+0x6ae>
 8002f3e:	4659      	mov	r1, fp
 8002f40:	4620      	mov	r0, r4
 8002f42:	f000 fab3 	bl	80034ac <_Bfree>
 8002f46:	2300      	movs	r3, #0
 8002f48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f4a:	702b      	strb	r3, [r5, #0]
 8002f4c:	f10a 0301 	add.w	r3, sl, #1
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f43f acf3 	beq.w	8002940 <_dtoa_r+0x90>
 8002f5a:	601d      	str	r5, [r3, #0]
 8002f5c:	e4f0      	b.n	8002940 <_dtoa_r+0x90>
 8002f5e:	4657      	mov	r7, sl
 8002f60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002f64:	1e6b      	subs	r3, r5, #1
 8002f66:	2a39      	cmp	r2, #57	; 0x39
 8002f68:	d106      	bne.n	8002f78 <_dtoa_r+0x6c8>
 8002f6a:	9a06      	ldr	r2, [sp, #24]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <_dtoa_r+0x6d0>
 8002f70:	2330      	movs	r3, #48	; 0x30
 8002f72:	7013      	strb	r3, [r2, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	3701      	adds	r7, #1
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e791      	b.n	8002ea4 <_dtoa_r+0x5f4>
 8002f80:	461d      	mov	r5, r3
 8002f82:	e7ed      	b.n	8002f60 <_dtoa_r+0x6b0>
 8002f84:	2200      	movs	r2, #0
 8002f86:	4b99      	ldr	r3, [pc, #612]	; (80031ec <_dtoa_r+0x93c>)
 8002f88:	f7fd fab6 	bl	80004f8 <__aeabi_dmul>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2300      	movs	r3, #0
 8002f90:	4606      	mov	r6, r0
 8002f92:	460f      	mov	r7, r1
 8002f94:	f7fd fd18 	bl	80009c8 <__aeabi_dcmpeq>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d09e      	beq.n	8002eda <_dtoa_r+0x62a>
 8002f9c:	e7cf      	b.n	8002f3e <_dtoa_r+0x68e>
 8002f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	f000 8088 	beq.w	80030b6 <_dtoa_r+0x806>
 8002fa6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fa8:	2a01      	cmp	r2, #1
 8002faa:	dc6d      	bgt.n	8003088 <_dtoa_r+0x7d8>
 8002fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002fae:	2a00      	cmp	r2, #0
 8002fb0:	d066      	beq.n	8003080 <_dtoa_r+0x7d0>
 8002fb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002fb6:	464d      	mov	r5, r9
 8002fb8:	9e08      	ldr	r6, [sp, #32]
 8002fba:	9a07      	ldr	r2, [sp, #28]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	441a      	add	r2, r3
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4499      	add	r9, r3
 8002fc4:	9207      	str	r2, [sp, #28]
 8002fc6:	f000 fb11 	bl	80035ec <__i2b>
 8002fca:	4607      	mov	r7, r0
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	dd0b      	ble.n	8002fe8 <_dtoa_r+0x738>
 8002fd0:	9b07      	ldr	r3, [sp, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	dd08      	ble.n	8002fe8 <_dtoa_r+0x738>
 8002fd6:	42ab      	cmp	r3, r5
 8002fd8:	bfa8      	it	ge
 8002fda:	462b      	movge	r3, r5
 8002fdc:	9a07      	ldr	r2, [sp, #28]
 8002fde:	eba9 0903 	sub.w	r9, r9, r3
 8002fe2:	1aed      	subs	r5, r5, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	9307      	str	r3, [sp, #28]
 8002fe8:	9b08      	ldr	r3, [sp, #32]
 8002fea:	b1eb      	cbz	r3, 8003028 <_dtoa_r+0x778>
 8002fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d065      	beq.n	80030be <_dtoa_r+0x80e>
 8002ff2:	b18e      	cbz	r6, 8003018 <_dtoa_r+0x768>
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	4632      	mov	r2, r6
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 fb95 	bl	8003728 <__pow5mult>
 8002ffe:	465a      	mov	r2, fp
 8003000:	4601      	mov	r1, r0
 8003002:	4607      	mov	r7, r0
 8003004:	4620      	mov	r0, r4
 8003006:	f000 fafa 	bl	80035fe <__multiply>
 800300a:	4659      	mov	r1, fp
 800300c:	900a      	str	r0, [sp, #40]	; 0x28
 800300e:	4620      	mov	r0, r4
 8003010:	f000 fa4c 	bl	80034ac <_Bfree>
 8003014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003016:	469b      	mov	fp, r3
 8003018:	9b08      	ldr	r3, [sp, #32]
 800301a:	1b9a      	subs	r2, r3, r6
 800301c:	d004      	beq.n	8003028 <_dtoa_r+0x778>
 800301e:	4659      	mov	r1, fp
 8003020:	4620      	mov	r0, r4
 8003022:	f000 fb81 	bl	8003728 <__pow5mult>
 8003026:	4683      	mov	fp, r0
 8003028:	2101      	movs	r1, #1
 800302a:	4620      	mov	r0, r4
 800302c:	f000 fade 	bl	80035ec <__i2b>
 8003030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003032:	4606      	mov	r6, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 81c6 	beq.w	80033c6 <_dtoa_r+0xb16>
 800303a:	461a      	mov	r2, r3
 800303c:	4601      	mov	r1, r0
 800303e:	4620      	mov	r0, r4
 8003040:	f000 fb72 	bl	8003728 <__pow5mult>
 8003044:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003046:	4606      	mov	r6, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	dc3e      	bgt.n	80030ca <_dtoa_r+0x81a>
 800304c:	9b02      	ldr	r3, [sp, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d137      	bne.n	80030c2 <_dtoa_r+0x812>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003058:	2b00      	cmp	r3, #0
 800305a:	d134      	bne.n	80030c6 <_dtoa_r+0x816>
 800305c:	9b03      	ldr	r3, [sp, #12]
 800305e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003062:	0d1b      	lsrs	r3, r3, #20
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	b12b      	cbz	r3, 8003074 <_dtoa_r+0x7c4>
 8003068:	9b07      	ldr	r3, [sp, #28]
 800306a:	f109 0901 	add.w	r9, r9, #1
 800306e:	3301      	adds	r3, #1
 8003070:	9307      	str	r3, [sp, #28]
 8003072:	2301      	movs	r3, #1
 8003074:	9308      	str	r3, [sp, #32]
 8003076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d128      	bne.n	80030ce <_dtoa_r+0x81e>
 800307c:	2001      	movs	r0, #1
 800307e:	e02e      	b.n	80030de <_dtoa_r+0x82e>
 8003080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003082:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003086:	e796      	b.n	8002fb6 <_dtoa_r+0x706>
 8003088:	9b08      	ldr	r3, [sp, #32]
 800308a:	f108 36ff 	add.w	r6, r8, #4294967295
 800308e:	42b3      	cmp	r3, r6
 8003090:	bfb7      	itett	lt
 8003092:	9b08      	ldrlt	r3, [sp, #32]
 8003094:	1b9e      	subge	r6, r3, r6
 8003096:	1af2      	sublt	r2, r6, r3
 8003098:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800309a:	bfbf      	itttt	lt
 800309c:	9608      	strlt	r6, [sp, #32]
 800309e:	189b      	addlt	r3, r3, r2
 80030a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80030a2:	2600      	movlt	r6, #0
 80030a4:	f1b8 0f00 	cmp.w	r8, #0
 80030a8:	bfb9      	ittee	lt
 80030aa:	eba9 0508 	sublt.w	r5, r9, r8
 80030ae:	2300      	movlt	r3, #0
 80030b0:	464d      	movge	r5, r9
 80030b2:	4643      	movge	r3, r8
 80030b4:	e781      	b.n	8002fba <_dtoa_r+0x70a>
 80030b6:	9e08      	ldr	r6, [sp, #32]
 80030b8:	464d      	mov	r5, r9
 80030ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80030bc:	e786      	b.n	8002fcc <_dtoa_r+0x71c>
 80030be:	9a08      	ldr	r2, [sp, #32]
 80030c0:	e7ad      	b.n	800301e <_dtoa_r+0x76e>
 80030c2:	2300      	movs	r3, #0
 80030c4:	e7d6      	b.n	8003074 <_dtoa_r+0x7c4>
 80030c6:	9b02      	ldr	r3, [sp, #8]
 80030c8:	e7d4      	b.n	8003074 <_dtoa_r+0x7c4>
 80030ca:	2300      	movs	r3, #0
 80030cc:	9308      	str	r3, [sp, #32]
 80030ce:	6933      	ldr	r3, [r6, #16]
 80030d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80030d4:	6918      	ldr	r0, [r3, #16]
 80030d6:	f000 fa3b 	bl	8003550 <__hi0bits>
 80030da:	f1c0 0020 	rsb	r0, r0, #32
 80030de:	9b07      	ldr	r3, [sp, #28]
 80030e0:	4418      	add	r0, r3
 80030e2:	f010 001f 	ands.w	r0, r0, #31
 80030e6:	d047      	beq.n	8003178 <_dtoa_r+0x8c8>
 80030e8:	f1c0 0320 	rsb	r3, r0, #32
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	dd3b      	ble.n	8003168 <_dtoa_r+0x8b8>
 80030f0:	9b07      	ldr	r3, [sp, #28]
 80030f2:	f1c0 001c 	rsb	r0, r0, #28
 80030f6:	4481      	add	r9, r0
 80030f8:	4405      	add	r5, r0
 80030fa:	4403      	add	r3, r0
 80030fc:	9307      	str	r3, [sp, #28]
 80030fe:	f1b9 0f00 	cmp.w	r9, #0
 8003102:	dd05      	ble.n	8003110 <_dtoa_r+0x860>
 8003104:	4659      	mov	r1, fp
 8003106:	464a      	mov	r2, r9
 8003108:	4620      	mov	r0, r4
 800310a:	f000 fb5b 	bl	80037c4 <__lshift>
 800310e:	4683      	mov	fp, r0
 8003110:	9b07      	ldr	r3, [sp, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	dd05      	ble.n	8003122 <_dtoa_r+0x872>
 8003116:	4631      	mov	r1, r6
 8003118:	461a      	mov	r2, r3
 800311a:	4620      	mov	r0, r4
 800311c:	f000 fb52 	bl	80037c4 <__lshift>
 8003120:	4606      	mov	r6, r0
 8003122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003124:	b353      	cbz	r3, 800317c <_dtoa_r+0x8cc>
 8003126:	4631      	mov	r1, r6
 8003128:	4658      	mov	r0, fp
 800312a:	f000 fb9f 	bl	800386c <__mcmp>
 800312e:	2800      	cmp	r0, #0
 8003130:	da24      	bge.n	800317c <_dtoa_r+0x8cc>
 8003132:	2300      	movs	r3, #0
 8003134:	4659      	mov	r1, fp
 8003136:	220a      	movs	r2, #10
 8003138:	4620      	mov	r0, r4
 800313a:	f000 f9ce 	bl	80034da <__multadd>
 800313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003140:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003144:	4683      	mov	fp, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8144 	beq.w	80033d4 <_dtoa_r+0xb24>
 800314c:	2300      	movs	r3, #0
 800314e:	4639      	mov	r1, r7
 8003150:	220a      	movs	r2, #10
 8003152:	4620      	mov	r0, r4
 8003154:	f000 f9c1 	bl	80034da <__multadd>
 8003158:	9b04      	ldr	r3, [sp, #16]
 800315a:	4607      	mov	r7, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	dc4d      	bgt.n	80031fc <_dtoa_r+0x94c>
 8003160:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003162:	2b02      	cmp	r3, #2
 8003164:	dd4a      	ble.n	80031fc <_dtoa_r+0x94c>
 8003166:	e011      	b.n	800318c <_dtoa_r+0x8dc>
 8003168:	d0c9      	beq.n	80030fe <_dtoa_r+0x84e>
 800316a:	9a07      	ldr	r2, [sp, #28]
 800316c:	331c      	adds	r3, #28
 800316e:	441a      	add	r2, r3
 8003170:	4499      	add	r9, r3
 8003172:	441d      	add	r5, r3
 8003174:	4613      	mov	r3, r2
 8003176:	e7c1      	b.n	80030fc <_dtoa_r+0x84c>
 8003178:	4603      	mov	r3, r0
 800317a:	e7f6      	b.n	800316a <_dtoa_r+0x8ba>
 800317c:	f1b8 0f00 	cmp.w	r8, #0
 8003180:	dc36      	bgt.n	80031f0 <_dtoa_r+0x940>
 8003182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003184:	2b02      	cmp	r3, #2
 8003186:	dd33      	ble.n	80031f0 <_dtoa_r+0x940>
 8003188:	f8cd 8010 	str.w	r8, [sp, #16]
 800318c:	9b04      	ldr	r3, [sp, #16]
 800318e:	b963      	cbnz	r3, 80031aa <_dtoa_r+0x8fa>
 8003190:	4631      	mov	r1, r6
 8003192:	2205      	movs	r2, #5
 8003194:	4620      	mov	r0, r4
 8003196:	f000 f9a0 	bl	80034da <__multadd>
 800319a:	4601      	mov	r1, r0
 800319c:	4606      	mov	r6, r0
 800319e:	4658      	mov	r0, fp
 80031a0:	f000 fb64 	bl	800386c <__mcmp>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	f73f add3 	bgt.w	8002d50 <_dtoa_r+0x4a0>
 80031aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80031ac:	9d06      	ldr	r5, [sp, #24]
 80031ae:	ea6f 0a03 	mvn.w	sl, r3
 80031b2:	f04f 0900 	mov.w	r9, #0
 80031b6:	4631      	mov	r1, r6
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 f977 	bl	80034ac <_Bfree>
 80031be:	2f00      	cmp	r7, #0
 80031c0:	f43f aebd 	beq.w	8002f3e <_dtoa_r+0x68e>
 80031c4:	f1b9 0f00 	cmp.w	r9, #0
 80031c8:	d005      	beq.n	80031d6 <_dtoa_r+0x926>
 80031ca:	45b9      	cmp	r9, r7
 80031cc:	d003      	beq.n	80031d6 <_dtoa_r+0x926>
 80031ce:	4649      	mov	r1, r9
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 f96b 	bl	80034ac <_Bfree>
 80031d6:	4639      	mov	r1, r7
 80031d8:	4620      	mov	r0, r4
 80031da:	f000 f967 	bl	80034ac <_Bfree>
 80031de:	e6ae      	b.n	8002f3e <_dtoa_r+0x68e>
 80031e0:	2600      	movs	r6, #0
 80031e2:	4637      	mov	r7, r6
 80031e4:	e7e1      	b.n	80031aa <_dtoa_r+0x8fa>
 80031e6:	46ba      	mov	sl, r7
 80031e8:	4637      	mov	r7, r6
 80031ea:	e5b1      	b.n	8002d50 <_dtoa_r+0x4a0>
 80031ec:	40240000 	.word	0x40240000
 80031f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80f3 	beq.w	80033e2 <_dtoa_r+0xb32>
 80031fc:	2d00      	cmp	r5, #0
 80031fe:	dd05      	ble.n	800320c <_dtoa_r+0x95c>
 8003200:	4639      	mov	r1, r7
 8003202:	462a      	mov	r2, r5
 8003204:	4620      	mov	r0, r4
 8003206:	f000 fadd 	bl	80037c4 <__lshift>
 800320a:	4607      	mov	r7, r0
 800320c:	9b08      	ldr	r3, [sp, #32]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d04c      	beq.n	80032ac <_dtoa_r+0x9fc>
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4620      	mov	r0, r4
 8003216:	f000 f915 	bl	8003444 <_Balloc>
 800321a:	4605      	mov	r5, r0
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	f107 010c 	add.w	r1, r7, #12
 8003222:	3202      	adds	r2, #2
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	300c      	adds	r0, #12
 8003228:	f7fe fee8 	bl	8001ffc <memcpy>
 800322c:	2201      	movs	r2, #1
 800322e:	4629      	mov	r1, r5
 8003230:	4620      	mov	r0, r4
 8003232:	f000 fac7 	bl	80037c4 <__lshift>
 8003236:	46b9      	mov	r9, r7
 8003238:	4607      	mov	r7, r0
 800323a:	9b06      	ldr	r3, [sp, #24]
 800323c:	9307      	str	r3, [sp, #28]
 800323e:	9b02      	ldr	r3, [sp, #8]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	9308      	str	r3, [sp, #32]
 8003246:	4631      	mov	r1, r6
 8003248:	4658      	mov	r0, fp
 800324a:	f7ff faa3 	bl	8002794 <quorem>
 800324e:	4649      	mov	r1, r9
 8003250:	4605      	mov	r5, r0
 8003252:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003256:	4658      	mov	r0, fp
 8003258:	f000 fb08 	bl	800386c <__mcmp>
 800325c:	463a      	mov	r2, r7
 800325e:	9002      	str	r0, [sp, #8]
 8003260:	4631      	mov	r1, r6
 8003262:	4620      	mov	r0, r4
 8003264:	f000 fb1c 	bl	80038a0 <__mdiff>
 8003268:	68c3      	ldr	r3, [r0, #12]
 800326a:	4602      	mov	r2, r0
 800326c:	bb03      	cbnz	r3, 80032b0 <_dtoa_r+0xa00>
 800326e:	4601      	mov	r1, r0
 8003270:	9009      	str	r0, [sp, #36]	; 0x24
 8003272:	4658      	mov	r0, fp
 8003274:	f000 fafa 	bl	800386c <__mcmp>
 8003278:	4603      	mov	r3, r0
 800327a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800327c:	4611      	mov	r1, r2
 800327e:	4620      	mov	r0, r4
 8003280:	9309      	str	r3, [sp, #36]	; 0x24
 8003282:	f000 f913 	bl	80034ac <_Bfree>
 8003286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003288:	b9a3      	cbnz	r3, 80032b4 <_dtoa_r+0xa04>
 800328a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800328c:	b992      	cbnz	r2, 80032b4 <_dtoa_r+0xa04>
 800328e:	9a08      	ldr	r2, [sp, #32]
 8003290:	b982      	cbnz	r2, 80032b4 <_dtoa_r+0xa04>
 8003292:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003296:	d029      	beq.n	80032ec <_dtoa_r+0xa3c>
 8003298:	9b02      	ldr	r3, [sp, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	dd01      	ble.n	80032a2 <_dtoa_r+0x9f2>
 800329e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80032a2:	9b07      	ldr	r3, [sp, #28]
 80032a4:	1c5d      	adds	r5, r3, #1
 80032a6:	f883 8000 	strb.w	r8, [r3]
 80032aa:	e784      	b.n	80031b6 <_dtoa_r+0x906>
 80032ac:	4638      	mov	r0, r7
 80032ae:	e7c2      	b.n	8003236 <_dtoa_r+0x986>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e7e3      	b.n	800327c <_dtoa_r+0x9cc>
 80032b4:	9a02      	ldr	r2, [sp, #8]
 80032b6:	2a00      	cmp	r2, #0
 80032b8:	db04      	blt.n	80032c4 <_dtoa_r+0xa14>
 80032ba:	d123      	bne.n	8003304 <_dtoa_r+0xa54>
 80032bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80032be:	bb0a      	cbnz	r2, 8003304 <_dtoa_r+0xa54>
 80032c0:	9a08      	ldr	r2, [sp, #32]
 80032c2:	b9fa      	cbnz	r2, 8003304 <_dtoa_r+0xa54>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	ddec      	ble.n	80032a2 <_dtoa_r+0x9f2>
 80032c8:	4659      	mov	r1, fp
 80032ca:	2201      	movs	r2, #1
 80032cc:	4620      	mov	r0, r4
 80032ce:	f000 fa79 	bl	80037c4 <__lshift>
 80032d2:	4631      	mov	r1, r6
 80032d4:	4683      	mov	fp, r0
 80032d6:	f000 fac9 	bl	800386c <__mcmp>
 80032da:	2800      	cmp	r0, #0
 80032dc:	dc03      	bgt.n	80032e6 <_dtoa_r+0xa36>
 80032de:	d1e0      	bne.n	80032a2 <_dtoa_r+0x9f2>
 80032e0:	f018 0f01 	tst.w	r8, #1
 80032e4:	d0dd      	beq.n	80032a2 <_dtoa_r+0x9f2>
 80032e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80032ea:	d1d8      	bne.n	800329e <_dtoa_r+0x9ee>
 80032ec:	9b07      	ldr	r3, [sp, #28]
 80032ee:	9a07      	ldr	r2, [sp, #28]
 80032f0:	1c5d      	adds	r5, r3, #1
 80032f2:	2339      	movs	r3, #57	; 0x39
 80032f4:	7013      	strb	r3, [r2, #0]
 80032f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80032fa:	1e6a      	subs	r2, r5, #1
 80032fc:	2b39      	cmp	r3, #57	; 0x39
 80032fe:	d04d      	beq.n	800339c <_dtoa_r+0xaec>
 8003300:	3301      	adds	r3, #1
 8003302:	e052      	b.n	80033aa <_dtoa_r+0xafa>
 8003304:	9a07      	ldr	r2, [sp, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f102 0501 	add.w	r5, r2, #1
 800330c:	dd06      	ble.n	800331c <_dtoa_r+0xa6c>
 800330e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003312:	d0eb      	beq.n	80032ec <_dtoa_r+0xa3c>
 8003314:	f108 0801 	add.w	r8, r8, #1
 8003318:	9b07      	ldr	r3, [sp, #28]
 800331a:	e7c4      	b.n	80032a6 <_dtoa_r+0x9f6>
 800331c:	9b06      	ldr	r3, [sp, #24]
 800331e:	9a04      	ldr	r2, [sp, #16]
 8003320:	1aeb      	subs	r3, r5, r3
 8003322:	4293      	cmp	r3, r2
 8003324:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003328:	d021      	beq.n	800336e <_dtoa_r+0xabe>
 800332a:	4659      	mov	r1, fp
 800332c:	2300      	movs	r3, #0
 800332e:	220a      	movs	r2, #10
 8003330:	4620      	mov	r0, r4
 8003332:	f000 f8d2 	bl	80034da <__multadd>
 8003336:	45b9      	cmp	r9, r7
 8003338:	4683      	mov	fp, r0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 020a 	mov.w	r2, #10
 8003342:	4649      	mov	r1, r9
 8003344:	4620      	mov	r0, r4
 8003346:	d105      	bne.n	8003354 <_dtoa_r+0xaa4>
 8003348:	f000 f8c7 	bl	80034da <__multadd>
 800334c:	4681      	mov	r9, r0
 800334e:	4607      	mov	r7, r0
 8003350:	9507      	str	r5, [sp, #28]
 8003352:	e778      	b.n	8003246 <_dtoa_r+0x996>
 8003354:	f000 f8c1 	bl	80034da <__multadd>
 8003358:	4639      	mov	r1, r7
 800335a:	4681      	mov	r9, r0
 800335c:	2300      	movs	r3, #0
 800335e:	220a      	movs	r2, #10
 8003360:	4620      	mov	r0, r4
 8003362:	f000 f8ba 	bl	80034da <__multadd>
 8003366:	4607      	mov	r7, r0
 8003368:	e7f2      	b.n	8003350 <_dtoa_r+0xaa0>
 800336a:	f04f 0900 	mov.w	r9, #0
 800336e:	4659      	mov	r1, fp
 8003370:	2201      	movs	r2, #1
 8003372:	4620      	mov	r0, r4
 8003374:	f000 fa26 	bl	80037c4 <__lshift>
 8003378:	4631      	mov	r1, r6
 800337a:	4683      	mov	fp, r0
 800337c:	f000 fa76 	bl	800386c <__mcmp>
 8003380:	2800      	cmp	r0, #0
 8003382:	dcb8      	bgt.n	80032f6 <_dtoa_r+0xa46>
 8003384:	d102      	bne.n	800338c <_dtoa_r+0xadc>
 8003386:	f018 0f01 	tst.w	r8, #1
 800338a:	d1b4      	bne.n	80032f6 <_dtoa_r+0xa46>
 800338c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003390:	1e6a      	subs	r2, r5, #1
 8003392:	2b30      	cmp	r3, #48	; 0x30
 8003394:	f47f af0f 	bne.w	80031b6 <_dtoa_r+0x906>
 8003398:	4615      	mov	r5, r2
 800339a:	e7f7      	b.n	800338c <_dtoa_r+0xadc>
 800339c:	9b06      	ldr	r3, [sp, #24]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d105      	bne.n	80033ae <_dtoa_r+0xafe>
 80033a2:	2331      	movs	r3, #49	; 0x31
 80033a4:	9a06      	ldr	r2, [sp, #24]
 80033a6:	f10a 0a01 	add.w	sl, sl, #1
 80033aa:	7013      	strb	r3, [r2, #0]
 80033ac:	e703      	b.n	80031b6 <_dtoa_r+0x906>
 80033ae:	4615      	mov	r5, r2
 80033b0:	e7a1      	b.n	80032f6 <_dtoa_r+0xa46>
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <_dtoa_r+0xb60>)
 80033b4:	f7ff bae1 	b.w	800297a <_dtoa_r+0xca>
 80033b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f47f aabb 	bne.w	8002936 <_dtoa_r+0x86>
 80033c0:	4b14      	ldr	r3, [pc, #80]	; (8003414 <_dtoa_r+0xb64>)
 80033c2:	f7ff bada 	b.w	800297a <_dtoa_r+0xca>
 80033c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f77f ae3f 	ble.w	800304c <_dtoa_r+0x79c>
 80033ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033d0:	9308      	str	r3, [sp, #32]
 80033d2:	e653      	b.n	800307c <_dtoa_r+0x7cc>
 80033d4:	9b04      	ldr	r3, [sp, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	dc03      	bgt.n	80033e2 <_dtoa_r+0xb32>
 80033da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033dc:	2b02      	cmp	r3, #2
 80033de:	f73f aed5 	bgt.w	800318c <_dtoa_r+0x8dc>
 80033e2:	9d06      	ldr	r5, [sp, #24]
 80033e4:	4631      	mov	r1, r6
 80033e6:	4658      	mov	r0, fp
 80033e8:	f7ff f9d4 	bl	8002794 <quorem>
 80033ec:	9b06      	ldr	r3, [sp, #24]
 80033ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80033f2:	f805 8b01 	strb.w	r8, [r5], #1
 80033f6:	9a04      	ldr	r2, [sp, #16]
 80033f8:	1aeb      	subs	r3, r5, r3
 80033fa:	429a      	cmp	r2, r3
 80033fc:	ddb5      	ble.n	800336a <_dtoa_r+0xaba>
 80033fe:	4659      	mov	r1, fp
 8003400:	2300      	movs	r3, #0
 8003402:	220a      	movs	r2, #10
 8003404:	4620      	mov	r0, r4
 8003406:	f000 f868 	bl	80034da <__multadd>
 800340a:	4683      	mov	fp, r0
 800340c:	e7ea      	b.n	80033e4 <_dtoa_r+0xb34>
 800340e:	bf00      	nop
 8003410:	08003bd8 	.word	0x08003bd8
 8003414:	08003bda 	.word	0x08003bda

08003418 <_localeconv_r>:
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <_localeconv_r+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a18      	ldr	r0, [r3, #32]
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <_localeconv_r+0x18>)
 8003420:	2800      	cmp	r0, #0
 8003422:	bf08      	it	eq
 8003424:	4618      	moveq	r0, r3
 8003426:	30f0      	adds	r0, #240	; 0xf0
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000
 8003430:	20000064 	.word	0x20000064

08003434 <malloc>:
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <malloc+0xc>)
 8003436:	4601      	mov	r1, r0
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	f000 baed 	b.w	8003a18 <_malloc_r>
 800343e:	bf00      	nop
 8003440:	20000000 	.word	0x20000000

08003444 <_Balloc>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003448:	4604      	mov	r4, r0
 800344a:	460e      	mov	r6, r1
 800344c:	b93d      	cbnz	r5, 800345e <_Balloc+0x1a>
 800344e:	2010      	movs	r0, #16
 8003450:	f7ff fff0 	bl	8003434 <malloc>
 8003454:	6260      	str	r0, [r4, #36]	; 0x24
 8003456:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800345a:	6005      	str	r5, [r0, #0]
 800345c:	60c5      	str	r5, [r0, #12]
 800345e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003460:	68eb      	ldr	r3, [r5, #12]
 8003462:	b183      	cbz	r3, 8003486 <_Balloc+0x42>
 8003464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800346c:	b9b8      	cbnz	r0, 800349e <_Balloc+0x5a>
 800346e:	2101      	movs	r1, #1
 8003470:	fa01 f506 	lsl.w	r5, r1, r6
 8003474:	1d6a      	adds	r2, r5, #5
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4620      	mov	r0, r4
 800347a:	f000 fabe 	bl	80039fa <_calloc_r>
 800347e:	b160      	cbz	r0, 800349a <_Balloc+0x56>
 8003480:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003484:	e00e      	b.n	80034a4 <_Balloc+0x60>
 8003486:	2221      	movs	r2, #33	; 0x21
 8003488:	2104      	movs	r1, #4
 800348a:	4620      	mov	r0, r4
 800348c:	f000 fab5 	bl	80039fa <_calloc_r>
 8003490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003492:	60e8      	str	r0, [r5, #12]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e4      	bne.n	8003464 <_Balloc+0x20>
 800349a:	2000      	movs	r0, #0
 800349c:	bd70      	pop	{r4, r5, r6, pc}
 800349e:	6802      	ldr	r2, [r0, #0]
 80034a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80034a4:	2300      	movs	r3, #0
 80034a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80034aa:	e7f7      	b.n	800349c <_Balloc+0x58>

080034ac <_Bfree>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80034b0:	4606      	mov	r6, r0
 80034b2:	460d      	mov	r5, r1
 80034b4:	b93c      	cbnz	r4, 80034c6 <_Bfree+0x1a>
 80034b6:	2010      	movs	r0, #16
 80034b8:	f7ff ffbc 	bl	8003434 <malloc>
 80034bc:	6270      	str	r0, [r6, #36]	; 0x24
 80034be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80034c2:	6004      	str	r4, [r0, #0]
 80034c4:	60c4      	str	r4, [r0, #12]
 80034c6:	b13d      	cbz	r5, 80034d8 <_Bfree+0x2c>
 80034c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80034ca:	686a      	ldr	r2, [r5, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034d2:	6029      	str	r1, [r5, #0]
 80034d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80034d8:	bd70      	pop	{r4, r5, r6, pc}

080034da <__multadd>:
 80034da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034de:	461f      	mov	r7, r3
 80034e0:	4606      	mov	r6, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	2300      	movs	r3, #0
 80034e6:	690d      	ldr	r5, [r1, #16]
 80034e8:	f101 0c14 	add.w	ip, r1, #20
 80034ec:	f8dc 0000 	ldr.w	r0, [ip]
 80034f0:	3301      	adds	r3, #1
 80034f2:	b281      	uxth	r1, r0
 80034f4:	fb02 7101 	mla	r1, r2, r1, r7
 80034f8:	0c00      	lsrs	r0, r0, #16
 80034fa:	0c0f      	lsrs	r7, r1, #16
 80034fc:	fb02 7000 	mla	r0, r2, r0, r7
 8003500:	b289      	uxth	r1, r1
 8003502:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003506:	429d      	cmp	r5, r3
 8003508:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800350c:	f84c 1b04 	str.w	r1, [ip], #4
 8003510:	dcec      	bgt.n	80034ec <__multadd+0x12>
 8003512:	b1d7      	cbz	r7, 800354a <__multadd+0x70>
 8003514:	68a3      	ldr	r3, [r4, #8]
 8003516:	42ab      	cmp	r3, r5
 8003518:	dc12      	bgt.n	8003540 <__multadd+0x66>
 800351a:	6861      	ldr	r1, [r4, #4]
 800351c:	4630      	mov	r0, r6
 800351e:	3101      	adds	r1, #1
 8003520:	f7ff ff90 	bl	8003444 <_Balloc>
 8003524:	4680      	mov	r8, r0
 8003526:	6922      	ldr	r2, [r4, #16]
 8003528:	f104 010c 	add.w	r1, r4, #12
 800352c:	3202      	adds	r2, #2
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	300c      	adds	r0, #12
 8003532:	f7fe fd63 	bl	8001ffc <memcpy>
 8003536:	4621      	mov	r1, r4
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff ffb7 	bl	80034ac <_Bfree>
 800353e:	4644      	mov	r4, r8
 8003540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003544:	3501      	adds	r5, #1
 8003546:	615f      	str	r7, [r3, #20]
 8003548:	6125      	str	r5, [r4, #16]
 800354a:	4620      	mov	r0, r4
 800354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003550 <__hi0bits>:
 8003550:	0c02      	lsrs	r2, r0, #16
 8003552:	0412      	lsls	r2, r2, #16
 8003554:	4603      	mov	r3, r0
 8003556:	b9b2      	cbnz	r2, 8003586 <__hi0bits+0x36>
 8003558:	0403      	lsls	r3, r0, #16
 800355a:	2010      	movs	r0, #16
 800355c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003560:	bf04      	itt	eq
 8003562:	021b      	lsleq	r3, r3, #8
 8003564:	3008      	addeq	r0, #8
 8003566:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800356a:	bf04      	itt	eq
 800356c:	011b      	lsleq	r3, r3, #4
 800356e:	3004      	addeq	r0, #4
 8003570:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003574:	bf04      	itt	eq
 8003576:	009b      	lsleq	r3, r3, #2
 8003578:	3002      	addeq	r0, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	db06      	blt.n	800358c <__hi0bits+0x3c>
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	d503      	bpl.n	800358a <__hi0bits+0x3a>
 8003582:	3001      	adds	r0, #1
 8003584:	4770      	bx	lr
 8003586:	2000      	movs	r0, #0
 8003588:	e7e8      	b.n	800355c <__hi0bits+0xc>
 800358a:	2020      	movs	r0, #32
 800358c:	4770      	bx	lr

0800358e <__lo0bits>:
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	4601      	mov	r1, r0
 8003592:	f013 0207 	ands.w	r2, r3, #7
 8003596:	d00b      	beq.n	80035b0 <__lo0bits+0x22>
 8003598:	07da      	lsls	r2, r3, #31
 800359a:	d423      	bmi.n	80035e4 <__lo0bits+0x56>
 800359c:	0798      	lsls	r0, r3, #30
 800359e:	bf49      	itett	mi
 80035a0:	085b      	lsrmi	r3, r3, #1
 80035a2:	089b      	lsrpl	r3, r3, #2
 80035a4:	2001      	movmi	r0, #1
 80035a6:	600b      	strmi	r3, [r1, #0]
 80035a8:	bf5c      	itt	pl
 80035aa:	600b      	strpl	r3, [r1, #0]
 80035ac:	2002      	movpl	r0, #2
 80035ae:	4770      	bx	lr
 80035b0:	b298      	uxth	r0, r3
 80035b2:	b9a8      	cbnz	r0, 80035e0 <__lo0bits+0x52>
 80035b4:	2010      	movs	r0, #16
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80035bc:	bf04      	itt	eq
 80035be:	0a1b      	lsreq	r3, r3, #8
 80035c0:	3008      	addeq	r0, #8
 80035c2:	071a      	lsls	r2, r3, #28
 80035c4:	bf04      	itt	eq
 80035c6:	091b      	lsreq	r3, r3, #4
 80035c8:	3004      	addeq	r0, #4
 80035ca:	079a      	lsls	r2, r3, #30
 80035cc:	bf04      	itt	eq
 80035ce:	089b      	lsreq	r3, r3, #2
 80035d0:	3002      	addeq	r0, #2
 80035d2:	07da      	lsls	r2, r3, #31
 80035d4:	d402      	bmi.n	80035dc <__lo0bits+0x4e>
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	d006      	beq.n	80035e8 <__lo0bits+0x5a>
 80035da:	3001      	adds	r0, #1
 80035dc:	600b      	str	r3, [r1, #0]
 80035de:	4770      	bx	lr
 80035e0:	4610      	mov	r0, r2
 80035e2:	e7e9      	b.n	80035b8 <__lo0bits+0x2a>
 80035e4:	2000      	movs	r0, #0
 80035e6:	4770      	bx	lr
 80035e8:	2020      	movs	r0, #32
 80035ea:	4770      	bx	lr

080035ec <__i2b>:
 80035ec:	b510      	push	{r4, lr}
 80035ee:	460c      	mov	r4, r1
 80035f0:	2101      	movs	r1, #1
 80035f2:	f7ff ff27 	bl	8003444 <_Balloc>
 80035f6:	2201      	movs	r2, #1
 80035f8:	6144      	str	r4, [r0, #20]
 80035fa:	6102      	str	r2, [r0, #16]
 80035fc:	bd10      	pop	{r4, pc}

080035fe <__multiply>:
 80035fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003602:	4614      	mov	r4, r2
 8003604:	690a      	ldr	r2, [r1, #16]
 8003606:	6923      	ldr	r3, [r4, #16]
 8003608:	4688      	mov	r8, r1
 800360a:	429a      	cmp	r2, r3
 800360c:	bfbe      	ittt	lt
 800360e:	460b      	movlt	r3, r1
 8003610:	46a0      	movlt	r8, r4
 8003612:	461c      	movlt	r4, r3
 8003614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003618:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800361c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003620:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003624:	eb07 0609 	add.w	r6, r7, r9
 8003628:	42b3      	cmp	r3, r6
 800362a:	bfb8      	it	lt
 800362c:	3101      	addlt	r1, #1
 800362e:	f7ff ff09 	bl	8003444 <_Balloc>
 8003632:	f100 0514 	add.w	r5, r0, #20
 8003636:	462b      	mov	r3, r5
 8003638:	2200      	movs	r2, #0
 800363a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800363e:	4573      	cmp	r3, lr
 8003640:	d316      	bcc.n	8003670 <__multiply+0x72>
 8003642:	f104 0214 	add.w	r2, r4, #20
 8003646:	f108 0114 	add.w	r1, r8, #20
 800364a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800364e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	9b00      	ldr	r3, [sp, #0]
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	4293      	cmp	r3, r2
 800365a:	d80c      	bhi.n	8003676 <__multiply+0x78>
 800365c:	2e00      	cmp	r6, #0
 800365e:	dd03      	ble.n	8003668 <__multiply+0x6a>
 8003660:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003664:	2b00      	cmp	r3, #0
 8003666:	d05d      	beq.n	8003724 <__multiply+0x126>
 8003668:	6106      	str	r6, [r0, #16]
 800366a:	b003      	add	sp, #12
 800366c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003670:	f843 2b04 	str.w	r2, [r3], #4
 8003674:	e7e3      	b.n	800363e <__multiply+0x40>
 8003676:	f8b2 b000 	ldrh.w	fp, [r2]
 800367a:	f1bb 0f00 	cmp.w	fp, #0
 800367e:	d023      	beq.n	80036c8 <__multiply+0xca>
 8003680:	4689      	mov	r9, r1
 8003682:	46ac      	mov	ip, r5
 8003684:	f04f 0800 	mov.w	r8, #0
 8003688:	f859 4b04 	ldr.w	r4, [r9], #4
 800368c:	f8dc a000 	ldr.w	sl, [ip]
 8003690:	b2a3      	uxth	r3, r4
 8003692:	fa1f fa8a 	uxth.w	sl, sl
 8003696:	fb0b a303 	mla	r3, fp, r3, sl
 800369a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800369e:	f8dc 4000 	ldr.w	r4, [ip]
 80036a2:	4443      	add	r3, r8
 80036a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80036a8:	fb0b 840a 	mla	r4, fp, sl, r8
 80036ac:	46e2      	mov	sl, ip
 80036ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80036b8:	454f      	cmp	r7, r9
 80036ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80036be:	f84a 3b04 	str.w	r3, [sl], #4
 80036c2:	d82b      	bhi.n	800371c <__multiply+0x11e>
 80036c4:	f8cc 8004 	str.w	r8, [ip, #4]
 80036c8:	9b01      	ldr	r3, [sp, #4]
 80036ca:	3204      	adds	r2, #4
 80036cc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80036d0:	f1ba 0f00 	cmp.w	sl, #0
 80036d4:	d020      	beq.n	8003718 <__multiply+0x11a>
 80036d6:	4689      	mov	r9, r1
 80036d8:	46a8      	mov	r8, r5
 80036da:	f04f 0b00 	mov.w	fp, #0
 80036de:	682b      	ldr	r3, [r5, #0]
 80036e0:	f8b9 c000 	ldrh.w	ip, [r9]
 80036e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	fb0a 440c 	mla	r4, sl, ip, r4
 80036ee:	46c4      	mov	ip, r8
 80036f0:	445c      	add	r4, fp
 80036f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80036f6:	f84c 3b04 	str.w	r3, [ip], #4
 80036fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80036fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	fb0a b303 	mla	r3, sl, r3, fp
 8003708:	454f      	cmp	r7, r9
 800370a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800370e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003712:	d805      	bhi.n	8003720 <__multiply+0x122>
 8003714:	f8c8 3004 	str.w	r3, [r8, #4]
 8003718:	3504      	adds	r5, #4
 800371a:	e79b      	b.n	8003654 <__multiply+0x56>
 800371c:	46d4      	mov	ip, sl
 800371e:	e7b3      	b.n	8003688 <__multiply+0x8a>
 8003720:	46e0      	mov	r8, ip
 8003722:	e7dd      	b.n	80036e0 <__multiply+0xe2>
 8003724:	3e01      	subs	r6, #1
 8003726:	e799      	b.n	800365c <__multiply+0x5e>

08003728 <__pow5mult>:
 8003728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800372c:	4615      	mov	r5, r2
 800372e:	f012 0203 	ands.w	r2, r2, #3
 8003732:	4606      	mov	r6, r0
 8003734:	460f      	mov	r7, r1
 8003736:	d007      	beq.n	8003748 <__pow5mult+0x20>
 8003738:	4c21      	ldr	r4, [pc, #132]	; (80037c0 <__pow5mult+0x98>)
 800373a:	3a01      	subs	r2, #1
 800373c:	2300      	movs	r3, #0
 800373e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003742:	f7ff feca 	bl	80034da <__multadd>
 8003746:	4607      	mov	r7, r0
 8003748:	10ad      	asrs	r5, r5, #2
 800374a:	d035      	beq.n	80037b8 <__pow5mult+0x90>
 800374c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800374e:	b93c      	cbnz	r4, 8003760 <__pow5mult+0x38>
 8003750:	2010      	movs	r0, #16
 8003752:	f7ff fe6f 	bl	8003434 <malloc>
 8003756:	6270      	str	r0, [r6, #36]	; 0x24
 8003758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800375c:	6004      	str	r4, [r0, #0]
 800375e:	60c4      	str	r4, [r0, #12]
 8003760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003768:	b94c      	cbnz	r4, 800377e <__pow5mult+0x56>
 800376a:	f240 2171 	movw	r1, #625	; 0x271
 800376e:	4630      	mov	r0, r6
 8003770:	f7ff ff3c 	bl	80035ec <__i2b>
 8003774:	2300      	movs	r3, #0
 8003776:	4604      	mov	r4, r0
 8003778:	f8c8 0008 	str.w	r0, [r8, #8]
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	f04f 0800 	mov.w	r8, #0
 8003782:	07eb      	lsls	r3, r5, #31
 8003784:	d50a      	bpl.n	800379c <__pow5mult+0x74>
 8003786:	4639      	mov	r1, r7
 8003788:	4622      	mov	r2, r4
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff ff37 	bl	80035fe <__multiply>
 8003790:	4681      	mov	r9, r0
 8003792:	4639      	mov	r1, r7
 8003794:	4630      	mov	r0, r6
 8003796:	f7ff fe89 	bl	80034ac <_Bfree>
 800379a:	464f      	mov	r7, r9
 800379c:	106d      	asrs	r5, r5, #1
 800379e:	d00b      	beq.n	80037b8 <__pow5mult+0x90>
 80037a0:	6820      	ldr	r0, [r4, #0]
 80037a2:	b938      	cbnz	r0, 80037b4 <__pow5mult+0x8c>
 80037a4:	4622      	mov	r2, r4
 80037a6:	4621      	mov	r1, r4
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff ff28 	bl	80035fe <__multiply>
 80037ae:	6020      	str	r0, [r4, #0]
 80037b0:	f8c0 8000 	str.w	r8, [r0]
 80037b4:	4604      	mov	r4, r0
 80037b6:	e7e4      	b.n	8003782 <__pow5mult+0x5a>
 80037b8:	4638      	mov	r0, r7
 80037ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037be:	bf00      	nop
 80037c0:	08003cd8 	.word	0x08003cd8

080037c4 <__lshift>:
 80037c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	460c      	mov	r4, r1
 80037ca:	4607      	mov	r7, r0
 80037cc:	4616      	mov	r6, r2
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80037d4:	eb0a 0903 	add.w	r9, sl, r3
 80037d8:	6849      	ldr	r1, [r1, #4]
 80037da:	68a3      	ldr	r3, [r4, #8]
 80037dc:	f109 0501 	add.w	r5, r9, #1
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	db32      	blt.n	800384a <__lshift+0x86>
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff fe2d 	bl	8003444 <_Balloc>
 80037ea:	2300      	movs	r3, #0
 80037ec:	4680      	mov	r8, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	f100 0114 	add.w	r1, r0, #20
 80037f4:	4553      	cmp	r3, sl
 80037f6:	db2b      	blt.n	8003850 <__lshift+0x8c>
 80037f8:	6920      	ldr	r0, [r4, #16]
 80037fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80037fe:	f104 0314 	add.w	r3, r4, #20
 8003802:	f016 021f 	ands.w	r2, r6, #31
 8003806:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800380a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800380e:	d025      	beq.n	800385c <__lshift+0x98>
 8003810:	2000      	movs	r0, #0
 8003812:	f1c2 0e20 	rsb	lr, r2, #32
 8003816:	468a      	mov	sl, r1
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	4096      	lsls	r6, r2
 800381c:	4330      	orrs	r0, r6
 800381e:	f84a 0b04 	str.w	r0, [sl], #4
 8003822:	f853 0b04 	ldr.w	r0, [r3], #4
 8003826:	459c      	cmp	ip, r3
 8003828:	fa20 f00e 	lsr.w	r0, r0, lr
 800382c:	d814      	bhi.n	8003858 <__lshift+0x94>
 800382e:	6048      	str	r0, [r1, #4]
 8003830:	b108      	cbz	r0, 8003836 <__lshift+0x72>
 8003832:	f109 0502 	add.w	r5, r9, #2
 8003836:	3d01      	subs	r5, #1
 8003838:	4638      	mov	r0, r7
 800383a:	f8c8 5010 	str.w	r5, [r8, #16]
 800383e:	4621      	mov	r1, r4
 8003840:	f7ff fe34 	bl	80034ac <_Bfree>
 8003844:	4640      	mov	r0, r8
 8003846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800384a:	3101      	adds	r1, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	e7c7      	b.n	80037e0 <__lshift+0x1c>
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003854:	3301      	adds	r3, #1
 8003856:	e7cd      	b.n	80037f4 <__lshift+0x30>
 8003858:	4651      	mov	r1, sl
 800385a:	e7dc      	b.n	8003816 <__lshift+0x52>
 800385c:	3904      	subs	r1, #4
 800385e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003862:	459c      	cmp	ip, r3
 8003864:	f841 2f04 	str.w	r2, [r1, #4]!
 8003868:	d8f9      	bhi.n	800385e <__lshift+0x9a>
 800386a:	e7e4      	b.n	8003836 <__lshift+0x72>

0800386c <__mcmp>:
 800386c:	6903      	ldr	r3, [r0, #16]
 800386e:	690a      	ldr	r2, [r1, #16]
 8003870:	b530      	push	{r4, r5, lr}
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	d10c      	bne.n	8003890 <__mcmp+0x24>
 8003876:	0092      	lsls	r2, r2, #2
 8003878:	3014      	adds	r0, #20
 800387a:	3114      	adds	r1, #20
 800387c:	1884      	adds	r4, r0, r2
 800387e:	4411      	add	r1, r2
 8003880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003888:	4295      	cmp	r5, r2
 800388a:	d003      	beq.n	8003894 <__mcmp+0x28>
 800388c:	d305      	bcc.n	800389a <__mcmp+0x2e>
 800388e:	2301      	movs	r3, #1
 8003890:	4618      	mov	r0, r3
 8003892:	bd30      	pop	{r4, r5, pc}
 8003894:	42a0      	cmp	r0, r4
 8003896:	d3f3      	bcc.n	8003880 <__mcmp+0x14>
 8003898:	e7fa      	b.n	8003890 <__mcmp+0x24>
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e7f7      	b.n	8003890 <__mcmp+0x24>

080038a0 <__mdiff>:
 80038a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	460d      	mov	r5, r1
 80038a6:	4607      	mov	r7, r0
 80038a8:	4611      	mov	r1, r2
 80038aa:	4628      	mov	r0, r5
 80038ac:	4614      	mov	r4, r2
 80038ae:	f7ff ffdd 	bl	800386c <__mcmp>
 80038b2:	1e06      	subs	r6, r0, #0
 80038b4:	d108      	bne.n	80038c8 <__mdiff+0x28>
 80038b6:	4631      	mov	r1, r6
 80038b8:	4638      	mov	r0, r7
 80038ba:	f7ff fdc3 	bl	8003444 <_Balloc>
 80038be:	2301      	movs	r3, #1
 80038c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	bfa4      	itt	ge
 80038ca:	4623      	movge	r3, r4
 80038cc:	462c      	movge	r4, r5
 80038ce:	4638      	mov	r0, r7
 80038d0:	6861      	ldr	r1, [r4, #4]
 80038d2:	bfa6      	itte	ge
 80038d4:	461d      	movge	r5, r3
 80038d6:	2600      	movge	r6, #0
 80038d8:	2601      	movlt	r6, #1
 80038da:	f7ff fdb3 	bl	8003444 <_Balloc>
 80038de:	f04f 0e00 	mov.w	lr, #0
 80038e2:	60c6      	str	r6, [r0, #12]
 80038e4:	692b      	ldr	r3, [r5, #16]
 80038e6:	6926      	ldr	r6, [r4, #16]
 80038e8:	f104 0214 	add.w	r2, r4, #20
 80038ec:	f105 0914 	add.w	r9, r5, #20
 80038f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80038f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80038f8:	f100 0114 	add.w	r1, r0, #20
 80038fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8003900:	f859 5b04 	ldr.w	r5, [r9], #4
 8003904:	fa1f f38a 	uxth.w	r3, sl
 8003908:	4473      	add	r3, lr
 800390a:	b2ac      	uxth	r4, r5
 800390c:	1b1b      	subs	r3, r3, r4
 800390e:	0c2c      	lsrs	r4, r5, #16
 8003910:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003914:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003918:	b29b      	uxth	r3, r3
 800391a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800391e:	45c8      	cmp	r8, r9
 8003920:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003924:	4694      	mov	ip, r2
 8003926:	f841 4b04 	str.w	r4, [r1], #4
 800392a:	d8e7      	bhi.n	80038fc <__mdiff+0x5c>
 800392c:	45bc      	cmp	ip, r7
 800392e:	d304      	bcc.n	800393a <__mdiff+0x9a>
 8003930:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003934:	b183      	cbz	r3, 8003958 <__mdiff+0xb8>
 8003936:	6106      	str	r6, [r0, #16]
 8003938:	e7c4      	b.n	80038c4 <__mdiff+0x24>
 800393a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800393e:	b2a2      	uxth	r2, r4
 8003940:	4472      	add	r2, lr
 8003942:	1413      	asrs	r3, r2, #16
 8003944:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003948:	b292      	uxth	r2, r2
 800394a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800394e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003952:	f841 2b04 	str.w	r2, [r1], #4
 8003956:	e7e9      	b.n	800392c <__mdiff+0x8c>
 8003958:	3e01      	subs	r6, #1
 800395a:	e7e9      	b.n	8003930 <__mdiff+0x90>

0800395c <__d2b>:
 800395c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003960:	461c      	mov	r4, r3
 8003962:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003966:	2101      	movs	r1, #1
 8003968:	4690      	mov	r8, r2
 800396a:	f7ff fd6b 	bl	8003444 <_Balloc>
 800396e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003972:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003976:	4607      	mov	r7, r0
 8003978:	bb34      	cbnz	r4, 80039c8 <__d2b+0x6c>
 800397a:	9201      	str	r2, [sp, #4]
 800397c:	f1b8 0200 	subs.w	r2, r8, #0
 8003980:	d027      	beq.n	80039d2 <__d2b+0x76>
 8003982:	a802      	add	r0, sp, #8
 8003984:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003988:	f7ff fe01 	bl	800358e <__lo0bits>
 800398c:	9900      	ldr	r1, [sp, #0]
 800398e:	b1f0      	cbz	r0, 80039ce <__d2b+0x72>
 8003990:	9a01      	ldr	r2, [sp, #4]
 8003992:	f1c0 0320 	rsb	r3, r0, #32
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	430b      	orrs	r3, r1
 800399c:	40c2      	lsrs	r2, r0
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	9201      	str	r2, [sp, #4]
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2102      	movne	r1, #2
 80039aa:	2101      	moveq	r1, #1
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	6139      	str	r1, [r7, #16]
 80039b0:	b1c4      	cbz	r4, 80039e4 <__d2b+0x88>
 80039b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80039b6:	4404      	add	r4, r0
 80039b8:	6034      	str	r4, [r6, #0]
 80039ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80039be:	6028      	str	r0, [r5, #0]
 80039c0:	4638      	mov	r0, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80039cc:	e7d5      	b.n	800397a <__d2b+0x1e>
 80039ce:	6179      	str	r1, [r7, #20]
 80039d0:	e7e7      	b.n	80039a2 <__d2b+0x46>
 80039d2:	a801      	add	r0, sp, #4
 80039d4:	f7ff fddb 	bl	800358e <__lo0bits>
 80039d8:	2101      	movs	r1, #1
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	6139      	str	r1, [r7, #16]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	3020      	adds	r0, #32
 80039e2:	e7e5      	b.n	80039b0 <__d2b+0x54>
 80039e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80039e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80039ec:	6030      	str	r0, [r6, #0]
 80039ee:	6918      	ldr	r0, [r3, #16]
 80039f0:	f7ff fdae 	bl	8003550 <__hi0bits>
 80039f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80039f8:	e7e1      	b.n	80039be <__d2b+0x62>

080039fa <_calloc_r>:
 80039fa:	b538      	push	{r3, r4, r5, lr}
 80039fc:	fb02 f401 	mul.w	r4, r2, r1
 8003a00:	4621      	mov	r1, r4
 8003a02:	f000 f809 	bl	8003a18 <_malloc_r>
 8003a06:	4605      	mov	r5, r0
 8003a08:	b118      	cbz	r0, 8003a12 <_calloc_r+0x18>
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f7fe fb00 	bl	8002012 <memset>
 8003a12:	4628      	mov	r0, r5
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
	...

08003a18 <_malloc_r>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	1ccd      	adds	r5, r1, #3
 8003a1c:	f025 0503 	bic.w	r5, r5, #3
 8003a20:	3508      	adds	r5, #8
 8003a22:	2d0c      	cmp	r5, #12
 8003a24:	bf38      	it	cc
 8003a26:	250c      	movcc	r5, #12
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	db01      	blt.n	8003a32 <_malloc_r+0x1a>
 8003a2e:	42a9      	cmp	r1, r5
 8003a30:	d903      	bls.n	8003a3a <_malloc_r+0x22>
 8003a32:	230c      	movs	r3, #12
 8003a34:	6033      	str	r3, [r6, #0]
 8003a36:	2000      	movs	r0, #0
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	f000 f869 	bl	8003b10 <__malloc_lock>
 8003a3e:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <_malloc_r+0xac>)
 8003a40:	6814      	ldr	r4, [r2, #0]
 8003a42:	4621      	mov	r1, r4
 8003a44:	b991      	cbnz	r1, 8003a6c <_malloc_r+0x54>
 8003a46:	4c20      	ldr	r4, [pc, #128]	; (8003ac8 <_malloc_r+0xb0>)
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	b91b      	cbnz	r3, 8003a54 <_malloc_r+0x3c>
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f83d 	bl	8003acc <_sbrk_r>
 8003a52:	6020      	str	r0, [r4, #0]
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f838 	bl	8003acc <_sbrk_r>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d124      	bne.n	8003aaa <_malloc_r+0x92>
 8003a60:	230c      	movs	r3, #12
 8003a62:	4630      	mov	r0, r6
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	f000 f854 	bl	8003b12 <__malloc_unlock>
 8003a6a:	e7e4      	b.n	8003a36 <_malloc_r+0x1e>
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	1b5b      	subs	r3, r3, r5
 8003a70:	d418      	bmi.n	8003aa4 <_malloc_r+0x8c>
 8003a72:	2b0b      	cmp	r3, #11
 8003a74:	d90f      	bls.n	8003a96 <_malloc_r+0x7e>
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	18cc      	adds	r4, r1, r3
 8003a7a:	50cd      	str	r5, [r1, r3]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f848 	bl	8003b12 <__malloc_unlock>
 8003a82:	f104 000b 	add.w	r0, r4, #11
 8003a86:	1d23      	adds	r3, r4, #4
 8003a88:	f020 0007 	bic.w	r0, r0, #7
 8003a8c:	1ac3      	subs	r3, r0, r3
 8003a8e:	d0d3      	beq.n	8003a38 <_malloc_r+0x20>
 8003a90:	425a      	negs	r2, r3
 8003a92:	50e2      	str	r2, [r4, r3]
 8003a94:	e7d0      	b.n	8003a38 <_malloc_r+0x20>
 8003a96:	684b      	ldr	r3, [r1, #4]
 8003a98:	428c      	cmp	r4, r1
 8003a9a:	bf16      	itet	ne
 8003a9c:	6063      	strne	r3, [r4, #4]
 8003a9e:	6013      	streq	r3, [r2, #0]
 8003aa0:	460c      	movne	r4, r1
 8003aa2:	e7eb      	b.n	8003a7c <_malloc_r+0x64>
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6849      	ldr	r1, [r1, #4]
 8003aa8:	e7cc      	b.n	8003a44 <_malloc_r+0x2c>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d005      	beq.n	8003ac0 <_malloc_r+0xa8>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f808 	bl	8003acc <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0cf      	beq.n	8003a60 <_malloc_r+0x48>
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	e7db      	b.n	8003a7c <_malloc_r+0x64>
 8003ac4:	2000028c 	.word	0x2000028c
 8003ac8:	20000290 	.word	0x20000290

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4c05      	ldr	r4, [pc, #20]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	f7fd fb0c 	bl	80010f4 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	2000036c 	.word	0x2000036c

08003aec <__ascii_mbtowc>:
 8003aec:	b082      	sub	sp, #8
 8003aee:	b901      	cbnz	r1, 8003af2 <__ascii_mbtowc+0x6>
 8003af0:	a901      	add	r1, sp, #4
 8003af2:	b142      	cbz	r2, 8003b06 <__ascii_mbtowc+0x1a>
 8003af4:	b14b      	cbz	r3, 8003b0a <__ascii_mbtowc+0x1e>
 8003af6:	7813      	ldrb	r3, [r2, #0]
 8003af8:	600b      	str	r3, [r1, #0]
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	1c10      	adds	r0, r2, #0
 8003afe:	bf18      	it	ne
 8003b00:	2001      	movne	r0, #1
 8003b02:	b002      	add	sp, #8
 8003b04:	4770      	bx	lr
 8003b06:	4610      	mov	r0, r2
 8003b08:	e7fb      	b.n	8003b02 <__ascii_mbtowc+0x16>
 8003b0a:	f06f 0001 	mvn.w	r0, #1
 8003b0e:	e7f8      	b.n	8003b02 <__ascii_mbtowc+0x16>

08003b10 <__malloc_lock>:
 8003b10:	4770      	bx	lr

08003b12 <__malloc_unlock>:
 8003b12:	4770      	bx	lr

08003b14 <__ascii_wctomb>:
 8003b14:	b149      	cbz	r1, 8003b2a <__ascii_wctomb+0x16>
 8003b16:	2aff      	cmp	r2, #255	; 0xff
 8003b18:	bf8b      	itete	hi
 8003b1a:	238a      	movhi	r3, #138	; 0x8a
 8003b1c:	700a      	strbls	r2, [r1, #0]
 8003b1e:	6003      	strhi	r3, [r0, #0]
 8003b20:	2001      	movls	r0, #1
 8003b22:	bf88      	it	hi
 8003b24:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b28:	4770      	bx	lr
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	4770      	bx	lr
	...

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
