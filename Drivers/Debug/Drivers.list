
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000b74  08000b74  00010b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bbc  08000bbc  00010bc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000bbc  08000bbc  00010bc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bbc  08000bc4  00010bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bbc  08000bbc  00010bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000000  08000bc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08000bc4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c7d  00000000  00000000  00010bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c86  00000000  00000000  0001586a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b94  00000000  00000000  000164f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000208  00000000  00000000  00017088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a0  00000000  00000000  00017290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000028ff  00000000  00000000  00017430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002707  00000000  00000000  00019d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009ed8  00000000  00000000  0001c436  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002630e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000660  00000000  00000000  0002638c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b5c 	.word	0x08000b5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b5c 	.word	0x08000b5c

08000170 <GPS_ReadData>:
#define GPS_BUFFER_SIZE  100

char gps_buffer[GPS_BUFFER_SIZE];
int gps_index = 0;

void GPS_ReadData(USART_typedef* USARTx) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    uint16_t data;

    MCAL_UART_ReceiveData(USARTx, &data, Enable);
 8000178:	f107 030e 	add.w	r3, r7, #14
 800017c:	2200      	movs	r2, #0
 800017e:	4619      	mov	r1, r3
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f000 fbfd 	bl	8000980 <MCAL_UART_ReceiveData>

    if (gps_index < GPS_BUFFER_SIZE) {
 8000186:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <GPS_ReadData+0x48>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	2b63      	cmp	r3, #99	; 0x63
 800018c:	dc08      	bgt.n	80001a0 <GPS_ReadData+0x30>
        gps_buffer[gps_index++] = (char)data;
 800018e:	89f8      	ldrh	r0, [r7, #14]
 8000190:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <GPS_ReadData+0x48>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	1c5a      	adds	r2, r3, #1
 8000196:	4908      	ldr	r1, [pc, #32]	; (80001b8 <GPS_ReadData+0x48>)
 8000198:	600a      	str	r2, [r1, #0]
 800019a:	b2c1      	uxtb	r1, r0
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPS_ReadData+0x4c>)
 800019e:	54d1      	strb	r1, [r2, r3]
    }

    if (gps_index >= GPS_BUFFER_SIZE) {
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <GPS_ReadData+0x48>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b63      	cmp	r3, #99	; 0x63
 80001a6:	dd02      	ble.n	80001ae <GPS_ReadData+0x3e>
        gps_index = 0;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <GPS_ReadData+0x48>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
    }
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	20000024 	.word	0x20000024

080001c0 <GPS_ParseData>:

void GPS_ParseData(void) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
    if (strstr(gps_buffer, "$GPRMC") != NULL) {
 80001c6:	490a      	ldr	r1, [pc, #40]	; (80001f0 <GPS_ParseData+0x30>)
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <GPS_ParseData+0x34>)
 80001ca:	f000 fcad 	bl	8000b28 <strstr>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d009      	beq.n	80001e8 <GPS_ParseData+0x28>
        char* latitude = strstr(gps_buffer, "Latitude: ");
 80001d4:	4908      	ldr	r1, [pc, #32]	; (80001f8 <GPS_ParseData+0x38>)
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <GPS_ParseData+0x34>)
 80001d8:	f000 fca6 	bl	8000b28 <strstr>
 80001dc:	6078      	str	r0, [r7, #4]
        char* longitude = strstr(gps_buffer, "Longitude: ");
 80001de:	4907      	ldr	r1, [pc, #28]	; (80001fc <GPS_ParseData+0x3c>)
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <GPS_ParseData+0x34>)
 80001e2:	f000 fca1 	bl	8000b28 <strstr>
 80001e6:	6038      	str	r0, [r7, #0]
    }
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	08000b74 	.word	0x08000b74
 80001f4:	20000024 	.word	0x20000024
 80001f8:	08000b7c 	.word	0x08000b7c
 80001fc:	08000b88 	.word	0x08000b88

08000200 <GPS_Init>:

void GPS_Init(USART_typedef* USARTx) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    USART_Config gps_config;
    gps_config.USART_Mode = USART_MODE_RX;
 8000208:	2304      	movs	r3, #4
 800020a:	733b      	strb	r3, [r7, #12]
    gps_config.Payload_Length = USART_8_DATA_Bits;
 800020c:	2300      	movs	r3, #0
 800020e:	753b      	strb	r3, [r7, #20]
    gps_config.Parity = USART_Parity_Type_None;
 8000210:	2300      	movs	r3, #0
 8000212:	757b      	strb	r3, [r7, #21]
    gps_config.Stop_bits = USART_STOP_Bits_one;
 8000214:	2300      	movs	r3, #0
 8000216:	75bb      	strb	r3, [r7, #22]
    gps_config.Flow_Control = USART_FLOW_CONTROL_None	;
 8000218:	2300      	movs	r3, #0
 800021a:	75fb      	strb	r3, [r7, #23]
    gps_config.Baud_Rate = 9600;
 800021c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000220:	613b      	str	r3, [r7, #16]
    gps_config.IRQ_Enable = USART_IRQ_Disable;
 8000222:	2300      	movs	r3, #0
 8000224:	763b      	strb	r3, [r7, #24]

    MCAL_UART_Init(USARTx, &gps_config);
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	4619      	mov	r1, r3
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f000 fae5 	bl	80007fc <MCAL_UART_Init>
    MCAL_UART_GPIO_Set_Pins(USARTx);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 fbd2 	bl	80009dc <MCAL_UART_GPIO_Set_Pins>
}
 8000238:	bf00      	nop
 800023a:	3720      	adds	r7, #32
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <main>:
    }
}


int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
    GPS_Init(USART1);
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <main+0x2c>)
 8000248:	f7ff ffda 	bl	8000200 <GPS_Init>

    while (1)
    {
        GPS_ReadData(USART1);
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <main+0x2c>)
 800024e:	f7ff ff8f 	bl	8000170 <GPS_ReadData>
        GPS_ParseData();
 8000252:	f7ff ffb5 	bl	80001c0 <GPS_ParseData>

        for (volatile int i = 0; i < 1000000; i++);
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e002      	b.n	8000262 <main+0x22>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <main+0x30>)
 8000266:	4293      	cmp	r3, r2
 8000268:	ddf8      	ble.n	800025c <main+0x1c>
        GPS_ReadData(USART1);
 800026a:	e7ef      	b.n	800024c <main+0xc>
 800026c:	40013800 	.word	0x40013800
 8000270:	000f423f 	.word	0x000f423f

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 fc1d 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffcb 	bl	8000240 <main>

080002aa <LoopForever>:

LoopForever:
    b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000bc4 	.word	0x08000bc4
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	200000c8 	.word	0x200000c8

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <EXTI0_IRQHandler>:
 * =============================================
 *
 */

void EXTI0_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<0);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI0_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI0_IRQHandler+0x1c>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[0]();
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI0_IRQHandler+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000088 	.word	0x20000088

080002ec <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<1);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI1_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI1_IRQHandler+0x1c>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[1]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI1_IRQHandler+0x20>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4798      	blx	r3

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000088 	.word	0x20000088

08000310 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<2);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI2_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI2_IRQHandler+0x1c>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[2]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI2_IRQHandler+0x20>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4798      	blx	r3

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000088 	.word	0x20000088

08000334 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<3);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI3_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI3_IRQHandler+0x1c>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[3]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI3_IRQHandler+0x20>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4798      	blx	r3

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000088 	.word	0x20000088

08000358 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	//Clearing PR to avoid interrupt overhead
	EXTI->PR |= (1<<4);
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <EXTI4_IRQHandler+0x1c>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <EXTI4_IRQHandler+0x1c>)
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6153      	str	r3, [r2, #20]
	GPTF_IRQ_Callback[4]();
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <EXTI4_IRQHandler+0x20>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4798      	blx	r3


}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010400 	.word	0x40010400
 8000378:	20000088 	.word	0x20000088

0800037c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<7)){EXTI->PR | (1<<7);    GPTF_IRQ_Callback[7]();}
	if(EXTI->PR & (1<<8)){EXTI->PR | (1<<8);    GPTF_IRQ_Callback[8]();}
	if(EXTI->PR & (1<<9)){EXTI->PR | (1<<9);    GPTF_IRQ_Callback[9]();}*/


	if(EXTI->PR & 1<< 5)
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	2b00      	cmp	r3, #0
 800038a:	d008      	beq.n	800039e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a22      	ldr	r2, [pc, #136]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[5]();
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 6)
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d008      	beq.n	80003bc <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a1b      	ldr	r2, [pc, #108]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[6]();
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 7)
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d008      	beq.n	80003da <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[7]();
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 8)
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d008      	beq.n	80003f8 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0c      	ldr	r2, [pc, #48]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[8]();
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003f4:	6a1b      	ldr	r3, [r3, #32]
 80003f6:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 9)
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000400:	2b00      	cmp	r3, #0
 8000402:	d008      	beq.n	8000416 <EXTI9_5_IRQHandler+0x9a>
		{
			EXTI->PR |= 1<<9;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6153      	str	r3, [r2, #20]
			GPTF_IRQ_Callback[9]();
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4798      	blx	r3
		}




}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010400 	.word	0x40010400
 8000420:	20000088 	.word	0x20000088

08000424 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

*/



	if(EXTI->PR & 1<< 10)
 8000428:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a29      	ldr	r2, [pc, #164]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 800043a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043e:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[10]();
 8000440:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 8000442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000444:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 11)
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045c:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[11]();
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 8000460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000462:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 12)
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047a:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[12]();
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 13)
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d008      	beq.n	80004a0 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 8000494:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000498:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[13]();
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	4798      	blx	r3

	}


	if(EXTI->PR & 1<< 14)
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d008      	beq.n	80004be <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[14]();
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 80004ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004bc:	4798      	blx	r3

	}



	if(EXTI->PR & 1<< 15)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d008      	beq.n	80004dc <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <EXTI15_10_IRQHandler+0xbc>)
 80004d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d4:	6153      	str	r3, [r2, #20]
		GPTF_IRQ_Callback[15]();
 80004d6:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <EXTI15_10_IRQHandler+0xc0>)
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	4798      	blx	r3

	}


}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010400 	.word	0x40010400
 80004e4:	20000088 	.word	0x20000088

080004e8 <Get_CRLH_Position>:



#include "stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t	PinNumber){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]


	switch(PinNumber){
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	2b80      	cmp	r3, #128	; 0x80
 80004f6:	d042      	beq.n	800057e <Get_CRLH_Position+0x96>
 80004f8:	2b80      	cmp	r3, #128	; 0x80
 80004fa:	dc11      	bgt.n	8000520 <Get_CRLH_Position+0x38>
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d036      	beq.n	800056e <Get_CRLH_Position+0x86>
 8000500:	2b08      	cmp	r3, #8
 8000502:	dc06      	bgt.n	8000512 <Get_CRLH_Position+0x2a>
 8000504:	2b02      	cmp	r3, #2
 8000506:	d02e      	beq.n	8000566 <Get_CRLH_Position+0x7e>
 8000508:	2b04      	cmp	r3, #4
 800050a:	d02e      	beq.n	800056a <Get_CRLH_Position+0x82>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d028      	beq.n	8000562 <Get_CRLH_Position+0x7a>
 8000510:	e047      	b.n	80005a2 <Get_CRLH_Position+0xba>
 8000512:	2b20      	cmp	r3, #32
 8000514:	d02f      	beq.n	8000576 <Get_CRLH_Position+0x8e>
 8000516:	2b40      	cmp	r3, #64	; 0x40
 8000518:	d02f      	beq.n	800057a <Get_CRLH_Position+0x92>
 800051a:	2b10      	cmp	r3, #16
 800051c:	d029      	beq.n	8000572 <Get_CRLH_Position+0x8a>
 800051e:	e040      	b.n	80005a2 <Get_CRLH_Position+0xba>
 8000520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000524:	d033      	beq.n	800058e <Get_CRLH_Position+0xa6>
 8000526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800052a:	dc09      	bgt.n	8000540 <Get_CRLH_Position+0x58>
 800052c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000530:	d029      	beq.n	8000586 <Get_CRLH_Position+0x9e>
 8000532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000536:	d028      	beq.n	800058a <Get_CRLH_Position+0xa2>
 8000538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800053c:	d021      	beq.n	8000582 <Get_CRLH_Position+0x9a>
 800053e:	e030      	b.n	80005a2 <Get_CRLH_Position+0xba>
 8000540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000544:	d027      	beq.n	8000596 <Get_CRLH_Position+0xae>
 8000546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054a:	dc03      	bgt.n	8000554 <Get_CRLH_Position+0x6c>
 800054c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000550:	d01f      	beq.n	8000592 <Get_CRLH_Position+0xaa>
 8000552:	e026      	b.n	80005a2 <Get_CRLH_Position+0xba>
 8000554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000558:	d01f      	beq.n	800059a <Get_CRLH_Position+0xb2>
 800055a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800055e:	d01e      	beq.n	800059e <Get_CRLH_Position+0xb6>
 8000560:	e01f      	b.n	80005a2 <Get_CRLH_Position+0xba>


	case GPIO_PINS_0:
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e01e      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_1:
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e01c      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_2:
		return 8;
 800056a:	2308      	movs	r3, #8
 800056c:	e01a      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_3:
		return 12;
 800056e:	230c      	movs	r3, #12
 8000570:	e018      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_4:
		return 16;
 8000572:	2310      	movs	r3, #16
 8000574:	e016      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_5:
		return 20;
 8000576:	2314      	movs	r3, #20
 8000578:	e014      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_6:
		return 24;
 800057a:	2318      	movs	r3, #24
 800057c:	e012      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_7:
		return 28;
 800057e:	231c      	movs	r3, #28
 8000580:	e010      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_8:
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e00e      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_9:
		return 4;
 8000586:	2304      	movs	r3, #4
 8000588:	e00c      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_10:
		return 8;
 800058a:	2308      	movs	r3, #8
 800058c:	e00a      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_11:
		return 12;
 800058e:	230c      	movs	r3, #12
 8000590:	e008      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_12:
		return 16;
 8000592:	2310      	movs	r3, #16
 8000594:	e006      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_13:
		return 20;
 8000596:	2314      	movs	r3, #20
 8000598:	e004      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_14:
		return 24;
 800059a:	2318      	movs	r3, #24
 800059c:	e002      	b.n	80005a4 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_15:
		return 28;
 800059e:	231c      	movs	r3, #28
 80005a0:	e000      	b.n	80005a4 <Get_CRLH_Position+0xbc>


	}


	return 0;
 80005a2:	2300      	movs	r3, #0




}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <MCAL_GPIO_INIT>:





void MCAL_GPIO_INIT (GPIO_typedef* GPIOx, GPIO_PinConfig_t* PinConfig){
 80005ae:	b590      	push	{r4, r7, lr}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) : Configure pins from 0>>>7
	//Port configuration register low (GPIOx_CRH) : Configure pins from 8>>>15
	volatile	uint32_t* Config_Register = NULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0 ;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	// 0->7 CRL ... 8->15 CRH
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PINS_8)?	&GPIOx->CRL : &GPIOx->CRH;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d801      	bhi.n	80005cc <MCAL_GPIO_INIT+0x1e>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	e001      	b.n	80005d0 <MCAL_GPIO_INIT+0x22>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
	//clear clear CNF8[1:0] MODE8[1:0]
	(*Config_Register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff86 	bl	80004e8 <Get_CRLH_Position>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	230f      	movs	r3, #15
 80005e2:	4093      	lsls	r3, r2
 80005e4:	43da      	mvns	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	401a      	ands	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	601a      	str	r2, [r3, #0]

	//if pin configured as output
	if((PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Output_PP)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_OD)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Alternate_Output_PP))
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d00b      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d007      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	2b07      	cmp	r3, #7
 8000606:	d003      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	2b06      	cmp	r3, #6
 800060e:	d11c      	bne.n	800064a <MCAL_GPIO_INIT+0x9c>
	{
		//(Mode - 4) = true configuration position in data sheet --> see @ref GPIO_CONFIG_define and datasheet difference
		Pin_config = ( ( ( (PinConfig->GPIO_Pin_Config - 4 ) << 2 ) | (PinConfig->GPIO_Mode_config)) & 0x0F );
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	3b04      	subs	r3, #4
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	b25a      	sxtb	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b25b      	sxtb	r3, r3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	73fb      	strb	r3, [r7, #15]
		(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800062c:	7bfc      	ldrb	r4, [r7, #15]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff58 	bl	80004e8 <Get_CRLH_Position>
 8000638:	4603      	mov	r3, r0
 800063a:	fa04 f203 	lsl.w	r2, r4, r3
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	431a      	orrs	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e076      	b.n	8000738 <MCAL_GPIO_INIT+0x18a>

	//if pin configured as input
	else
	{

		if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Floating_Input) || (PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Analog))
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d003      	beq.n	800065a <MCAL_GPIO_INIT+0xac>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d115      	bne.n	8000686 <MCAL_GPIO_INIT+0xd8>
		{
			Pin_config = ((((PinConfig -> GPIO_Pin_Config) << 2) | (0)) & 0x0F );
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000668:	7bfc      	ldrb	r4, [r7, #15]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff3a 	bl	80004e8 <Get_CRLH_Position>
 8000674:	4603      	mov	r3, r0
 8000676:	fa04 f203 	lsl.w	r2, r4, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	431a      	orrs	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e058      	b.n	8000738 <MCAL_GPIO_INIT+0x18a>

		}
		else if((PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PU)||(PinConfig->GPIO_Pin_Config  == GPIO_CONFIG_Input_PD ))
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d003      	beq.n	8000696 <MCAL_GPIO_INIT+0xe8>
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d135      	bne.n	8000702 <MCAL_GPIO_INIT+0x154>
		{
			switch(PinConfig->GPIO_Pin_Config)
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d002      	beq.n	80006a4 <MCAL_GPIO_INIT+0xf6>
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d00f      	beq.n	80006c2 <MCAL_GPIO_INIT+0x114>
 80006a2:	e01f      	b.n	80006e4 <MCAL_GPIO_INIT+0x136>
			{
			case  GPIO_CONFIG_Input_PU :
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	8812      	ldrh	r2, [r2, #0]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60da      	str	r2, [r3, #12]
				Pin_config = (((PinConfig->GPIO_Pin_Config << 2 )|(0))&0x0F);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	73fb      	strb	r3, [r7, #15]
				break;
 80006c0:	e010      	b.n	80006e4 <MCAL_GPIO_INIT+0x136>
			case GPIO_CONFIG_Input_PD :
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	8812      	ldrh	r2, [r2, #0]
 80006ca:	43d2      	mvns	r2, r2
 80006cc:	401a      	ands	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	60da      	str	r2, [r3, #12]
				Pin_config = ((((PinConfig->GPIO_Pin_Config-1) << 2 )|(0))&0x0F);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	73fb      	strb	r3, [r7, #15]
				break;
 80006e2:	bf00      	nop


			}

			( *Config_Register ) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80006e4:	7bfc      	ldrb	r4, [r7, #15]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fefc 	bl	80004e8 <Get_CRLH_Position>
 80006f0:	4603      	mov	r3, r0
 80006f2:	fa04 f203 	lsl.w	r2, r4, r3
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	431a      	orrs	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e01a      	b.n	8000738 <MCAL_GPIO_INIT+0x18a>

		}
		else if(PinConfig->GPIO_Pin_Config == GPIO_CONFIG_Alternate_Input)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	789b      	ldrb	r3, [r3, #2]
 8000706:	2b08      	cmp	r3, #8
 8000708:	d116      	bne.n	8000738 <MCAL_GPIO_INIT+0x18a>
		{ 	//pin is alternative input (same as input floating)
			Pin_config = ( (((PinConfig->GPIO_Pin_Config-7) << 2) | (0)) & 0x0F	);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	3b07      	subs	r3, #7
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	73fb      	strb	r3, [r7, #15]
			(*Config_Register) |= ( Pin_config << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800071a:	7bfc      	ldrb	r4, [r7, #15]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fee1 	bl	80004e8 <Get_CRLH_Position>
 8000726:	4603      	mov	r3, r0
 8000728:	fa04 f203 	lsl.w	r2, r4, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	431a      	orrs	r2, r3
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	601a      	str	r2, [r3, #0]
	}

	 */


}
 8000736:	e7ff      	b.n	8000738 <MCAL_GPIO_INIT+0x18a>
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <MCAL_RCC_GETSYSCLKfreq>:
1111: SYSCLK divided by 512*/
const	uint16_t	AHBrescTable[16U] = 	{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t	MCAL_RCC_GETSYSCLKfreq(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

	//we will use HSI as a system clock

	switch((RCC->CFGR >>2) & 0b11){
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MCAL_RCC_GETSYSCLKfreq+0x34>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	f003 0303 	and.w	r3, r3, #3
 800074e:	2b01      	cmp	r3, #1
 8000750:	d006      	beq.n	8000760 <MCAL_RCC_GETSYSCLKfreq+0x20>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d302      	bcc.n	800075c <MCAL_RCC_GETSYSCLKfreq+0x1c>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d004      	beq.n	8000764 <MCAL_RCC_GETSYSCLKfreq+0x24>
 800075a:	e005      	b.n	8000768 <MCAL_RCC_GETSYSCLKfreq+0x28>
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable

	case 0:
		return HSI_RC_CLK;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MCAL_RCC_GETSYSCLKfreq+0x38>)
 800075e:	e004      	b.n	800076a <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 1:
		return HSE_CLK;//we need to calculate it ,so user should specify it how to use HSE
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 8000762:	e002      	b.n	800076a <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;
	case 2:

		return 16000000;//we need to calculate it ,so user should specify it how to use PLLCK & PLLMUL & PLL MUX
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MCAL_RCC_GETSYSCLKfreq+0x3c>)
 8000766:	e000      	b.n	800076a <MCAL_RCC_GETSYSCLKfreq+0x2a>
		break;

	}
	return 0;
 8000768:	2300      	movs	r3, #0

}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	007a1200 	.word	0x007a1200
 800077c:	00f42400 	.word	0x00f42400

08000780 <MCAL_RCC_GETHCLKfreq>:

uint32_t	MCAL_RCC_GETHCLKfreq(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return MCAL_RCC_GETSYSCLKfreq() >> AHBrescTable[(RCC->CFGR >> 4)&0xF];
 8000784:	f7ff ffdc 	bl	8000740 <MCAL_RCC_GETSYSCLKfreq>
 8000788:	4601      	mov	r1, r0
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MCAL_RCC_GETHCLKfreq+0x24>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <MCAL_RCC_GETHCLKfreq+0x28>)
 8000796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079a:	fa21 f303 	lsr.w	r3, r1, r3

}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	08000b9c 	.word	0x08000b9c

080007ac <MCAL_RCC_GETPCLK1Freq>:

uint32_t	MCAL_RCC_GETPCLK1Freq(void){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 8) & 0b111]  ;
 80007b0:	f7ff ffe6 	bl	8000780 <MCAL_RCC_GETHCLKfreq>
 80007b4:	4601      	mov	r1, r0
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MCAL_RCC_GETPCLK1Freq+0x20>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	0a1b      	lsrs	r3, r3, #8
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <MCAL_RCC_GETPCLK1Freq+0x24>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	fa21 f303 	lsr.w	r3, r1, r3

}
 80007c8:	4618      	mov	r0, r3
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	08000b94 	.word	0x08000b94

080007d4 <MCAL_RCC_GETPCLK2Freq>:
uint32_t 	MCAL_RCC_GETPCLK2Freq(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return	MCAL_RCC_GETHCLKfreq() >> APbrescTable[(RCC->CFGR >> 11) & 0b111]  ;
 80007d8:	f7ff ffd2 	bl	8000780 <MCAL_RCC_GETHCLKfreq>
 80007dc:	4601      	mov	r1, r0
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MCAL_RCC_GETPCLK2Freq+0x20>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	0adb      	lsrs	r3, r3, #11
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <MCAL_RCC_GETPCLK2Freq+0x24>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	fa21 f303 	lsr.w	r3, r1, r3

}
 80007f0:	4618      	mov	r0, r3
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	08000b94 	.word	0x08000b94

080007fc <MCAL_UART_Init>:




void MCAL_UART_Init(USART_typedef* USARTx, USART_Config* UART_Config)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;

	GP_UART_config = UART_Config;
 8000806:	4a57      	ldr	r2, [pc, #348]	; (8000964 <MCAL_UART_Init+0x168>)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	6013      	str	r3, [r2, #0]

	//Enable the Clock for selected USART
	if(USARTx == USART1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a56      	ldr	r2, [pc, #344]	; (8000968 <MCAL_UART_Init+0x16c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000814:	4b55      	ldr	r3, [pc, #340]	; (800096c <MCAL_UART_Init+0x170>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a54      	ldr	r2, [pc, #336]	; (800096c <MCAL_UART_Init+0x170>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	e014      	b.n	800084c <MCAL_UART_Init+0x50>
	else if (USARTx == USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a52      	ldr	r2, [pc, #328]	; (8000970 <MCAL_UART_Init+0x174>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 800082a:	4b50      	ldr	r3, [pc, #320]	; (800096c <MCAL_UART_Init+0x170>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a4f      	ldr	r2, [pc, #316]	; (800096c <MCAL_UART_Init+0x170>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	e009      	b.n	800084c <MCAL_UART_Init+0x50>
	else if (USARTx == USART3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a4e      	ldr	r2, [pc, #312]	; (8000974 <MCAL_UART_Init+0x178>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <MCAL_UART_Init+0x170>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a49      	ldr	r2, [pc, #292]	; (800096c <MCAL_UART_Init+0x170>)
 8000846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084a:	61d3      	str	r3, [r2, #28]


	//Enable USART Module
	//	Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	60da      	str	r2, [r3, #12]

	//Enable USART Tx & Rx according
	//	Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	431a      	orrs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60da      	str	r2, [r3, #12]

	//Payload Width
	//	Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	7a12      	ldrb	r2, [r2, #8]
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60da      	str	r2, [r3, #12]

	//Parity Enable & Width
	//	Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	7a52      	ldrb	r2, [r2, #9]
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60da      	str	r2, [r3, #12]

	//number of Stop Bits
	//	Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->Stop_bits;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	7a92      	ldrb	r2, [r2, #10]
 800088a:	431a      	orrs	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	611a      	str	r2, [r3, #16]

	//Flow Control (CTS/RTS)
	//	Bit 9 CTSE: CTS enable & Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->Flow_Control;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	7ad2      	ldrb	r2, [r2, #11]
 8000898:	431a      	orrs	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	615a      	str	r2, [r3, #20]

	//Baud Rate Speed;

	//Getting Crystal Speed
	if(USARTx == USART1){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a31      	ldr	r2, [pc, #196]	; (8000968 <MCAL_UART_Init+0x16c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d103      	bne.n	80008ae <MCAL_UART_Init+0xb2>

		//PCLK2 for USART1
		pclk = MCAL_RCC_GETPCLK2Freq();
 80008a6:	f7ff ff95 	bl	80007d4 <MCAL_RCC_GETPCLK2Freq>
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	e002      	b.n	80008b4 <MCAL_UART_Init+0xb8>

	}
	else
	{	//PCLK1 for USART2,3
		pclk = MCAL_RCC_GETPCLK1Freq();
 80008ae:	f7ff ff7d 	bl	80007ac <MCAL_RCC_GETPCLK1Freq>
 80008b2:	60f8      	str	r0, [r7, #12]

	}
	//baud rate calculation
	BRR = USART_BRR_Register(pclk,UART_Config->Baud_Rate);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c0:	0119      	lsls	r1, r3, #4
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	009a      	lsls	r2, r3, #2
 80008cc:	441a      	add	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	fb00 f303 	mul.w	r3, r0, r3
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <MCAL_UART_Init+0x17c>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	095b      	lsrs	r3, r3, #5
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	430b      	orrs	r3, r1
 80008fc:	60bb      	str	r3, [r7, #8]

	//	Bits 3:0 DIV_Fraction[3:0]: fraction of USARTDIV Bits & 15:4 DIV_Mantissa[11:0]: mantissa of USARTDIV

	USARTx->BRR = BRR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	609a      	str	r2, [r3, #8]

	//USART IRQ Enbale & IRQ Call back

	if(UART_Config->IRQ_Enable != USART_IRQ_Disable){
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	7b1b      	ldrb	r3, [r3, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d026      	beq.n	800095a <MCAL_UART_Init+0x15e>

		USARTx->CR1 |= UART_Config->IRQ_Enable;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	7b12      	ldrb	r2, [r2, #12]
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60da      	str	r2, [r3, #12]


		//Enable NVIC For USARTx IRQ
		if(USARTx == USART1){
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MCAL_UART_Init+0x16c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <MCAL_UART_Init+0x134>

			NVIC_IRQ37_USART1_Enable;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MCAL_UART_Init+0x180>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MCAL_UART_Init+0x180>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	6013      	str	r3, [r2, #0]

	}



}
 800092e:	e014      	b.n	800095a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MCAL_UART_Init+0x174>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MCAL_UART_Init+0x180>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MCAL_UART_Init+0x180>)
 800093e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	e009      	b.n	800095a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3){
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <MCAL_UART_Init+0x178>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d105      	bne.n	800095a <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MCAL_UART_Init+0x180>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <MCAL_UART_Init+0x180>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000020 	.word	0x20000020
 8000968:	40013800 	.word	0x40013800
 800096c:	40021000 	.word	0x40021000
 8000970:	40004400 	.word	0x40004400
 8000974:	40004800 	.word	0x40004800
 8000978:	51eb851f 	.word	0x51eb851f
 800097c:	e000e104 	.word	0xe000e104

08000980 <MCAL_UART_ReceiveData>:
					//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
					//	bit.
 * */


void MCAL_UART_ReceiveData(USART_typedef* USARTx, uint16_t*pRxBuffer,enum Polling_mechanism PollingEnable){
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4613      	mov	r3, r2
 800098c:	71fb      	strb	r3, [r7, #7]

	//Wait until RXNE flag is set in the SR
	if(PollingEnable == Enable){
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d106      	bne.n	80009a2 <MCAL_UART_ReceiveData+0x22>

		while(!(USARTx->SR & 1<<5));
 8000994:	bf00      	nop
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f9      	beq.n	8000996 <MCAL_UART_ReceiveData+0x16>


	}else // 8-bit payload length
	{
		//No parity so we consider all 8-bits are data
		if(GP_UART_config->Parity == USART_Parity_Type_None)
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MCAL_UART_ReceiveData+0x58>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	7a5b      	ldrb	r3, [r3, #9]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <MCAL_UART_ReceiveData+0x3c>
		{

			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0xFF );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	801a      	strh	r2, [r3, #0]

	}



}
 80009ba:	e007      	b.n	80009cc <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	801a      	strh	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000020 	.word	0x20000020

080009dc <MCAL_UART_GPIO_Set_Pins>:
 * @Note			-
 *					-Look @ GPIO configurations for device peripherals
 * */


void MCAL_UART_GPIO_Set_Pins(USART_typedef* USARTx){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]


	GPIO_PinConfig_t USART_PinCfg;
	if(USARTx == USART1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d118      	bne.n	8000a1e <MCAL_UART_GPIO_Set_Pins+0x42>
		//RX->PA10
		//CTS->PA11
		//RTS->PA12

		//TX->PA9
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_9;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 80009f2:	2306      	movs	r3, #6
 80009f4:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a02:	f7ff fdd4 	bl	80005ae <MCAL_GPIO_INIT>


		//RX->PA9
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_10;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a18:	f7ff fdc9 	bl	80005ae <MCAL_GPIO_INIT>





}
 8000a1c:	e036      	b.n	8000a8c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d116      	bne.n	8000a54 <MCAL_UART_GPIO_Set_Pins+0x78>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_2;
 8000a26:	2304      	movs	r3, #4
 8000a28:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4817      	ldr	r0, [pc, #92]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a3a:	f7ff fdb8 	bl	80005ae <MCAL_GPIO_INIT>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_3;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 8000a42:	2308      	movs	r3, #8
 8000a44:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a4e:	f7ff fdae 	bl	80005ae <MCAL_GPIO_INIT>
}
 8000a52:	e01b      	b.n	8000a8c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if (USARTx == USART3){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d117      	bne.n	8000a8c <MCAL_UART_GPIO_Set_Pins+0xb0>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_10;
 8000a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a60:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Output_PP;
 8000a62:	2306      	movs	r3, #6
 8000a64:	73bb      	strb	r3, [r7, #14]
		USART_PinCfg.GPIO_Mode_config = GPIO_MODE_Output_10MHz;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a72:	f7ff fd9c 	bl	80005ae <MCAL_GPIO_INIT>
		USART_PinCfg.GPIO_PinNumber = GPIO_PINS_11;
 8000a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a7a:	81bb      	strh	r3, [r7, #12]
		USART_PinCfg.GPIO_Pin_Config = GPIO_CONFIG_Alternate_Input;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &USART_PinCfg);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a88:	f7ff fd91 	bl	80005ae <MCAL_GPIO_INIT>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <USART1_IRQHandler>:


//ISR FOR USARTx where x can be (1..3 depending on which USART will be used )


void USART1_IRQHandler(void){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	GP_UART_config->P_IRQ_Callback();
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <USART1_IRQHandler+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	4798      	blx	r3

}       			//USART1 global interrupt
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000020 	.word	0x20000020

08000ab8 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	GP_UART_config->P_IRQ_Callback();
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <USART2_IRQHandler+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	4798      	blx	r3

}       			// USART2 global interrupt
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000020 	.word	0x20000020

08000acc <USART3_IRQHandler>:



void USART3_IRQHandler(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	GP_UART_config->P_IRQ_Callback();
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <USART3_IRQHandler+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4798      	blx	r3
}         			// USART3 global interrupt
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000020 	.word	0x20000020

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	4e0c      	ldr	r6, [pc, #48]	; (8000b18 <__libc_init_array+0x38>)
 8000ae6:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae8:	1ba4      	subs	r4, r4, r6
 8000aea:	10a4      	asrs	r4, r4, #2
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	f000 f834 	bl	8000b5c <_init>
 8000af4:	2500      	movs	r5, #0
 8000af6:	4e0a      	ldr	r6, [pc, #40]	; (8000b20 <__libc_init_array+0x40>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <__libc_init_array+0x44>)
 8000afa:	1ba4      	subs	r4, r4, r6
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	42a5      	cmp	r5, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b08:	4798      	blx	r3
 8000b0a:	3501      	adds	r5, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b12:	4798      	blx	r3
 8000b14:	3501      	adds	r5, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000bbc 	.word	0x08000bbc
 8000b1c:	08000bbc 	.word	0x08000bbc
 8000b20:	08000bbc 	.word	0x08000bbc
 8000b24:	08000bc0 	.word	0x08000bc0

08000b28 <strstr>:
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	7803      	ldrb	r3, [r0, #0]
 8000b2c:	b17b      	cbz	r3, 8000b4e <strstr+0x26>
 8000b2e:	4604      	mov	r4, r0
 8000b30:	7823      	ldrb	r3, [r4, #0]
 8000b32:	4620      	mov	r0, r4
 8000b34:	1c66      	adds	r6, r4, #1
 8000b36:	b17b      	cbz	r3, 8000b58 <strstr+0x30>
 8000b38:	1e4a      	subs	r2, r1, #1
 8000b3a:	1e63      	subs	r3, r4, #1
 8000b3c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8000b40:	b14d      	cbz	r5, 8000b56 <strstr+0x2e>
 8000b42:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000b46:	4634      	mov	r4, r6
 8000b48:	42af      	cmp	r7, r5
 8000b4a:	d0f7      	beq.n	8000b3c <strstr+0x14>
 8000b4c:	e7f0      	b.n	8000b30 <strstr+0x8>
 8000b4e:	780b      	ldrb	r3, [r1, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf18      	it	ne
 8000b54:	2000      	movne	r0, #0
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e7fc      	b.n	8000b56 <strstr+0x2e>

08000b5c <_init>:
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	bf00      	nop
 8000b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b62:	bc08      	pop	{r3}
 8000b64:	469e      	mov	lr, r3
 8000b66:	4770      	bx	lr

08000b68 <_fini>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	bf00      	nop
 8000b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b6e:	bc08      	pop	{r3}
 8000b70:	469e      	mov	lr, r3
 8000b72:	4770      	bx	lr
