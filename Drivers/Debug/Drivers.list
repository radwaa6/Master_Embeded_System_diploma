
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d38  08000d38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000d38  08000d38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d38  08000d38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d38  08000d38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08000d50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000d50  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033ed  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000872  00000000  00000000  00023426  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000974  00000000  00000000  00023c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00024610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000247a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001160  00000000  00000000  000248f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c01  00000000  00000000  00025a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a649  00000000  00000000  00027659  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031ca2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  00031d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cf8 	.word	0x08000cf8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000cf8 	.word	0x08000cf8

08000170 <LCD_En_Kick>:
//		}
//	}
//}

void LCD_En_Kick()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//	LCD_Ctrl &= ~(1<<EN_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Set);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <LCD_En_Kick+0x28>)
 800017c:	f000 fd72 	bl	8000c64 <MCAL_GPIO_WritePin>

	my_wait(50);// using Enable Cycle time in Bus timing characteristics in data sheet
 8000180:	2032      	movs	r0, #50	; 0x32
 8000182:	f000 f923 	bl	80003cc <my_wait>
	//	LCD_Ctrl |= (1<<EN_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Reset);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <LCD_En_Kick+0x28>)
 800018e:	f000 fd69 	bl	8000c64 <MCAL_GPIO_WritePin>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <LCD_GOTO_XY>:

void LCD_GOTO_XY(int line , int position)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	6039      	str	r1, [r7, #0]
	if(line == 1)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10d      	bne.n	80001c8 <LCD_GOTO_XY+0x2c>
	{
		if(position < 16 && position >= 0)
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	2b0f      	cmp	r3, #15
 80001b0:	dc1a      	bgt.n	80001e8 <LCD_GOTO_XY+0x4c>
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	db17      	blt.n	80001e8 <LCD_GOTO_XY+0x4c>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW + position);//Ely howa ht7rko be character 0x80+
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	3b80      	subs	r3, #128	; 0x80
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 f893 	bl	80002ec <LCD_Write_Command>
		if(position < 32 && position >= 0)
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);//Ely howa ht7rko be character 0xC0+
		}
	}
}
 80001c6:	e00f      	b.n	80001e8 <LCD_GOTO_XY+0x4c>
	else if(line == 2)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10c      	bne.n	80001e8 <LCD_GOTO_XY+0x4c>
		if(position < 32 && position >= 0)
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	2b1f      	cmp	r3, #31
 80001d2:	dc09      	bgt.n	80001e8 <LCD_GOTO_XY+0x4c>
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db06      	blt.n	80001e8 <LCD_GOTO_XY+0x4c>
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_ROW + position);//Ely howa ht7rko be character 0xC0+
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	3b40      	subs	r3, #64	; 0x40
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f882 	bl	80002ec <LCD_Write_Command>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <LCD_Clear_Screen>:

void LCD_Clear_Screen()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 80001f4:	2001      	movs	r0, #1
 80001f6:	f000 f879 	bl	80002ec <LCD_Write_Command>
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <LCD_Init>:
	//	LCD_Clear_Screen();
}


void LCD_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	my_wait(20);
 8000206:	2014      	movs	r0, #20
 8000208:	f000 f8e0 	bl	80003cc <my_wait>

	//	LCD_Ctrl &= ~((1<<EN_Switch) | (1<<RW_Switch) | (1<<RS_Switch));
	//RS switch
	PinCnfg.GPIO_Pin_Num = RS_Switch;
 800020c:	4b34      	ldr	r3, [pc, #208]	; (80002e0 <LCD_Init+0xe0>)
 800020e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000212:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000214:	4b32      	ldr	r3, [pc, #200]	; (80002e0 <LCD_Init+0xe0>)
 8000216:	2204      	movs	r2, #4
 8000218:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 800021a:	4b31      	ldr	r3, [pc, #196]	; (80002e0 <LCD_Init+0xe0>)
 800021c:	2201      	movs	r2, #1
 800021e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 8000220:	492f      	ldr	r1, [pc, #188]	; (80002e0 <LCD_Init+0xe0>)
 8000222:	4830      	ldr	r0, [pc, #192]	; (80002e4 <LCD_Init+0xe4>)
 8000224:	f000 fc9f 	bl	8000b66 <MCAL_GPIO_Init>

	//RW switch
	PinCnfg.GPIO_Pin_Num = RW_Switch;
 8000228:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <LCD_Init+0xe0>)
 800022a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800022e:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000230:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <LCD_Init+0xe0>)
 8000232:	2204      	movs	r2, #4
 8000234:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000236:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <LCD_Init+0xe0>)
 8000238:	2201      	movs	r2, #1
 800023a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 800023c:	4928      	ldr	r1, [pc, #160]	; (80002e0 <LCD_Init+0xe0>)
 800023e:	4829      	ldr	r0, [pc, #164]	; (80002e4 <LCD_Init+0xe4>)
 8000240:	f000 fc91 	bl	8000b66 <MCAL_GPIO_Init>

	//EN switch
	PinCnfg.GPIO_Pin_Num = EN_Switch;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <LCD_Init+0xe0>)
 8000246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800024a:	801a      	strh	r2, [r3, #0]
	PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <LCD_Init+0xe0>)
 800024e:	2204      	movs	r2, #4
 8000250:	709a      	strb	r2, [r3, #2]
	PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000252:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <LCD_Init+0xe0>)
 8000254:	2201      	movs	r2, #1
 8000256:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Ctrl, &PinCnfg);
 8000258:	4921      	ldr	r1, [pc, #132]	; (80002e0 <LCD_Init+0xe0>)
 800025a:	4822      	ldr	r0, [pc, #136]	; (80002e4 <LCD_Init+0xe4>)
 800025c:	f000 fc83 	bl	8000b66 <MCAL_GPIO_Init>

	//	To make pins output with speed 10 MHz
	for(int i = GPIO_Pin_0; i<GPIO_Pin_7 ; i++)
 8000260:	2301      	movs	r3, #1
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	e012      	b.n	800028c <LCD_Init+0x8c>
	{
		PinCnfg.GPIO_Pin_Num = GPIO_Pins_Array[i];
 8000266:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <LCD_Init+0xe8>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <LCD_Init+0xe0>)
 8000270:	801a      	strh	r2, [r3, #0]
		PinCnfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000272:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <LCD_Init+0xe0>)
 8000274:	2204      	movs	r2, #4
 8000276:	709a      	strb	r2, [r3, #2]
		PinCnfg.GPIO_Output_Speed = GPIO_Speed_10MHz;
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <LCD_Init+0xe0>)
 800027a:	2201      	movs	r2, #1
 800027c:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD_PORT, &PinCnfg);
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <LCD_Init+0xe0>)
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <LCD_Init+0xe4>)
 8000282:	f000 fc70 	bl	8000b66 <MCAL_GPIO_Init>
	for(int i = GPIO_Pin_0; i<GPIO_Pin_7 ; i++)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3301      	adds	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b7f      	cmp	r3, #127	; 0x7f
 8000290:	dde9      	ble.n	8000266 <LCD_Init+0x66>
	}


	MCAL_GPIO_WritePin(LCD_Ctrl, EN_Switch, GPIO_Pin_Reset);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000298:	4812      	ldr	r0, [pc, #72]	; (80002e4 <LCD_Init+0xe4>)
 800029a:	f000 fce3 	bl	8000c64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Reset);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	480f      	ldr	r0, [pc, #60]	; (80002e4 <LCD_Init+0xe4>)
 80002a6:	f000 fcdd 	bl	8000c64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LCD_Init+0xe4>)
 80002b2:	f000 fcd7 	bl	8000c64 <MCAL_GPIO_WritePin>


	my_wait(1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 f888 	bl	80003cc <my_wait>
	//	LCD_Is_Busy();
	LCD_Clear_Screen();
 80002bc:	f7ff ff98 	bl	80001f0 <LCD_Clear_Screen>

	//#ifdef EIGHT_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 80002c0:	2038      	movs	r0, #56	; 0x38
 80002c2:	f000 f813 	bl	80002ec <LCD_Write_Command>
	//	//A command needed for using 4 bit mode
	//	LCD_Write_Command(0x02);
	//	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	//#endif

	LCD_Write_Command(LCD_ENTRY_MODE);
 80002c6:	2006      	movs	r0, #6
 80002c8:	f000 f810 	bl	80002ec <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_ROW);
 80002cc:	2080      	movs	r0, #128	; 0x80
 80002ce:	f000 f80d 	bl	80002ec <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 80002d2:	200f      	movs	r0, #15
 80002d4:	f000 f80a 	bl	80002ec <LCD_Write_Command>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000030 	.word	0x20000030
 80002e4:	40010800 	.word	0x40010800
 80002e8:	20000000 	.word	0x20000000

080002ec <LCD_Write_Command>:


void LCD_Write_Command(unsigned char command)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	//	LCD_Is_Busy();

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	480b      	ldr	r0, [pc, #44]	; (800032c <LCD_Write_Command+0x40>)
 80002fe:	f000 fcc8 	bl	8000c92 <MCAL_GPIO_WritePort>

	//	LCD_Ctrl &= ~((1<<RW_Switch) | (1<<RS_Switch));
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000308:	4808      	ldr	r0, [pc, #32]	; (800032c <LCD_Write_Command+0x40>)
 800030a:	f000 fcab 	bl	8000c64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Reset);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <LCD_Write_Command+0x40>)
 8000316:	f000 fca5 	bl	8000c64 <MCAL_GPIO_WritePin>

	my_wait(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 f856 	bl	80003cc <my_wait>
	LCD_En_Kick();
 8000320:	f7ff ff26 	bl	8000170 <LCD_En_Kick>
	//	LCD_PORT = ((LCD_PORT & 0x0F) | (command << 4));
	//	LCD_Ctrl &= ~((1<<RW_Switch) | (1<<RS_Switch));
	//	my_wait(1);
	//	LCD_En_Kick();
	//#endif
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40010800 	.word	0x40010800

08000330 <LCD_Write_Char>:

void LCD_Write_Char(unsigned char data)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	//LCD_Is_Busy();

	//#ifdef EIGHT_BIT_MODE
	//	LCD_PORT = data;
	MCAL_GPIO_WritePort(LCD_PORT, data);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	b29b      	uxth	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <LCD_Write_Char+0x40>)
 8000342:	f000 fca6 	bl	8000c92 <MCAL_GPIO_WritePort>

	//	LCD_Ctrl &= ~(1<<RW_Switch);
	//	LCD_Ctrl |= (1<<RS_Switch);
	MCAL_GPIO_WritePin(LCD_Ctrl, RW_Switch, GPIO_Pin_Reset);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4808      	ldr	r0, [pc, #32]	; (8000370 <LCD_Write_Char+0x40>)
 800034e:	f000 fc89 	bl	8000c64 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_Ctrl, RS_Switch, GPIO_Pin_Set);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <LCD_Write_Char+0x40>)
 800035a:	f000 fc83 	bl	8000c64 <MCAL_GPIO_WritePin>

	my_wait(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f834 	bl	80003cc <my_wait>
	LCD_En_Kick();
 8000364:	f7ff ff04 	bl	8000170 <LCD_En_Kick>
	//	LCD_Ctrl |= (1<<RS_Switch);
	//	LCD_Ctrl &= ~(1<<RW_Switch);
	//	my_wait(1);
	//	LCD_En_Kick();
	//#endif
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40010800 	.word	0x40010800

08000374 <LCD_Write_String>:


void LCD_Write_String(char* data)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000380:	e01c      	b.n	80003bc <LCD_Write_String+0x48>
	{
		count++;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3301      	adds	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
		LCD_Write_Char(*data++);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	607a      	str	r2, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ffcd 	bl	8000330 <LCD_Write_Char>
		if(count == 16)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b10      	cmp	r3, #16
 800039a:	d104      	bne.n	80003a6 <LCD_Write_String+0x32>
		{
			LCD_GOTO_XY(2 , 0);
 800039c:	2100      	movs	r1, #0
 800039e:	2002      	movs	r0, #2
 80003a0:	f7ff fefc 	bl	800019c <LCD_GOTO_XY>
 80003a4:	e00a      	b.n	80003bc <LCD_Write_String+0x48>
		}
		else if(count == 32)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b20      	cmp	r3, #32
 80003aa:	d107      	bne.n	80003bc <LCD_Write_String+0x48>
		{
			LCD_Clear_Screen();
 80003ac:	f7ff ff20 	bl	80001f0 <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 80003b0:	2100      	movs	r1, #0
 80003b2:	2001      	movs	r0, #1
 80003b4:	f7ff fef2 	bl	800019c <LCD_GOTO_XY>
			count = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1de      	bne.n	8000382 <LCD_Write_String+0xe>
		}
	}
}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <my_wait>:

uint32_t IRQ_Flag = 0;


void my_wait(int x)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	unsigned int i ,j;
	for(i = 0 ; i<x ; i++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e00b      	b.n	80003f2 <my_wait+0x26>
		for(j = 0 ; j<255 ; j++);
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	e002      	b.n	80003e6 <my_wait+0x1a>
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2bfe      	cmp	r3, #254	; 0xfe
 80003ea:	d9f9      	bls.n	80003e0 <my_wait+0x14>
	for(i = 0 ; i<x ; i++)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d3ef      	bcc.n	80003da <my_wait+0xe>
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI9_Callback+0x1c>)
 800040a:	2201      	movs	r2, #1
 800040c:	601a      	str	r2, [r3, #0]
	LCD_Write_String("IRQ EXTI9 is happened _|- ");
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <EXTI9_Callback+0x20>)
 8000410:	f7ff ffb0 	bl	8000374 <LCD_Write_String>
	my_wait(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000418:	f7ff ffd8 	bl	80003cc <my_wait>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000002c 	.word	0x2000002c
 8000424:	08000d10 	.word	0x08000d10

08000428 <main>:

int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	//Enable clock
	RCC_GPIOA_Clk_En();
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <main+0x6c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <main+0x6c>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_Clk_En();
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <main+0x6c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <main+0x6c>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6193      	str	r3, [r2, #24]
	RCC_AFIO_Clk_En();
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <main+0x6c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <main+0x6c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]

	LCD_Init();
 8000452:	f7ff fed5 	bl	8000200 <LCD_Init>
	LCD_Clear_Screen();
 8000456:	f7ff fecb 	bl	80001f0 <LCD_Clear_Screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_Pin = EXTI9PB9;
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <main+0x70>)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 8000464:	2300      	movs	r3, #0
 8000466:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.Ptr_IRQ_CallBack = EXTI9_Callback;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <main+0x74>)
 800046a:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 800046c:	2301      	movs	r3, #1
 800046e:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f9f8 	bl	8000868 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <main+0x78>)
 800047a:	2201      	movs	r2, #1
 800047c:	601a      	str	r2, [r3, #0]
    /* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <main+0x78>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0fb      	beq.n	800047e <main+0x56>
		{
			LCD_Clear_Screen();
 8000486:	f7ff feb3 	bl	80001f0 <LCD_Clear_Screen>
			IRQ_Flag = 0;
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <main+0x78>)
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000490:	e7f5      	b.n	800047e <main+0x56>
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	08000d2c 	.word	0x08000d2c
 800049c:	08000405 	.word	0x08000405
 80004a0:	2000002c 	.word	0x2000002c

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ae:	490d      	ldr	r1, [pc, #52]	; (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b4:	e002      	b.n	80004bc <LoopCopyDataInit>

080004b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ba:	3304      	adds	r3, #4

080004bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c0:	d3f9      	bcc.n	80004b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c4:	4c0a      	ldr	r4, [pc, #40]	; (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c8:	e001      	b.n	80004ce <LoopFillZerobss>

080004ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004cc:	3204      	adds	r2, #4

080004ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d0:	d3fb      	bcc.n	80004ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 fbed 	bl	8000cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff ffa7 	bl	8000428 <main>

080004da <LoopForever>:

LoopForever:
    b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004e8:	08000d40 	.word	0x08000d40
  ldr r2, =_sbss
 80004ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004f0:	20000070 	.word	0x20000070

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>
	...

080004f8 <Enable_NVIC>:
 * 										Generic Functions
 * ===================================================================================================
 */

void Enable_NVIC(uint16_t IRQ)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d854      	bhi.n	80005b2 <Enable_NVIC+0xba>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <Enable_NVIC+0x18>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000551 	.word	0x08000551
 8000514:	0800055f 	.word	0x0800055f
 8000518:	0800056d 	.word	0x0800056d
 800051c:	0800057b 	.word	0x0800057b
 8000520:	08000589 	.word	0x08000589
 8000524:	08000597 	.word	0x08000597
 8000528:	08000597 	.word	0x08000597
 800052c:	08000597 	.word	0x08000597
 8000530:	08000597 	.word	0x08000597
 8000534:	08000597 	.word	0x08000597
 8000538:	080005a5 	.word	0x080005a5
 800053c:	080005a5 	.word	0x080005a5
 8000540:	080005a5 	.word	0x080005a5
 8000544:	080005a5 	.word	0x080005a5
 8000548:	080005a5 	.word	0x080005a5
 800054c:	080005a5 	.word	0x080005a5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <Enable_NVIC+0xc4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a19      	ldr	r2, [pc, #100]	; (80005bc <Enable_NVIC+0xc4>)
 8000556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055a:	6013      	str	r3, [r2, #0]
		break;
 800055c:	e029      	b.n	80005b2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <Enable_NVIC+0xc4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <Enable_NVIC+0xc4>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6013      	str	r3, [r2, #0]
		break;
 800056a:	e022      	b.n	80005b2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <Enable_NVIC+0xc4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <Enable_NVIC+0xc4>)
 8000572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000576:	6013      	str	r3, [r2, #0]
		break;
 8000578:	e01b      	b.n	80005b2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <Enable_NVIC+0xc4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <Enable_NVIC+0xc4>)
 8000580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000584:	6013      	str	r3, [r2, #0]
		break;
 8000586:	e014      	b.n	80005b2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <Enable_NVIC+0xc4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <Enable_NVIC+0xc4>)
 800058e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000592:	6013      	str	r3, [r2, #0]
		break;
 8000594:	e00d      	b.n	80005b2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <Enable_NVIC+0xc4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <Enable_NVIC+0xc4>)
 800059c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005a0:	6013      	str	r3, [r2, #0]
		break;
 80005a2:	e006      	b.n	80005b2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <Enable_NVIC+0xc8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <Enable_NVIC+0xc8>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	6013      	str	r3, [r2, #0]
		break;
 80005b0:	bf00      	nop
	}
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000e104 	.word	0xe000e104

080005c4 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d854      	bhi.n	800067e <Disable_NVIC+0xba>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <Disable_NVIC+0x18>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	0800062b 	.word	0x0800062b
 80005e4:	08000639 	.word	0x08000639
 80005e8:	08000647 	.word	0x08000647
 80005ec:	08000655 	.word	0x08000655
 80005f0:	08000663 	.word	0x08000663
 80005f4:	08000663 	.word	0x08000663
 80005f8:	08000663 	.word	0x08000663
 80005fc:	08000663 	.word	0x08000663
 8000600:	08000663 	.word	0x08000663
 8000604:	08000671 	.word	0x08000671
 8000608:	08000671 	.word	0x08000671
 800060c:	08000671 	.word	0x08000671
 8000610:	08000671 	.word	0x08000671
 8000614:	08000671 	.word	0x08000671
 8000618:	08000671 	.word	0x08000671
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <Disable_NVIC+0xc4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a19      	ldr	r2, [pc, #100]	; (8000688 <Disable_NVIC+0xc4>)
 8000622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000626:	6013      	str	r3, [r2, #0]
		break;
 8000628:	e029      	b.n	800067e <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <Disable_NVIC+0xc4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <Disable_NVIC+0xc4>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6013      	str	r3, [r2, #0]
		break;
 8000636:	e022      	b.n	800067e <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <Disable_NVIC+0xc4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <Disable_NVIC+0xc4>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6013      	str	r3, [r2, #0]
		break;
 8000644:	e01b      	b.n	800067e <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <Disable_NVIC+0xc4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <Disable_NVIC+0xc4>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000650:	6013      	str	r3, [r2, #0]
		break;
 8000652:	e014      	b.n	800067e <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <Disable_NVIC+0xc4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <Disable_NVIC+0xc4>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	6013      	str	r3, [r2, #0]
		break;
 8000660:	e00d      	b.n	800067e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <Disable_NVIC+0xc4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <Disable_NVIC+0xc4>)
 8000668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800066c:	6013      	str	r3, [r2, #0]
		break;
 800066e:	e006      	b.n	800067e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <Disable_NVIC+0xc8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <Disable_NVIC+0xc8>)
 8000676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067a:	6013      	str	r3, [r2, #0]
		break;
 800067c:	bf00      	nop
	}
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e180 	.word	0xe000e180
 800068c:	e000e184 	.word	0xe000e184

08000690 <Update_EXTI>:




void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	//1- Cinfig  to be AF input -> Floating input
	GPIO_Pin_Config_t PinConfig;
	PinConfig.GPIO_Pin_Num = EXTI_Config->EXTI_Pin.GPIO_Pin;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	891b      	ldrh	r3, [r3, #8]
 800069c:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_Mode = GPIO_Mode_Input_Flo;
 800069e:	2301      	movs	r3, #1
 80006a0:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinConfig);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f107 0208 	add.w	r2, r7, #8
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa5a 	bl	8000b66 <MCAL_GPIO_Init>

	//==============================================================
	//2-Update AFIO to route betn EXTI line with Port A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number/4; //index 0 1 2 3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	089b      	lsrs	r3, r3, #2
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number%4)*4;//Position 0 4 8 12
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0303 	and.w	r3, r3, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	73bb      	strb	r3, [r7, #14]

	//Clear the 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 80006cc:	4a5f      	ldr	r2, [pc, #380]	; (800084c <Update_EXTI+0x1bc>)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	3302      	adds	r3, #2
 80006d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	210f      	movs	r1, #15
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	495a      	ldr	r1, [pc, #360]	; (800084c <Update_EXTI+0x1bc>)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	4002      	ands	r2, r0
 80006e8:	3302      	adds	r3, #2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) & 0xF) << AFIO_EXTICR_position);
 80006ee:	4a57      	ldr	r2, [pc, #348]	; (800084c <Update_EXTI+0x1bc>)
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	3302      	adds	r3, #2
 80006f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4954      	ldr	r1, [pc, #336]	; (8000850 <Update_EXTI+0x1c0>)
 80006fe:	428b      	cmp	r3, r1
 8000700:	d016      	beq.n	8000730 <Update_EXTI+0xa0>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4953      	ldr	r1, [pc, #332]	; (8000854 <Update_EXTI+0x1c4>)
 8000708:	428b      	cmp	r3, r1
 800070a:	d00f      	beq.n	800072c <Update_EXTI+0x9c>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4951      	ldr	r1, [pc, #324]	; (8000858 <Update_EXTI+0x1c8>)
 8000712:	428b      	cmp	r3, r1
 8000714:	d008      	beq.n	8000728 <Update_EXTI+0x98>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	4950      	ldr	r1, [pc, #320]	; (800085c <Update_EXTI+0x1cc>)
 800071c:	428b      	cmp	r3, r1
 800071e:	d101      	bne.n	8000724 <Update_EXTI+0x94>
 8000720:	2303      	movs	r3, #3
 8000722:	e006      	b.n	8000732 <Update_EXTI+0xa2>
 8000724:	2300      	movs	r3, #0
 8000726:	e004      	b.n	8000732 <Update_EXTI+0xa2>
 8000728:	2302      	movs	r3, #2
 800072a:	e002      	b.n	8000732 <Update_EXTI+0xa2>
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <Update_EXTI+0xa2>
 8000730:	2300      	movs	r3, #0
 8000732:	7bb9      	ldrb	r1, [r7, #14]
 8000734:	408b      	lsls	r3, r1
 8000736:	4618      	mov	r0, r3
 8000738:	4944      	ldr	r1, [pc, #272]	; (800084c <Update_EXTI+0x1bc>)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4302      	orrs	r2, r0
 800073e:	3302      	adds	r3, #2
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//==============================================================
	//3- Update rising or falling edge
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <Update_EXTI+0x1d0>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	43d2      	mvns	r2, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a42      	ldr	r2, [pc, #264]	; (8000860 <Update_EXTI+0x1d0>)
 8000758:	400b      	ands	r3, r1
 800075a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <Update_EXTI+0x1d0>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	43d2      	mvns	r2, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <Update_EXTI+0x1d0>)
 8000770:	400b      	ands	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]


	if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7b1b      	ldrb	r3, [r3, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <Update_EXTI+0x1d0>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	4611      	mov	r1, r2
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <Update_EXTI+0x1d0>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6093      	str	r3, [r2, #8]
 8000792:	e029      	b.n	80007e8 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7b1b      	ldrb	r3, [r3, #12]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d10b      	bne.n	80007b4 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <Update_EXTI+0x1d0>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <Update_EXTI+0x1d0>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	60d3      	str	r3, [r2, #12]
 80007b2:	e019      	b.n	80007e8 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_BOTH)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7b1b      	ldrb	r3, [r3, #12]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d115      	bne.n	80007e8 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <Update_EXTI+0x1d0>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	4611      	mov	r1, r2
 80007c6:	2201      	movs	r2, #1
 80007c8:	408a      	lsls	r2, r1
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <Update_EXTI+0x1d0>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <Update_EXTI+0x1d0>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	8812      	ldrh	r2, [r2, #0]
 80007da:	4611      	mov	r1, r2
 80007dc:	2201      	movs	r2, #1
 80007de:	408a      	lsls	r2, r1
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <Update_EXTI+0x1d0>)
 80007e4:	430b      	orrs	r3, r1
 80007e6:	60d3      	str	r3, [r2, #12]
	}

	//==============================================================
	//4- Update IRQ Handling CALLBACK
	GPtr_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number] = EXTI_Config->Ptr_IRQ_CallBack;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <Update_EXTI+0x1d4>)
 80007f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//==============================================================
	//5- Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7b5b      	ldrb	r3, [r3, #13]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d110      	bne.n	8000822 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <Update_EXTI+0x1d0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	8812      	ldrh	r2, [r2, #0]
 8000808:	4611      	mov	r1, r2
 800080a:	2201      	movs	r2, #1
 800080c:	408a      	lsls	r2, r1
 800080e:	4611      	mov	r1, r2
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <Update_EXTI+0x1d0>)
 8000812:	430b      	orrs	r3, r1
 8000814:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe6c 	bl	80004f8 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
	}


}
 8000820:	e010      	b.n	8000844 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Update_EXTI+0x1d0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	8812      	ldrh	r2, [r2, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	2201      	movs	r2, #1
 800082e:	408a      	lsls	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <Update_EXTI+0x1d0>)
 8000836:	400b      	ands	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_Input_Line_Number);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fec0 	bl	80005c4 <Disable_NVIC>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40010000 	.word	0x40010000
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00
 8000858:	40011000 	.word	0x40011000
 800085c:	40011400 	.word	0x40011400
 8000860:	40010400 	.word	0x40010400
 8000864:	20000034 	.word	0x20000034

08000868 <MCAL_EXTI_GPIO_Init>:
 * @returnval 	-None
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				But LQFP48 Package has only GPIO A,B,Part of C,D exported as external pins from the
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff0d 	bl	8000690 <Update_EXTI>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <EXTI0_IRQHandler>:
 * ===================================================================================================
 */


void EXTI0_IRQHandler (void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit pending register "EXTI_PR" as to not bee in infinite loop
	EXTI->PR |= 1<<0;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <EXTI0_IRQHandler+0x1c>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <EXTI0_IRQHandler+0x1c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GPtr_IRQ_CallBack[0]();
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <EXTI0_IRQHandler+0x20>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4798      	blx	r3
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40010400 	.word	0x40010400
 80008a0:	20000034 	.word	0x20000034

080008a4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit pending register "EXTI_PR" as to not bee in infinite loop
	EXTI->PR |= 1<<1;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <EXTI1_IRQHandler+0x1c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <EXTI1_IRQHandler+0x1c>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GPtr_IRQ_CallBack[1]();
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <EXTI1_IRQHandler+0x20>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4798      	blx	r3
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40010400 	.word	0x40010400
 80008c4:	20000034 	.word	0x20000034

080008c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit pending register "EXTI_PR" as to not bee in infinite loop
	EXTI->PR |= 1<<2;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <EXTI2_IRQHandler+0x1c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <EXTI2_IRQHandler+0x1c>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GPtr_IRQ_CallBack[2]();
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <EXTI2_IRQHandler+0x20>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4798      	blx	r3
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010400 	.word	0x40010400
 80008e8:	20000034 	.word	0x20000034

080008ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit pending register "EXTI_PR" as to not bee in infinite loop
	EXTI->PR |= 1<<3;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <EXTI3_IRQHandler+0x1c>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <EXTI3_IRQHandler+0x1c>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GPtr_IRQ_CallBack[3]();
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <EXTI3_IRQHandler+0x20>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	4798      	blx	r3
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010400 	.word	0x40010400
 800090c:	20000034 	.word	0x20000034

08000910 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit pending register "EXTI_PR" as to not bee in infinite loop
	EXTI->PR |= 1<<4;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <EXTI4_IRQHandler+0x1c>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <EXTI4_IRQHandler+0x1c>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GPtr_IRQ_CallBack[4]();
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <EXTI4_IRQHandler+0x20>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	4798      	blx	r3
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010400 	.word	0x40010400
 8000930:	20000034 	.word	0x20000034

08000934 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;		GPtr_IRQ_CallBack[5]();}
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <EXTI9_5_IRQHandler+0x22>
 8000944:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <EXTI9_5_IRQHandler+0xa4>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;		GPtr_IRQ_CallBack[6]();}
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <EXTI9_5_IRQHandler+0x40>
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <EXTI9_5_IRQHandler+0xa4>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;		GPtr_IRQ_CallBack[7]();}
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <EXTI9_5_IRQHandler+0x5e>
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <EXTI9_5_IRQHandler+0xa4>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;		GPtr_IRQ_CallBack[8]();}
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099a:	2b00      	cmp	r3, #0
 800099c:	d008      	beq.n	80009b0 <EXTI9_5_IRQHandler+0x7c>
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <EXTI9_5_IRQHandler+0xa4>)
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;		GPtr_IRQ_CallBack[9]();}
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <EXTI9_5_IRQHandler+0x9a>
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <EXTI9_5_IRQHandler+0xa0>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6153      	str	r3, [r2, #20]
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <EXTI9_5_IRQHandler+0xa4>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	4798      	blx	r3
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40010400 	.word	0x40010400
 80009d8:	20000034 	.word	0x20000034

080009dc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;		GPtr_IRQ_CallBack[10]();}
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d008      	beq.n	80009fe <EXTI15_10_IRQHandler+0x22>
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6153      	str	r3, [r2, #20]
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;		GPtr_IRQ_CallBack[11]();}
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d008      	beq.n	8000a1c <EXTI15_10_IRQHandler+0x40>
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;		GPtr_IRQ_CallBack[12]();}
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d008      	beq.n	8000a3a <EXTI15_10_IRQHandler+0x5e>
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a32:	6153      	str	r3, [r2, #20]
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;		GPtr_IRQ_CallBack[13]();}
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d008      	beq.n	8000a58 <EXTI15_10_IRQHandler+0x7c>
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;		GPtr_IRQ_CallBack[14]();}
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <EXTI15_10_IRQHandler+0x9a>
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 8000a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a74:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;		GPtr_IRQ_CallBack[15]();}
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <EXTI15_10_IRQHandler+0xb8>
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <EXTI15_10_IRQHandler+0xbc>)
 8000a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <EXTI15_10_IRQHandler+0xc0>)
 8000a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a92:	4798      	blx	r3
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010400 	.word	0x40010400
 8000a9c:	20000034 	.word	0x20000034

08000aa0 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_drivers.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	2b80      	cmp	r3, #128	; 0x80
 8000aae:	d042      	beq.n	8000b36 <Get_CRLH_Position+0x96>
 8000ab0:	2b80      	cmp	r3, #128	; 0x80
 8000ab2:	dc11      	bgt.n	8000ad8 <Get_CRLH_Position+0x38>
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d036      	beq.n	8000b26 <Get_CRLH_Position+0x86>
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	dc06      	bgt.n	8000aca <Get_CRLH_Position+0x2a>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d02e      	beq.n	8000b1e <Get_CRLH_Position+0x7e>
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d02e      	beq.n	8000b22 <Get_CRLH_Position+0x82>
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d028      	beq.n	8000b1a <Get_CRLH_Position+0x7a>
 8000ac8:	e047      	b.n	8000b5a <Get_CRLH_Position+0xba>
 8000aca:	2b20      	cmp	r3, #32
 8000acc:	d02f      	beq.n	8000b2e <Get_CRLH_Position+0x8e>
 8000ace:	2b40      	cmp	r3, #64	; 0x40
 8000ad0:	d02f      	beq.n	8000b32 <Get_CRLH_Position+0x92>
 8000ad2:	2b10      	cmp	r3, #16
 8000ad4:	d029      	beq.n	8000b2a <Get_CRLH_Position+0x8a>
 8000ad6:	e040      	b.n	8000b5a <Get_CRLH_Position+0xba>
 8000ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000adc:	d033      	beq.n	8000b46 <Get_CRLH_Position+0xa6>
 8000ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ae2:	dc09      	bgt.n	8000af8 <Get_CRLH_Position+0x58>
 8000ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae8:	d029      	beq.n	8000b3e <Get_CRLH_Position+0x9e>
 8000aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aee:	d028      	beq.n	8000b42 <Get_CRLH_Position+0xa2>
 8000af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af4:	d021      	beq.n	8000b3a <Get_CRLH_Position+0x9a>
 8000af6:	e030      	b.n	8000b5a <Get_CRLH_Position+0xba>
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afc:	d027      	beq.n	8000b4e <Get_CRLH_Position+0xae>
 8000afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b02:	dc03      	bgt.n	8000b0c <Get_CRLH_Position+0x6c>
 8000b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b08:	d01f      	beq.n	8000b4a <Get_CRLH_Position+0xaa>
 8000b0a:	e026      	b.n	8000b5a <Get_CRLH_Position+0xba>
 8000b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b10:	d01f      	beq.n	8000b52 <Get_CRLH_Position+0xb2>
 8000b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b16:	d01e      	beq.n	8000b56 <Get_CRLH_Position+0xb6>
 8000b18:	e01f      	b.n	8000b5a <Get_CRLH_Position+0xba>
	{
	case GPIO_Pin_0 ://Because Pin 0 starts from bit 0
		return 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e01e      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_1 ://Because Pin 1 starts from bit 4
		return 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e01c      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_2 ://Because Pin 2 starts from bit 8
		return 8;
 8000b22:	2308      	movs	r3, #8
 8000b24:	e01a      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_3 ://Because Pin 3 starts from bit 12
		return 12;
 8000b26:	230c      	movs	r3, #12
 8000b28:	e018      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_4 ://Because Pin 4 starts from bit 16
		return 16;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	e016      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_5 ://Because Pin 5 starts from bit 20
		return 20;
 8000b2e:	2314      	movs	r3, #20
 8000b30:	e014      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_6 ://Because Pin 6 starts from bit 24
		return 24;
 8000b32:	2318      	movs	r3, #24
 8000b34:	e012      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_7 ://Because Pin 7 starts from bit 28
		return 28;
 8000b36:	231c      	movs	r3, #28
 8000b38:	e010      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_8 ://Because Pin 8 starts from bit 0
		return 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e00e      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_9 ://Because Pin 9 starts from bit 4
		return 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	e00c      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_10 ://Because Pin 10 starts from bit 8
		return 8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	e00a      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_11 ://Because Pin 11 starts from bit 12
		return 12;
 8000b46:	230c      	movs	r3, #12
 8000b48:	e008      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_12 ://Because Pin 12 starts from bit 16
		return 16;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	e006      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_13 ://Because Pin 13 starts from bit 20
		return 20;
 8000b4e:	2314      	movs	r3, #20
 8000b50:	e004      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_14 ://Because Pin 14 starts from bit 24
		return 24;
 8000b52:	2318      	movs	r3, #24
 8000b54:	e002      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_Pin_15 ://Because Pin 15 starts from bit 28
		return 28;
 8000b56:	231c      	movs	r3, #28
 8000b58:	e000      	b.n	8000b5c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <MCAL_GPIO_Init>:
 * @returnval 	-None
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				But LQFP48 Package has only GPIO A,B,Part of C,D exported as external pins from the
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_Pin_Config_t* PinConfig)
{
 8000b66:	b590      	push	{r4, r7, lr}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure pins from (0->7)
	//Port configuration register High (GPIOx_CRH) configure pins from (8->15)
	volatile uint32_t* configRegister	= NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_Pin_Num < GPIO_Pin_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d801      	bhi.n	8000b84 <MCAL_GPIO_Init+0x1e>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	e001      	b.n	8000b88 <MCAL_GPIO_Init+0x22>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3304      	adds	r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
	//Clear CNF8[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff86 	bl	8000aa0 <Get_CRLH_Position>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	601a      	str	r2, [r3, #0]

	//If pin is Output
	if((PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_AF_PP) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_OD) || (PinConfig->GPIO_Mode == GPIO_Mode_Output_PP))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	d00b      	beq.n	8000bc8 <MCAL_GPIO_Init+0x62>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d007      	beq.n	8000bc8 <MCAL_GPIO_Init+0x62>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d003      	beq.n	8000bc8 <MCAL_GPIO_Init+0x62>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d10e      	bne.n	8000be6 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF8[1:0] MODE8[1:0]
		Pin_Config = ( (((PinConfig->GPIO_Mode -4) << 2 | (PinConfig->GPIO_Output_Speed)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f cause i need only those 4 bits
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	3b04      	subs	r3, #4
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e02c      	b.n	8000c40 <MCAL_GPIO_Init+0xda>
	}

	//If pin is input
	else //Input is 00 by default Mode = 00
	{
		if((PinConfig->GPIO_Mode == GPIO_Mode_Input_Flo) || (PinConfig->GPIO_Mode == GPIO_Mode_Analog))
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d003      	beq.n	8000bf6 <MCAL_GPIO_Init+0x90>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d107      	bne.n	8000c06 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNF8[1:0] MODE8[1:0]00
			Pin_Config = ( (((PinConfig->GPIO_Mode) << 2 | (0x0)) & 0x0f));//I did minus 4 because i defined the output from 4->7 and then shifted by 2 because Cnf is the upper 2 bits then anded by 0x0f causei need only those 4 bits
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e01c      	b.n	8000c40 <MCAL_GPIO_Init+0xda>
			//				(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
		}
		else if(PinConfig->GPIO_Mode == GPIO_Mode_AF_Input)//Consider it as input floating
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	789b      	ldrb	r3, [r3, #2]
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d102      	bne.n	8000c14 <MCAL_GPIO_Init+0xae>
		{
			//Set CNF8[1:0] MODE8[1:0]00
			Pin_Config = ( (((GPIO_Mode_Input_Flo) << 2 | (0x0)) & 0x0f));
 8000c0e:	2304      	movs	r3, #4
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e015      	b.n	8000c40 <MCAL_GPIO_Init+0xda>
			//				(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
		}
		else //PU PD Input
		{
			Pin_Config = ((((GPIO_Mode_Input_PU) << 2) | 0x0) &0x0f);
 8000c14:	2308      	movs	r3, #8
 8000c16:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_Mode == GPIO_Mode_Input_PU)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d107      	bne.n	8000c30 <MCAL_GPIO_Init+0xca>
			{
				//Table 20 Port bit configuration table PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_Pin_Num;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	e007      	b.n	8000c40 <MCAL_GPIO_Init+0xda>
			}
			else//PD //Table 20 Port bit configuration table PxODR = 0
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_Pin_Num);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on CRL or CRH
	(*configRegister) |= ((Pin_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Num));
 8000c40:	7bfc      	ldrb	r4, [r7, #15]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff2a 	bl	8000aa0 <Get_CRLH_Position>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	fa04 f203 	lsl.w	r2, r4, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: pin value
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_Pin_Reset)
 8000c74:	787b      	ldrb	r3, [r7, #1]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <MCAL_GPIO_WritePin+0x1e>
		//OR
		//		BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bi
		GPIOx->BSRR = PinNumber;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = PinNumber;
	}
}
 8000c80:	e002      	b.n	8000c88 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	615a      	str	r2, [r3, #20]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <MCAL_GPIO_WritePort>:
 * @param [in] 	-GPIOx: x(A...E)
 * @returnval 	-None
 * Note			-None
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx , uint16_t Value)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60da      	str	r2, [r3, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <__libc_init_array>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	4e0c      	ldr	r6, [pc, #48]	; (8000ce8 <__libc_init_array+0x38>)
 8000cb6:	4c0d      	ldr	r4, [pc, #52]	; (8000cec <__libc_init_array+0x3c>)
 8000cb8:	1ba4      	subs	r4, r4, r6
 8000cba:	10a4      	asrs	r4, r4, #2
 8000cbc:	42a5      	cmp	r5, r4
 8000cbe:	d109      	bne.n	8000cd4 <__libc_init_array+0x24>
 8000cc0:	f000 f81a 	bl	8000cf8 <_init>
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	4e0a      	ldr	r6, [pc, #40]	; (8000cf0 <__libc_init_array+0x40>)
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <__libc_init_array+0x44>)
 8000cca:	1ba4      	subs	r4, r4, r6
 8000ccc:	10a4      	asrs	r4, r4, #2
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d105      	bne.n	8000cde <__libc_init_array+0x2e>
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cd8:	4798      	blx	r3
 8000cda:	3501      	adds	r5, #1
 8000cdc:	e7ee      	b.n	8000cbc <__libc_init_array+0xc>
 8000cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce2:	4798      	blx	r3
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	e7f2      	b.n	8000cce <__libc_init_array+0x1e>
 8000ce8:	08000d38 	.word	0x08000d38
 8000cec:	08000d38 	.word	0x08000d38
 8000cf0:	08000d38 	.word	0x08000d38
 8000cf4:	08000d3c 	.word	0x08000d3c

08000cf8 <_init>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	bf00      	nop
 8000cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfe:	bc08      	pop	{r3}
 8000d00:	469e      	mov	lr, r3
 8000d02:	4770      	bx	lr

08000d04 <_fini>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr
